import os
import logging
from datetime import datetime, timedelta, UTC
from typing import Optional, List, Dict, Any, Union
import asyncio
import random
import base64
from bson import ObjectId
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from dotenv import load_dotenv
from motor.motor_asyncio import AsyncIOMotorClient

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
try:
    USER_BOT_TOKEN = os.getenv("USER_BOT_TOKEN")
    if not USER_BOT_TOKEN:
        raise ValueError("USER_BOT_TOKEN –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ .env —Ñ–∞–π–ª–µ")
    
    bot = Bot(token=USER_BOT_TOKEN)
    dp = Dispatcher()
    logger.info("–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
    raise

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ MongoDB
try:
    MONGODB_URI = os.getenv("MONGODB_URI")
    if not MONGODB_URI:
        raise ValueError("MONGODB_URI –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ .env —Ñ–∞–π–ª–µ")
    
    mongo_client = AsyncIOMotorClient(MONGODB_URI)
    db = mongo_client.Sparkaph
    logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB: {e}")
    raise

# ID –∫–∞–Ω–∞–ª–∞
CHANNEL_ID = os.getenv("CHANNEL_ID", "")
if not CHANNEL_ID:
    logger.warning("CHANNEL_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class UserStates(StatesGroup):
    waiting_for_challenge_submission = State()
    selecting_category = State()
    waiting_for_media = State()
    registering_gender = State() 
    registering_age = State()
    registering_location = State()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
async def check_subscription(user_id: int) -> bool:
    if not CHANNEL_ID:
        logger.warning("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É: CHANNEL_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return True  # –ï—Å–ª–∏ –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –∫–∞–Ω–∞–ª–µ
        chat_member = await bot.get_chat_member(CHANNEL_ID, user_id)
        # –°—Ç–∞—Ç—É—Å—ã, –æ–∑–Ω–∞—á–∞—é—â–∏–µ, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω
        return chat_member.status in ['creator', 'administrator', 'member']
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        return True

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    try:
        user_id = message.from_user.id
        username = message.from_user.username or "Unknown"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await db.users.find_one({"user_id": user_id})
        
        if not user:
            # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            new_user = {
                "user_id": user_id,
                "username": username,
                "points": 0,
                "current_challenge": None,
                "completed_challenges": [],
                "subscription": False,
                "joined_at": datetime.utcnow(),
                "last_activity": datetime.utcnow(),
                "gender": None,
                "age": None,
                "location": None,
                "invited_by": None
            }
            
            await db.users.insert_one(new_user)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –∑–∞–ø—Ä–æ—Å–æ–º –ø–æ–ª–∞
            await message.answer(
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Sparkaph!\n\n"
                "–î–ª—è –ª—É—á—à–µ–≥–æ –æ–ø—ã—Ç–∞, —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ.\n"
                "–í–∞—à –ø–æ–ª:",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text="–ú—É–∂—Å–∫–æ–π", callback_data="gender_male")],
                        [InlineKeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π", callback_data="gender_female")],
                        [InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="gender_skip")]
                    ]
                )
            )
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –ø–æ–ª–∞
            await state.set_state(UserStates.registering_gender)
            return
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        await db.users.update_one(
            {"user_id": user_id},
            {"$set": {"last_activity": datetime.utcnow()}}
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        is_subscribed = await check_subscription(user_id)
        
        if is_subscribed and not user.get("subscription"):
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –Ω–∞—á–∏—Å–ª—è–µ–º –æ—á–∫–∏
            await db.users.update_one(
                {"user_id": user_id},
                {"$set": {"subscription": True}, "$inc": {"points": 10}}
            )
            await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª! –¢–µ–±–µ –Ω–∞—á–∏—Å–ª–µ–Ω–æ 10 –æ—á–∫–æ–≤.")
        elif not is_subscribed and user.get("subscription"):
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç –∫–∞–Ω–∞–ª–∞
            await db.users.update_one(
                {"user_id": user_id},
                {"$set": {"subscription": False}}
            )
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –∫–∞–Ω–∞–ª
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL_ID.replace('@', '')}")],
                ]
            )
            await message.answer(
                "‚ö†Ô∏è –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –Ω–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞!\n"
                "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª.",
                reply_markup=keyboard
            )
        
        welcome_text = f"–ü—Ä–∏–≤–µ—Ç, {username}! –†–∞–¥ —Å–Ω–æ–≤–∞ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –≤ Sparkaph!\n\n"
        
        if user.get("current_challenge"):
            # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —á–µ–ª–ª–µ–Ω–¥–∂, –Ω–∞–ø–æ–º–∏–Ω–∞–µ–º –æ –Ω–µ–º
            challenge = await db.challenges.find_one({"_id": user["current_challenge"]})
            if challenge:
                welcome_text += f"–£ —Ç–µ–±—è –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —á–µ–ª–ª–µ–Ω–¥–∂: {challenge['text']}\n\n"
        
        welcome_text += f"–¢–≤–æ–∏ –æ—á–∫–∏: {user.get('points', 0)}\n"
        welcome_text += "–ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."
        
        await message.answer(welcome_text, reply_markup=get_main_menu())
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ start: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

@dp.callback_query(UserStates.registering_gender, F.data.startswith("gender_"))
async def process_gender(callback: CallbackQuery, state: FSMContext):
    gender = callback.data.split("_")[1]
    user_id = callback.from_user.id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if gender != "skip":
        await db.users.update_one(
            {"user_id": user_id},
            {"$set": {"gender": gender}}
        )
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–æ–∑—Ä–∞—Å—Ç
    await callback.message.edit_text(
        "–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç? –í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–¥–æ 18", callback_data="age_under18")],
                [InlineKeyboardButton(text="18-24", callback_data="age_18-24")],
                [InlineKeyboardButton(text="25-34", callback_data="age_25-34")],
                [InlineKeyboardButton(text="35-44", callback_data="age_35-44")],
                [InlineKeyboardButton(text="45+", callback_data="age_45plus")],
                [InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="age_skip")]
            ]
        )
    )
    
    await state.set_state(UserStates.registering_age)
    await callback.answer()

@dp.callback_query(UserStates.registering_age, F.data.startswith("age_"))
async def process_age(callback: CallbackQuery, state: FSMContext):
    age = callback.data.split("_")[1]
    user_id = callback.from_user.id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if age != "skip":
        await db.users.update_one(
            {"user_id": user_id},
            {"$set": {"age": age}}
        )
    
    # –§–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    await finalize_registration(callback.message, user_id)
    await state.clear()
    await callback.answer()

async def finalize_registration(message: Message, user_id: int):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
    is_subscribed = await check_subscription(user_id)
    
    if is_subscribed:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –Ω–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å
        await db.users.update_one(
            {"user_id": user_id},
            {"$set": {"subscription": True}, "$inc": {"points": 10}}
        )
        
        await message.edit_text(
            "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.\n\n"
            "–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª! +10 –æ—á–∫–æ–≤ –±–æ–Ω—É—Å.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:",
            reply_markup=None
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())
    else:
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –∫–∞–Ω–∞–ª
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL_ID.replace('@', '')}")],
            ]
        )
        
        await message.edit_text(
            "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.\n\n"
            "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —á–µ–ª–ª–µ–Ω–¥–∂–∞–º –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª.\n"
            "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 10 –æ—á–∫–æ–≤ –±–æ–Ω—É—Å–∞!",
            reply_markup=keyboard
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def get_main_menu():
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="üéØ –ß–µ–ª–ª–µ–Ω–¥–∂–∏")],
            [types.KeyboardButton(text="üìä –ú–æ–π —Ä–µ–π—Ç–∏–Ω–≥"), types.KeyboardButton(text="‚úÖ –ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è")],
            [types.KeyboardButton(text="üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞"), types.KeyboardButton(text="üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞")]
        ],
        resize_keyboard=True
    )
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –º–µ–Ω—é —á–µ–ª–ª–µ–Ω–¥–∂–µ–π
@dp.message(F.text == "üéØ –ß–µ–ª–ª–µ–Ω–¥–∂–∏")
async def show_challenge_categories(message: Message, state: FSMContext):
    try:
        user_id = message.from_user.id
        user = await db.users.find_one({"user_id": user_id})
        
        if not user:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —á–µ—Ä–µ–∑ /start")
            return
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
        is_subscribed = await check_subscription(user_id)
        subscription_changed = False
        
        if is_subscribed and not user.get("subscription"):
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –Ω–∞—á–∏—Å–ª—è–µ–º –æ—á–∫–∏
            await db.users.update_one(
                {"user_id": user_id},
                {"$set": {"subscription": True}, "$inc": {"points": 10}}
            )
            await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –¢–µ–±–µ –Ω–∞—á–∏—Å–ª–µ–Ω–æ 10 –æ—á–∫–æ–≤.")
            subscription_changed = True
        elif not is_subscribed and user.get("subscription"):
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø–∏—Å–∞–ª—Å—è
            await db.users.update_one(
                {"user_id": user_id},
                {"$set": {"subscription": False}}
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –∫–∞–Ω–∞–ª
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL_ID.replace('@', '')}")],
                ]
            )
            
            await message.answer(
                "‚ö†Ô∏è –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –Ω–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞!\n"
                "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —á–µ–ª–ª–µ–Ω–¥–∂–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª.",
                reply_markup=keyboard
            )
            return
        
        if not is_subscribed:
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –∫–∞–Ω–∞–ª
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL_ID.replace('@', '')}")],
                ]
            )
            
            await message.answer(
                "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–µ–ª–ª–µ–Ω–¥–∂–µ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª.\n"
                "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ —Ç—ã –ø–æ–ª—É—á–∏—à—å 10 –æ—á–∫–æ–≤!",
                reply_markup=keyboard
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —á–µ–ª–ª–µ–Ω–¥–∂–∞
        if user.get("current_challenge"):
            # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —á–µ–ª–ª–µ–Ω–¥–∂
            challenge = await db.challenges.find_one({"_id": user["current_challenge"]})
            if challenge:
                category = await db.categories.find_one({"_id": challenge.get("category_id")})
                category_name = category.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è") if category else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è"
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —á–µ–ª–ª–µ–Ω–¥–∂–∞
                challenge_description = challenge.get("description", "")
                
                text = (
                    f"üéØ –£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —á–µ–ª–ª–µ–Ω–¥–∂!\n\n"
                    f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n"
                    f"–ß–µ–ª–ª–µ–Ω–¥–∂: {challenge['text']}\n"
                )
                
                if challenge_description:
                    text += f"\n–û–ø–∏—Å–∞–Ω–∏–µ: {challenge_description}\n"
                
                text += "\n–í—ã–ø–æ–ª–Ω–∏ –µ–≥–æ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π."
                
                await message.answer(text, reply_markup=get_challenge_menu())
                return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ–ª–ª–µ–Ω–¥–∂–µ–π
        categories = await db.categories.find().to_list(length=None)
        
        if not categories:
            await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
            return
        
        # –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[])
        
        for category in categories:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–µ–ª–ª–µ–Ω–¥–∂–µ–π –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            available_challenges = await db.challenges.count_documents({
                "category_id": category["_id"],
                "status": "active",
                "$expr": {"$lt": [{"$size": "$taken_by"}, 5]}
            })
            
            if available_challenges > 0:
                keyboard.inline_keyboard.append([
                    InlineKeyboardButton(
                        text=f"{category['name']} ({available_challenges})", 
                        callback_data=f"category_{category['_id']}"
                    )
                ])
        
        if len(keyboard.inline_keyboard) > 0:
            await message.answer("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —á–µ–ª–ª–µ–Ω–¥–∂–∞:", reply_markup=keyboard)
            await state.set_state(UserStates.selecting_category)
        else:
            await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–µ–ª–ª–µ–Ω–¥–∂–µ–π –Ω–∏ –≤ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —á–µ–ª–ª–µ–Ω–¥–∂–µ–π: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

def get_challenge_menu():
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="üì∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ")],
            [types.KeyboardButton(text="üö´ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂")],
            [types.KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.callback_query(UserStates.selecting_category, F.data.startswith("category_"))
async def select_category(callback: CallbackQuery, state: FSMContext):
    try:
        user_id = callback.from_user.id
        
        try:
            category_id = ObjectId(callback.data.split("_")[1])
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
            await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            await state.clear()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category = await db.categories.find_one({"_id": category_id})
        if not category:
            await callback.message.edit_text("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            await state.clear()
            return
        
        category_name = category["name"]
        category_description = category.get("description", "")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–µ–ª–ª–µ–Ω–¥–∂–∞ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        challenges = await db.challenges.find({
            "category_id": category_id,
            "status": "active",
            "$expr": {"$lt": [{"$size": "$taken_by"}, 5]}
        }).to_list(length=None)
        
        if not challenges:
            await callback.message.edit_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–µ–ª–ª–µ–Ω–¥–∂–µ–π.")
            await state.clear()
            return
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —á–µ–ª–ª–µ–Ω–¥–∂ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
        challenge = random.choice(challenges)
        challenge_description = challenge.get("description", "")
        
        # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        current_time = datetime.now(UTC)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —á–µ–ª–ª–µ–Ω–¥–∂–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db.users.update_one(
            {"user_id": user_id},
            {
                "$set": {
                    "current_challenge": challenge["_id"],
                    "challenge_started_at": current_time,
                    "first_reminder_sent": False,
                    "second_reminder_sent": False
                }
            }
        )
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–µ–ª–ª–µ–Ω–¥–∂–∞
        await db.challenges.update_one(
            {"_id": challenge["_id"]},
            {"$push": {"taken_by": user_id}}
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —á–µ–ª–ª–µ–Ω–¥–∂–∞
        text = f"üéØ –¢–≤–æ–π —á–µ–ª–ª–µ–Ω–¥–∂ (–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}):\n\n"
        text += f"{challenge['text']}\n\n"
        
        if challenge_description:
            text += f"–û–ø–∏—Å–∞–Ω–∏–µ: {challenge_description}\n\n"
        
        if category_description:
            text += f"–û –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category_description}\n\n"
        
        text += "–£ —Ç–µ–±—è –µ—Å—Ç—å 12 —á–∞—Å–æ–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.\n–û—Ç–ø—Ä–∞–≤—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞."
        
        await callback.message.edit_text(text)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        await callback.message.answer("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_challenge_menu())
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        await state.set_state(UserStates.waiting_for_challenge_submission)
        
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ–ª–ª–µ–Ω–¥–∂–∞: {e}")
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –º–µ–¥–∏–∞
@dp.message(F.text == "üì∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ")
async def request_media(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user = await db.users.find_one({"user_id": user_id})
    
    if not user or not user.get("current_challenge"):
        await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–µ–ª–ª–µ–Ω–¥–∂–∞. –ü–æ–ª—É—á–∏ –Ω–æ–≤—ã–π —á–µ–ª–ª–µ–Ω–¥–∂ —Å–Ω–∞—á–∞–ª–∞.", reply_markup=get_main_menu())
        await state.clear()
        return
    
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —á–µ–ª–ª–µ–Ω–¥–∂–∞.\n\n"
        "–ü–æ–¥—Å–∫–∞–∑–∫–∞: –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –º–µ–¥–∏–∞."
    )
    await state.set_state(UserStates.waiting_for_media)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–ø—É—Å–∫–∞ —á–µ–ª–ª–µ–Ω–¥–∂–∞
@dp.message(F.text == "üö´ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂")
async def skip_challenge(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user = await db.users.find_one({"user_id": user_id})
    if user and user.get("current_challenge"):
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –≤–∑—è–≤—à–∏—Ö —á–µ–ª–ª–µ–Ω–¥–∂
        await db.challenges.update_one(
            {"_id": user["current_challenge"]},
            {"$pull": {"taken_by": user_id}}
        )
        
        # –û–±–Ω—É–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —á–µ–ª–ª–µ–Ω–¥–∂ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db.users.update_one(
            {"user_id": user_id},
            {"$set": {"current_challenge": None}}
        )
        
        await message.answer("–ß–µ–ª–ª–µ–Ω–¥–∂ –ø—Ä–æ–ø—É—â–µ–Ω. –¢—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –≤ –º–µ–Ω—é —á–µ–ª–ª–µ–Ω–¥–∂–µ–π.", reply_markup=get_main_menu())
    else:
        await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–µ–ª–ª–µ–Ω–¥–∂–∞.", reply_markup=get_main_menu())
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.message(F.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_menu(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞
@dp.message(UserStates.waiting_for_media)
async def handle_media_submission(message: Message, state: FSMContext):
    try:
        user_id = message.from_user.id
        user = await db.users.find_one({"user_id": user_id})
        
        if not user or not user.get("current_challenge"):
            await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–µ–ª–ª–µ–Ω–¥–∂–∞.", reply_markup=get_main_menu())
            await state.clear()
            return
        
        media = None
        media_type = ""
        file_content = None
        
        if message.photo:
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Ñ–æ—Ç–æ (—Å –Ω–∞–∏–ª—É—á—à–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º)
            media = message.photo[-1].file_id
            media_type = "photo"
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ —Å file_id: {media}")
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            try:
                file = await bot.get_file(media)
                file_path = file.file_path
                file_content_bytes = await bot.download_file(file_path)
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –≤ base64 –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ MongoDB
                file_content = base64.b64encode(file_content_bytes.read()).decode('utf-8')
                logger.info(f"–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ –∏ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–æ, —Ä–∞–∑–º–µ—Ä: {len(file_content)}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–æ—Ç–æ: {e}")
        elif message.video:
            media = message.video.file_id
            media_type = "video"
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –≤–∏–¥–µ–æ —Å file_id: {media}")
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            try:
                file = await bot.get_file(media)
                file_path = file.file_path
                file_content_bytes = await bot.download_file(file_path)
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –≤ base64 –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ MongoDB
                file_content = base64.b64encode(file_content_bytes.read()).decode('utf-8')
                logger.info(f"–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ –∏ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–æ, —Ä–∞–∑–º–µ—Ä: {len(file_content)}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ: {e}")
        elif message.document:
            media = message.document.file_id
            media_type = "document"
            logger.info(f"–ü–æ–ª—É—á–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç —Å file_id: {media}")
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            try:
                file = await bot.get_file(media)
                file_path = file.file_path
                file_content_bytes = await bot.download_file(file_path)
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –≤ base64 –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ MongoDB
                file_content = base64.b64encode(file_content_bytes.read()).decode('utf-8')
                logger.info(f"–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω –∏ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω, —Ä–∞–∑–º–µ—Ä: {len(file_content)}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        elif message.text:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ –º–µ–¥–∏–∞
            media_type = "text"
        
        # –ï—Å–ª–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω, –Ω–æ —ç—Ç–æ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
        if not media and not media_type == "text":
            await message.answer(
                "–ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç."
            )
            return
        
        challenge_id = user["current_challenge"]
        
        submission = {
            "user_id": user_id,
            "challenge_id": challenge_id,
            "text": message.caption if message.caption else (message.text if message.text else "–û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞"),
            "media": media,
            "media_type": media_type,
            "submitted_at": datetime.now(UTC),
            "status": "pending",
            "file_content": file_content  # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        }
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"–°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å media_type: {media_type}, media: {media}, —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞: {'—Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ' if file_content else '–Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ'}")
        
        await db.submissions.insert_one(submission)
        
        # –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —á–µ–ª–ª–µ–Ω–¥–∂–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤–∑—è–≤—à–∏—Ö
        await db.users.update_one(
            {"user_id": user_id},
            {"$set": {"current_challenge": None}}
        )
        
        await db.challenges.update_one(
            {"_id": challenge_id},
            {"$pull": {"taken_by": user_id}}
        )
        
        await message.answer(
            "‚úÖ –¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!\n"
            "–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—ã –ø–æ–ª—É—á–∏—à—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.",
            reply_markup=get_main_menu()
        )
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_main_menu())
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–ª–ª–µ–Ω–¥–∂–∞ (—Ç–µ–∫—Å—Ç)
@dp.message(UserStates.waiting_for_challenge_submission)
async def handle_challenge_submission(message: Message, state: FSMContext):
    try:
        user_id = message.from_user.id
        user = await db.users.find_one({"user_id": user_id})
        
        if not user or not user.get("current_challenge"):
            await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–µ–ª–ª–µ–Ω–¥–∂–∞.", reply_markup=get_main_menu())
            await state.clear()
            return
        
        challenge_id = user["current_challenge"]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–¥–∏–∞
        media = None
        media_type = "text"
        file_content = None
        
        if message.photo:
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Ñ–æ—Ç–æ (—Å –Ω–∞–∏–ª—É—á—à–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º)
            media = message.photo[-1].file_id
            media_type = "photo"
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ —Å file_id: {media}")
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            try:
                file = await bot.get_file(media)
                file_path = file.file_path
                file_content_bytes = await bot.download_file(file_path)
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –≤ base64 –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ MongoDB
                file_content = base64.b64encode(file_content_bytes.read()).decode('utf-8')
                logger.info(f"–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ –∏ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–æ, —Ä–∞–∑–º–µ—Ä: {len(file_content)}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–æ—Ç–æ: {e}")
        elif message.video:
            media = message.video.file_id
            media_type = "video"
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –≤–∏–¥–µ–æ —Å file_id: {media}")
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            try:
                file = await bot.get_file(media)
                file_path = file.file_path
                file_content_bytes = await bot.download_file(file_path)
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –≤ base64 –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ MongoDB
                file_content = base64.b64encode(file_content_bytes.read()).decode('utf-8')
                logger.info(f"–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ –∏ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–æ, —Ä–∞–∑–º–µ—Ä: {len(file_content)}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ: {e}")
        elif message.document:
            media = message.document.file_id
            media_type = "document"
            logger.info(f"–ü–æ–ª—É—á–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç —Å file_id: {media}")
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            try:
                file = await bot.get_file(media)
                file_path = file.file_path
                file_content_bytes = await bot.download_file(file_path)
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –≤ base64 –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ MongoDB
                file_content = base64.b64encode(file_content_bytes.read()).decode('utf-8')
                logger.info(f"–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω –∏ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω, —Ä–∞–∑–º–µ—Ä: {len(file_content)}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        
        submission = {
            "user_id": user_id,
            "challenge_id": challenge_id,
            "text": message.caption if message.caption else (message.text if message.text else "–û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞"),
            "media": media,
            "media_type": media_type,
            "submitted_at": datetime.now(UTC),
            "status": "pending",
            "file_content": file_content  # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        }
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"–°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å media_type: {media_type}, media: {media}, —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞: {'—Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ' if file_content else '–Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ'}")
        
        await db.submissions.insert_one(submission)
        
        # –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —á–µ–ª–ª–µ–Ω–¥–∂–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤–∑—è–≤—à–∏—Ö
        await db.users.update_one(
            {"user_id": user_id},
            {"$set": {"current_challenge": None}}
        )
        
        await db.challenges.update_one(
            {"_id": challenge_id},
            {"$pull": {"taken_by": user_id}}
        )
        
        await message.answer(
            "‚úÖ –¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!\n"
            "–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—ã –ø–æ–ª—É—á–∏—à—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.",
            reply_markup=get_main_menu()
        )
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–µ–ª–ª–µ–Ω–¥–∂–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_main_menu())
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–π—Ç–∏–Ω–≥–∞
@dp.message(F.text == "üìä –ú–æ–π —Ä–µ–π—Ç–∏–Ω–≥")
async def show_rating(message: Message):
    try:
        user_id = message.from_user.id
        
        user = await db.users.find_one({"user_id": user_id})
        if not user:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —á–µ—Ä–µ–∑ /start")
            return
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Å—Ç–∞ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ
        users_with_higher_points = await db.users.count_documents({
            "points": {"$gt": user.get("points", 0)}
        })
        total_users = await db.users.count_documents({})
        rank = users_with_higher_points + 1
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        top_users = await db.users.find().sort("points", -1).limit(10).to_list(length=None)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞
        text = (
            f"üìä –¢–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥:\n\n"
            f"–û—á–∫–∏: {user.get('points', 0)}\n"
            f"–ú–µ—Å—Ç–æ: {rank} –∏–∑ {total_users}\n\n"
            f"üèÜ –¢–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
        )
        
        for i, top_user in enumerate(top_users, 1):
            username = top_user.get("username", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            if not username:
                username = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {top_user['user_id']}"
            
            text += f"{i}. @{username} - {top_user.get('points', 0)} –æ—á–∫–æ–≤\n"
            
            # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –¥–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É
            if top_user["user_id"] == user_id:
                text = text[:-1] + " (—ç—Ç–æ —Ç—ã) üëë\n"
        
        completed_challenges = len(user.get("completed_challenges", []))
        text += f"\n–í—ã–ø–æ–ª–Ω–µ–Ω–æ —á–µ–ª–ª–µ–Ω–¥–∂–µ–π: {completed_challenges}"
        
        await message.answer(text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ä–µ–π—Ç–∏–Ω–≥–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
@dp.message(F.text == "‚úÖ –ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è")
async def show_achievements(message: Message):
    try:
        user_id = message.from_user.id
        
        user = await db.users.find_one({"user_id": user_id})
        if not user:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —á–µ—Ä–µ–∑ /start")
            return
        
        completed = user.get("completed_challenges", [])
        total_completed = len(completed)
        
        if not completed:
            await message.answer(
                "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —á–µ–ª–ª–µ–Ω–¥–∂–µ–π.\n"
                "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –Ω–∞—á–Ω–∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏—è!"
            )
            return
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —á–µ–ª–ª–µ–Ω–¥–∂–µ–π
        recent_challenges = []
        for challenge_id in completed[-5:]:
            challenge = await db.challenges.find_one({"_id": challenge_id})
            if challenge:
                category = await db.categories.find_one({"_id": challenge.get("category_id")})
                category_name = category.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è") if category else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è"
                recent_challenges.append({
                    "text": challenge["text"],
                    "category": category_name
                })
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        category_stats = {}
        for challenge_id in completed:
            challenge = await db.challenges.find_one({"_id": challenge_id})
            if challenge and challenge.get("category_id"):
                category = await db.categories.find_one({"_id": challenge["category_id"]})
                if category:
                    category_name = category["name"]
                    if category_name in category_stats:
                        category_stats[category_name] += 1
                    else:
                        category_stats[category_name] = 1
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        text = (
            f"‚úÖ –¢–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n\n"
            f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ —á–µ–ª–ª–µ–Ω–¥–∂–µ–π: {total_completed}\n\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        if category_stats:
            text += "–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n"
            for category_name, count in sorted(category_stats.items(), key=lambda x: x[1], reverse=True):
                text += f"‚Ä¢ {category_name}: {count}\n"
            text += "\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏
        if recent_challenges:
            text += "–ù–µ–¥–∞–≤–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ:\n"
            for i, challenge in enumerate(reversed(recent_challenges), 1):
                text += f"{i}. {challenge['text']} ({challenge['category']})\n"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        level = 1
        if total_completed >= 5:
            level = 2
        if total_completed >= 15:
            level = 3
        if total_completed >= 30:
            level = 4
        if total_completed >= 50:
            level = 5
            
        text += f"\n–¢–≤–æ–π —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {level} ‚≠ê"
        
        await message.answer(text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–≥–∞
@dp.message(F.text == "üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞")
async def invite_friend(message: Message):
    user_id = message.from_user.id
    
    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    invite_link = f"https://t.me/{(await bot.get_me()).username}?start=ref_{user_id}"
    
    await message.answer(
        "üì± –ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ—á–∫–∏!\n\n"
        f"–¢–≤–æ—è —É–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:\n{invite_link}\n\n"
        "–ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ —Ç—ã –ø–æ–ª—É—á–∏—à—å +20 –æ—á–∫–æ–≤, –∫–æ–≥–¥–∞ –æ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç —Å–≤–æ–π –ø–µ—Ä–≤—ã–π —á–µ–ª–ª–µ–Ω–¥–∂!"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
@dp.message(F.text == "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def contact_support(message: Message):
    await message.answer(
        "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
        "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Å—è –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É: @AserAbiken\n\n"
        "Sparkaph - –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ª–∏—á–Ω–æ—Å—Ç–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ —á–µ–ª–ª–µ–Ω–¥–∂–∏. "
        "–í—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞–Ω–∏—è, –ø–æ–ª—É—á–∞–π –æ—á–∫–∏ –∏ —Å—Ç–∞–Ω–æ–≤–∏—Å—å –ª—É—á—à–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å!"
    )

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –±–æ—Ç–∞")
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        asyncio.create_task(reminder_scheduler())
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        raise

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
async def send_challenge_reminder():
    try:
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —á–µ–ª–ª–µ–Ω–¥–∂–∞–º–∏
        current_time = datetime.now(UTC)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —á–µ–ª–ª–µ–Ω–¥–∂–∞–º–∏
        users = await db.users.find({"current_challenge": {"$ne": None}}).to_list(length=None)
        
        for user in users:
            # –ù–∞—Ö–æ–¥–∏–º —á–µ–ª–ª–µ–Ω–¥–∂ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            challenge = await db.challenges.find_one({"_id": user["current_challenge"]})
            if not challenge:
                continue
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–æ–≥–¥–∞ –±—ã–ª –≤–∑—è—Ç —á–µ–ª–ª–µ–Ω–¥–∂
            # –î–ª—è —ç—Ç–æ–≥–æ –¥–æ–±–∞–≤–∏–º –≤ –±—É–¥—É—â–µ–º –ø–æ–ª–µ challenge_started_at –≤ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            challenge_started_at = user.get("challenge_started_at")
            
            if not challenge_started_at:
                continue
                
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º, —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—à–ª–æ —Å –Ω–∞—á–∞–ª–∞ —á–µ–ª–ª–µ–Ω–¥–∂–∞
            time_passed = (current_time - challenge_started_at).total_seconds() / 3600  # –≤ —á–∞—Å–∞—Ö
            
            # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –æ–∫–æ–ª–æ 6 —á–∞—Å–æ–≤ (–º–µ–∂–¥—É 5.9 –∏ 6.1)
            if 5.9 <= time_passed <= 6.1 and not user.get("first_reminder_sent"):
                await bot.send_message(
                    user["user_id"],
                    "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –¢—ã –Ω–µ –∑–∞–±—ã–ª –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ–π —á–µ–ª–ª–µ–Ω–¥–∂? –£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å 6 —á–∞—Å–æ–≤!"
                )
                # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –ø–µ—Ä–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                await db.users.update_one(
                    {"user_id": user["user_id"]},
                    {"$set": {"first_reminder_sent": True}}
                )
                
            # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –æ–∫–æ–ª–æ 10 —á–∞—Å–æ–≤ (–º–µ–∂–¥—É 9.9 –∏ 10.1)
            elif 9.9 <= time_passed <= 10.1 and not user.get("second_reminder_sent"):
                await bot.send_message(
                    user["user_id"],
                    "‚è∞ –°—Ä–æ—á–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –û—Å—Ç–∞–ª–æ—Å—å –≤—Å–µ–≥–æ 2 —á–∞—Å–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ–ª–ª–µ–Ω–¥–∂–∞! –ù–µ —É–ø—É—Å—Ç–∏ —à–∞–Ω—Å!"
                )
                # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –≤—Ç–æ—Ä–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                await db.users.update_one(
                    {"user_id": user["user_id"]},
                    {"$set": {"second_reminder_sent": True}}
                )
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π, –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
async def reminder_scheduler():
    while True:
        try:
            await send_challenge_reminder()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
        
        # –ñ–¥–µ–º 30 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        await asyncio.sleep(30 * 60)

if __name__ == "__main__":
    import asyncio
    try:
        asyncio.run(main())
    except Exception as e:
        logger.critical(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞: {e}")
        print(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}") 