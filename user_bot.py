import os
import logging
from datetime import datetime, timedelta, UTC
from typing import Optional, List, Dict, Any, Union
import asyncio
import random
import base64
from bson import ObjectId
import ssl
import certifi
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from dotenv import load_dotenv
from motor.motor_asyncio import AsyncIOMotorClient
from PIL import Image
import io

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ñ–ª–∞–≥–∞ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB
MOCK_DB = False  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤ True –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –±–µ–∑ MongoDB

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
try:
    USER_BOT_TOKEN = os.getenv("USER_BOT_TOKEN")
    if not USER_BOT_TOKEN:
        raise ValueError("USER_BOT_TOKEN –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ .env —Ñ–∞–π–ª–µ")
    
    bot = Bot(token=USER_BOT_TOKEN)
    dp = Dispatcher()
    logger.info("–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
    raise

# –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è MongoDB, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
class MockDB:
    """–ö–ª–∞—Å—Å-–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö, –∫–æ–≥–¥–∞ MongoDB –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."""
    
    def __init__(self):
        self.users = MockCollection("users")
        self.categories = MockCollection("categories")
        self.challenges = MockCollection("challenges")
        self.submissions = MockCollection("submissions")
    
    def __getattr__(self, name):
        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        return MockCollection(name)

class MockCollection:
    """–ò–º–∏—Ç–∞—Ü–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ MongoDB."""
    
    def __init__(self, name):
        self.name = name
        self.data = []
        logger.warning(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ {name}")
    
    async def find_one(self, query=None, *args, **kwargs):
        logger.warning(f"–í—ã–∑–æ–≤ find_one –¥–ª—è {self.name} —Å –∑–∞–≥–ª—É—à–∫–æ–π –ë–î")
        # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if self.name == "users" and query and query.get("user_id"):
            return {"user_id": query["user_id"], "username": "user", "points": 0, "current_challenge": None}
        return None
    
    async def find(self, query=None, *args, **kwargs):
        logger.warning(f"–í—ã–∑–æ–≤ find –¥–ª—è {self.name} —Å –∑–∞–≥–ª—É—à–∫–æ–π –ë–î")
        return MockCursor([])
    
    async def insert_one(self, document, *args, **kwargs):
        logger.warning(f"–í—ã–∑–æ–≤ insert_one –¥–ª—è {self.name} —Å –∑–∞–≥–ª—É—à–∫–æ–π –ë–î")
        return MockResult()
    
    async def update_one(self, query, update, *args, **kwargs):
        logger.warning(f"–í—ã–∑–æ–≤ update_one –¥–ª—è {self.name} —Å –∑–∞–≥–ª—É—à–∫–æ–π –ë–î")
        return MockResult()
    
    async def count_documents(self, query=None, *args, **kwargs):
        logger.warning(f"–í—ã–∑–æ–≤ count_documents –¥–ª—è {self.name} —Å –∑–∞–≥–ª—É—à–∫–æ–π –ë–î")
        return 0

class MockCursor:
    """–ò–º–∏—Ç–∞—Ü–∏—è –∫—É—Ä—Å–æ—Ä–∞ MongoDB."""
    
    def __init__(self, data):
        self.data = data
    
    async def to_list(self, length=None):
        return []

class MockResult:
    """–ò–º–∏—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ MongoDB."""
    
    @property
    def inserted_id(self):
        return ObjectId()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ MongoDB
try:
    logger.info("–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB...")
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –æ–±—ã—á–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    mongodb_uri = os.getenv("MONGODB_URI", "")
    
    if not mongodb_uri:
        logger.error("MONGODB_URI –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        if not MOCK_DB:
            MOCK_DB = True
            logger.warning("–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ MOCK_DB –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è URI")
    
    if not MOCK_DB:
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ–±—Ö–æ–¥–∞ –ø—Ä–æ–±–ª–µ–º —Å SSL
            if "?" in mongodb_uri:
                if "tlsAllowInvalidCertificates=true" not in mongodb_uri:
                    mongodb_uri += "&tlsAllowInvalidCertificates=true"
            else:
                mongodb_uri += "?tlsAllowInvalidCertificates=true"
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –±–µ–∑ —Å—Ç—Ä–æ–≥–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ TLS
            mongo_client = AsyncIOMotorClient(
                mongodb_uri,
                tlsAllowInvalidCertificates=True,  # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —ç—Ç—É –æ–ø—Ü–∏—é
                connectTimeoutMS=10000,
                socketTimeoutMS=10000,
                serverSelectionTimeoutMS=10000,
                heartbeatFrequencyMS=15000,
                retryWrites=False,
            )
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            db = mongo_client.Sparkaph
            logger.info("MongoDB –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MongoDB –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            MOCK_DB = True
    
    if MOCK_DB:
        logger.warning("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞–≥–ª—É—à–∫–∞ –≤–º–µ—Å—Ç–æ MongoDB")
        db = MockDB()

except Exception as e:
    logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MongoDB: {e}")
    # –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É —Å –∑–∞–≥–ª—É—à–∫–æ–π
    db = MockDB()
    MOCK_DB = True

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
@dp.message(Command("dbtest"))
async def cmd_dbtest(message: Message):
    try:
        await message.answer("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB...")
        
        if MOCK_DB:
            await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞–≥–ª—É—à–∫–∞ –≤–º–µ—Å—Ç–æ MongoDB")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            result = await mongo_client.admin.command("ping", serverSelectionTimeoutMS=5000)
            await message.answer(f"‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∞–∑—ã
            collections = await db.list_collection_names()
            await message.answer(f"üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {', '.join(collections) if collections else '–Ω–µ—Ç'}")
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ MongoDB: {e}")
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

# ID –∫–∞–Ω–∞–ª–∞
CHANNEL_ID = os.getenv("CHANNEL_ID", "")
if not CHANNEL_ID:
    logger.warning("CHANNEL_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class UserStates(StatesGroup):
    waiting_for_challenge_submission = State()
    selecting_category = State()
    waiting_for_media = State()
    registering_gender = State() 
    registering_age = State()
    registering_location = State()

# –ë–µ–π–¥–∂–∏ –∏ –∏—Ö —É—Å–ª–æ–≤–∏—è
BADGES = {
    "first_challenge": {
        "name": "üéØ –ü–µ—Ä–≤—ã–π —à–∞–≥",
        "description": "–í—ã–ø–æ–ª–Ω–∏–ª —Å–≤–æ–π –ø–µ—Ä–≤—ã–π —á–µ–ª–ª–µ–Ω–¥–∂"
    },
    "streak_3": {
        "name": "üî• –ì–æ—Ä—è—á–∞—è —Å–µ—Ä–∏—è",
        "description": "3 –¥–Ω—è –ø–æ–¥—Ä—è–¥ –≤—ã–ø–æ–ª–Ω—è–ª —á–µ–ª–ª–µ–Ω–¥–∂–∏"
    },
    "streak_7": {
        "name": "‚ö° –ù–µ–¥–µ–ª—è —Å–∏–ª—ã",
        "description": "7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ –≤—ã–ø–æ–ª–Ω—è–ª —á–µ–ª–ª–µ–Ω–¥–∂–∏"
    },
    "streak_30": {
        "name": "üåü –õ–µ–≥–µ–Ω–¥–∞",
        "description": "30 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ –≤—ã–ø–æ–ª–Ω—è–ª —á–µ–ª–ª–µ–Ω–¥–∂–∏"
    },
    "invite_5": {
        "name": "üë• –°–æ—Ü–∏–∞–ª—å–Ω–∞—è –±–∞–±–æ—á–∫–∞",
        "description": "–ü—Ä–∏–≥–ª–∞—Å–∏–ª 5 –¥—Ä—É–∑–µ–π"
    },
    "challenges_10": {
        "name": "üèÜ –î–µ—Å—è—Ç–æ—á–∫–∞",
        "description": "–í—ã–ø–æ–ª–Ω–∏–ª 10 —á–µ–ª–ª–µ–Ω–¥–∂–µ–π"
    },
    "challenges_50": {
        "name": "üí´ –ú–∞—Å—Ç–µ—Ä",
        "description": "–í—ã–ø–æ–ª–Ω–∏–ª 50 —á–µ–ª–ª–µ–Ω–¥–∂–µ–π"
    },
    "challenges_100": {
        "name": "üëë –õ–µ–≥–µ–Ω–¥–∞",
        "description": "–í—ã–ø–æ–ª–Ω–∏–ª 100 —á–µ–ª–ª–µ–Ω–¥–∂–µ–π"
    }
}

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É—Ä–æ–≤–Ω–µ–π
LEVELS = {
    1: {"points": 0, "name": "–ù–æ–≤–∏—á–æ–∫"},
    2: {"points": 100, "name": "–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å"},
    3: {"points": 300, "name": "–ê–∫—Ç–∏–≤–∏—Å—Ç"},
    4: {"points": 600, "name": "–≠–Ω—Ç—É–∑–∏–∞—Å—Ç"},
    5: {"points": 1000, "name": "–ú–∞—Å—Ç–µ—Ä"},
    6: {"points": 1500, "name": "–ì—É—Ä—É"},
    7: {"points": 2100, "name": "–õ–µ–≥–µ–Ω–¥–∞"},
    8: {"points": 2800, "name": "–ò–º–ø–µ—Ä–∞—Ç–æ—Ä"},
    9: {"points": 3600, "name": "–¢–∏—Ç–∞–Ω"},
    10: {"points": 4500, "name": "–ë–æ–≥"}
}

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤
DAILY_BONUSES = {
    1: 10,  # 1 –¥–µ–Ω—å - 10 –æ—á–∫–æ–≤
    2: 15,  # 2 –¥–Ω—è - 15 –æ—á–∫–æ–≤
    3: 20,  # 3 –¥–Ω—è - 20 –æ—á–∫–æ–≤
    4: 25,  # 4 –¥–Ω—è - 25 –æ—á–∫–æ–≤
    5: 30,  # 5 –¥–Ω–µ–π - 30 –æ—á–∫–æ–≤
    6: 35,  # 6 –¥–Ω–µ–π - 35 –æ—á–∫–æ–≤
    7: 50   # 7 –¥–Ω–µ–π - 50 –æ—á–∫–æ–≤
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è streak
async def update_streak(user_id: int) -> tuple:
    user = await db.users.find_one({"user_id": user_id})
    if not user:
        return 0, 0
    
    now = datetime.now(UTC)
    last_daily = user.get("last_daily")
    current_streak = user.get("streak", 0)
    
    if not last_daily:
        # –ü–µ—Ä–≤—ã–π –≤—Ö–æ–¥
        await db.users.update_one(
            {"user_id": user_id},
            {"$set": {"last_daily": now, "streak": 1}}
        )
        return 1, DAILY_BONUSES[1]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ 24 —á–∞—Å–∞ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
    time_diff = now - last_daily
    if time_diff.days >= 2:
        # Streak –ø—Ä–µ—Ä–≤–∞–Ω
        await db.users.update_one(
            {"user_id": user_id},
            {"$set": {"last_daily": now, "streak": 1}}
        )
        return 1, DAILY_BONUSES[1]
    elif time_diff.days == 1:
        # Streak –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è
        new_streak = min(current_streak + 1, 7)
        bonus = DAILY_BONUSES[new_streak]
        
        await db.users.update_one(
            {"user_id": user_id},
            {
                "$set": {"last_daily": now, "streak": new_streak},
                "$inc": {"points": bonus}
            }
        )
        return new_streak, bonus
    else:
        # –£–∂–µ –ø–æ–ª—É—á–∏–ª –±–æ–Ω—É—Å —Å–µ–≥–æ–¥–Ω—è
        return current_streak, 0

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–¥–∞—á–∏ –±–µ–π–¥–∂–∞
async def award_badge(user_id: int, badge_id: str):
    user = await db.users.find_one({"user_id": user_id})
    if not user:
        return
    
    badges = user.get("badges", [])
    if badge_id not in badges:
        badges.append(badge_id)
        await db.users.update_one(
            {"user_id": user_id},
            {"$set": {"badges": badges}}
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –±–µ–π–¥–∂–µ
        badge = BADGES[badge_id]
        await bot.send_message(
            user_id,
            f"üèÜ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –Ω–æ–≤—ã–π –±–µ–π–¥–∂:\n\n"
            f"{badge['name']}\n"
            f"{badge['description']}"
        )

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
async def check_subscription(user_id: int) -> bool:
    if not CHANNEL_ID:
        logger.warning("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É: CHANNEL_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return True  # –ï—Å–ª–∏ –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –∫–∞–Ω–∞–ª–µ
        chat_member = await bot.get_chat_member(CHANNEL_ID, user_id)
        # –°—Ç–∞—Ç—É—Å—ã, –æ–∑–Ω–∞—á–∞—é—â–∏–µ, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω
        return chat_member.status in ['creator', 'administrator', 'member']
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        return True

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def get_user_level(points: int) -> int:
    for level, data in sorted(LEVELS.items(), reverse=True):
        if points >= data["points"]:
            return level
    return 1

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
async def get_level_progress(points: int) -> tuple:
    current_level = await get_user_level(points)
    if current_level >= 10:
        return 100, 0
    
    current_level_points = LEVELS[current_level]["points"]
    next_level_points = LEVELS[current_level + 1]["points"]
    points_needed = next_level_points - current_level_points
    points_have = points - current_level_points
    
    progress = (points_have / points_needed) * 100
    return progress, points_needed - points_have

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
async def generate_referral_link(user_id: int) -> str:
    bot_username = (await bot.get_me()).username
    return f"https://t.me/{bot_username}?start=ref{user_id}"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
async def process_referral_code(user_id: int, ref_code: str) -> bool:
    try:
        ref_id = int(ref_code[3:])  # –£–±–∏—Ä–∞–µ–º 'ref' –∏–∑ –∫–æ–¥–∞
        if ref_id == user_id:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
        user = await db.users.find_one({"user_id": user_id})
        if user and user.get("referred_by"):
            return False
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ñ–µ—Ä–∞–ª–µ
        await db.users.update_one(
            {"user_id": user_id},
            {"$set": {"referred_by": ref_id}}
        )
        
        # –ù–∞—á–∏—Å–ª—è–µ–º –æ—á–∫–∏ —Ä–µ—Ñ–µ—Ä–µ—Ä—É
        await db.users.update_one(
            {"user_id": ref_id},
            {"$inc": {"points": 20}}
        )
        
        return True
    except:
        return False

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    try:
        user_id = message.from_user.id
        username = message.from_user.username or "Unknown"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
        args = message.text.split()
        if len(args) > 1 and args[1].startswith("ref"):
            await process_referral_code(user_id, args[1])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await db.users.find_one({"user_id": user_id})
        if not user:
            user = {
                "user_id": user_id,
                "username": username,
                "points": 0,
                "level": 1,
                "challenges_completed": 0,
                "created_at": datetime.now(UTC),
                "last_activity": datetime.now(UTC),
                "streak": 0,
                "last_daily": None,
                "notifications_disabled": False
            }
            await db.users.insert_one(user)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å
        streak, bonus = await update_streak(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å
        level = await get_user_level(user["points"])
        progress, points_needed = await get_level_progress(user["points"])
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
        ref_link = await generate_referral_link(user_id)
        
        welcome_text = (
            f"üëã –ü—Ä–∏–≤–µ—Ç, {username}!\n\n"
            f"üéØ –¢–≤–æ–π —É—Ä–æ–≤–µ–Ω—å: {level} ({LEVELS[level]['name']})\n"
            f"üíé –û—á–∫–æ–≤: {user['points']}\n"
            f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: {progress:.1f}%\n"
            f"   –û—Å—Ç–∞–ª–æ—Å—å –æ—á–∫–æ–≤: {points_needed}\n"
            f"üî• –¢–≤–æ–π streak: {streak} –¥–Ω–µ–π\n"
        )
        
        if bonus > 0:
            welcome_text += f"üéÅ –ü–æ–ª—É—á–µ–Ω –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å: +{bonus} –æ—á–∫–æ–≤!\n\n"
        
        welcome_text += (
            f"üîó –¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{ref_link}\n\n"
            f"–ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π +20 –æ—á–∫–æ–≤ –∑–∞ –∫–∞–∂–¥–æ–≥–æ!"
        )
        
        keyboard = types.ReplyKeyboardMarkup(
            keyboard=[
                [types.KeyboardButton(text="üéØ –ß–µ–ª–ª–µ–Ω–¥–∂–∏"), types.KeyboardButton(text="üìä –ú–æ–π —Ä–µ–π—Ç–∏–Ω–≥")],
                [types.KeyboardButton(text="‚úÖ –ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"), types.KeyboardButton(text="üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞")],
                [types.KeyboardButton(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"), types.KeyboardButton(text="üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞")]
            ],
            resize_keyboard=True
        )
        
        await message.answer(welcome_text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ start: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.callback_query(UserStates.registering_gender, F.data.startswith("gender_"))
async def process_gender(callback: CallbackQuery, state: FSMContext):
    gender = callback.data.split("_")[1]
    user_id = callback.from_user.id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if gender != "skip":
        await db.users.update_one(
            {"user_id": user_id},
            {"$set": {"gender": gender}}
        )
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–æ–∑—Ä–∞—Å—Ç
    await callback.message.edit_text(
        "–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç? –í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–¥–æ 18", callback_data="age_under18")],
                [InlineKeyboardButton(text="18-24", callback_data="age_18-24")],
                [InlineKeyboardButton(text="25-34", callback_data="age_25-34")],
                [InlineKeyboardButton(text="35-44", callback_data="age_35-44")],
                [InlineKeyboardButton(text="45+", callback_data="age_45plus")],
                [InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="age_skip")]
            ]
        )
    )
    
    await state.set_state(UserStates.registering_age)
    await callback.answer()

@dp.callback_query(UserStates.registering_age, F.data.startswith("age_"))
async def process_age(callback: CallbackQuery, state: FSMContext):
    age = callback.data.split("_")[1]
    user_id = callback.from_user.id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if age != "skip":
        await db.users.update_one(
            {"user_id": user_id},
            {"$set": {"age": age}}
        )
    
    # –§–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    await finalize_registration(callback.message, user_id)
    await state.clear()
    await callback.answer()

async def finalize_registration(message: Message, user_id: int):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
    is_subscribed = await check_subscription(user_id)
    
    if is_subscribed:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –Ω–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å
        await db.users.update_one(
            {"user_id": user_id},
            {"$set": {"subscription": True}, "$inc": {"points": 10}}
        )
        
        await message.edit_text(
            "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.\n\n"
            "–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª! +10 –æ—á–∫–æ–≤ –±–æ–Ω—É—Å.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:",
            reply_markup=None
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())
    else:
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –∫–∞–Ω–∞–ª
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL_ID.replace('@', '')}")],
            ]
        )
        
        await message.edit_text(
            "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.\n\n"
            "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —á–µ–ª–ª–µ–Ω–¥–∂–∞–º –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª.\n"
            "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 10 –æ—á–∫–æ–≤ –±–æ–Ω—É—Å–∞!",
            reply_markup=keyboard
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def get_main_menu():
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="üéØ –ß–µ–ª–ª–µ–Ω–¥–∂–∏")],
            [types.KeyboardButton(text="üìä –ú–æ–π —Ä–µ–π—Ç–∏–Ω–≥"), types.KeyboardButton(text="‚úÖ –ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è")],
            [types.KeyboardButton(text="üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞"), types.KeyboardButton(text="üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞")],
            [types.KeyboardButton(text="üé° –ö–æ–ª–µ—Å–æ —Ñ–æ—Ä—Ç—É–Ω—ã"), types.KeyboardButton(text="üé® –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ–±–ª–æ–∂–µ–∫")]
        ],
        resize_keyboard=True
    )
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –º–µ–Ω—é —á–µ–ª–ª–µ–Ω–¥–∂–µ–π
@dp.message(F.text == "üéØ –ß–µ–ª–ª–µ–Ω–¥–∂–∏")
async def show_challenge_categories(message: Message, state: FSMContext):
    try:
        user_id = message.from_user.id
        user = await db.users.find_one({"user_id": user_id})
        
        if not user:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —á–µ—Ä–µ–∑ /start")
            return
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
        is_subscribed = await check_subscription(user_id)
        subscription_changed = False
        
        if is_subscribed and not user.get("subscription"):
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –Ω–∞—á–∏—Å–ª—è–µ–º –æ—á–∫–∏
            await db.users.update_one(
                {"user_id": user_id},
                {"$set": {"subscription": True}, "$inc": {"points": 10}}
            )
            await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –¢–µ–±–µ –Ω–∞—á–∏—Å–ª–µ–Ω–æ 10 –æ—á–∫–æ–≤.")
            subscription_changed = True
        elif not is_subscribed and user.get("subscription"):
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø–∏—Å–∞–ª—Å—è
            await db.users.update_one(
                {"user_id": user_id},
                {"$set": {"subscription": False}}
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –∫–∞–Ω–∞–ª
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL_ID.replace('@', '')}")],
                ]
            )
            
            await message.answer(
                "‚ö†Ô∏è –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –Ω–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞!\n"
                "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —á–µ–ª–ª–µ–Ω–¥–∂–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª.",
                reply_markup=keyboard
            )
            return
        
        if not is_subscribed:
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –∫–∞–Ω–∞–ª
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL_ID.replace('@', '')}")],
                ]
            )
            
            await message.answer(
                "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–µ–ª–ª–µ–Ω–¥–∂–µ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª.\n"
                "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ —Ç—ã –ø–æ–ª—É—á–∏—à—å 10 –æ—á–∫–æ–≤!",
                reply_markup=keyboard
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —á–µ–ª–ª–µ–Ω–¥–∂–∞
        if user.get("current_challenge"):
            # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —á–µ–ª–ª–µ–Ω–¥–∂
            challenge = await db.challenges.find_one({"_id": user["current_challenge"]})
            if challenge:
                category = await db.categories.find_one({"_id": challenge.get("category_id")})
                category_name = category.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è") if category else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è"
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —á–µ–ª–ª–µ–Ω–¥–∂–∞
                challenge_description = challenge.get("description", "")
                
                text = (
                    f"üéØ –£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —á–µ–ª–ª–µ–Ω–¥–∂!\n\n"
                    f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n"
                    f"–ß–µ–ª–ª–µ–Ω–¥–∂: {challenge['text']}\n"
                )
                
                if challenge_description:
                    text += f"\n–û–ø–∏—Å–∞–Ω–∏–µ: {challenge_description}\n"
                
                text += "\n–í—ã–ø–æ–ª–Ω–∏ –µ–≥–æ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π."
                
                await message.answer(text, reply_markup=get_challenge_menu())
                return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ–ª–ª–µ–Ω–¥–∂–µ–π
        categories = await db.categories.find().to_list(length=None)
        
        if not categories:
            await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
            return
        
        # –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[])
        
        for category in categories:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–µ–ª–ª–µ–Ω–¥–∂–µ–π –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            available_challenges = await db.challenges.count_documents({
                "category_id": category["_id"],
                "status": "active",
                "$expr": {"$lt": [{"$size": "$taken_by"}, 5]}
            })
            
            if available_challenges > 0:
                keyboard.inline_keyboard.append([
                    InlineKeyboardButton(
                        text=f"{category['name']} ({available_challenges})", 
                        callback_data=f"category_{category['_id']}"
                    )
                ])
        
        if len(keyboard.inline_keyboard) > 0:
            await message.answer("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —á–µ–ª–ª–µ–Ω–¥–∂–∞:", reply_markup=keyboard)
            await state.set_state(UserStates.selecting_category)
        else:
            await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–µ–ª–ª–µ–Ω–∂–µ–π –Ω–∏ –≤ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —á–µ–ª–ª–µ–Ω–¥–∂–µ–π: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

def get_challenge_menu():
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="üì∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ")],
            [types.KeyboardButton(text="üö´ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂")],
            [types.KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.callback_query(UserStates.selecting_category, F.data.startswith("category_"))
async def select_category(callback: CallbackQuery, state: FSMContext):
    try:
        user_id = callback.from_user.id
        
        try:
            category_id = ObjectId(callback.data.split("_")[1])
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
            await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            await state.clear()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category = await db.categories.find_one({"_id": category_id})
        if not category:
            await callback.message.edit_text("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            await state.clear()
            return
        
        category_name = category["name"]
        category_description = category.get("description", "")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–µ–ª–ª–µ–Ω–¥–∂–∞ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        challenges = await db.challenges.find({
            "category_id": category_id,
            "status": "active",
            "$expr": {"$lt": [{"$size": "$taken_by"}, 5]}
        }).to_list(length=None)
        
        if not challenges:
            await callback.message.edit_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–µ–ª–ª–µ–Ω–¥–∂–µ–π.")
            await state.clear()
            return
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —á–µ–ª–ª–µ–Ω–¥–∂ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
        challenge = random.choice(challenges)
        challenge_description = challenge.get("description", "")
        
        # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        current_time = datetime.now(UTC)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —á–µ–ª–ª–µ–Ω–¥–∂–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db.users.update_one(
            {"user_id": user_id},
            {
                "$set": {
                    "current_challenge": challenge["_id"],
                    "challenge_started_at": current_time,
                    "first_reminder_sent": False,
                    "second_reminder_sent": False
                }
            }
        )
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–µ–ª–ª–µ–Ω–¥–∂–∞
        await db.challenges.update_one(
            {"_id": challenge["_id"]},
            {"$push": {"taken_by": user_id}}
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —á–µ–ª–ª–µ–Ω–¥–∂–∞
        text = f"üéØ –¢–≤–æ–π —á–µ–ª–ª–µ–Ω–¥–∂ (–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}):\n\n"
        text += f"{challenge['text']}\n\n"
        
        if challenge_description:
            text += f"–û–ø–∏—Å–∞–Ω–∏–µ: {challenge_description}\n\n"
        
        if category_description:
            text += f"–û –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category_description}\n\n"
        
        text += "–£ —Ç–µ–±—è –µ—Å—Ç—å 12 —á–∞—Å–æ–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.\n–û—Ç–ø—Ä–∞–≤—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞."
        
        await callback.message.edit_text(text)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        await callback.message.answer("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_challenge_menu())
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        await state.set_state(UserStates.waiting_for_challenge_submission)
        
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ–ª–ª–µ–Ω–¥–∂–∞: {e}")
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –º–µ–¥–∏–∞
@dp.message(F.text == "üì∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ")
async def request_media(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user = await db.users.find_one({"user_id": user_id})
    
    if not user or not user.get("current_challenge"):
        await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–µ–ª–ª–µ–Ω–¥–∂–∞. –ü–æ–ª—É—á–∏ –Ω–æ–≤—ã–π —á–µ–ª–ª–µ–Ω–¥–∂ —Å–Ω–∞—á–∞–ª–∞.", reply_markup=get_main_menu())
        await state.clear()
        return
    
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —á–µ–ª–ª–µ–Ω–¥–∂–∞.\n\n"
        "–ü–æ–¥—Å–∫–∞–∑–∫–∞: –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –º–µ–¥–∏–∞."
    )
    await state.set_state(UserStates.waiting_for_media)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–ø—É—Å–∫–∞ —á–µ–ª–ª–µ–Ω–¥–∂–∞
@dp.message(F.text == "üö´ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂")
async def skip_challenge(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user = await db.users.find_one({"user_id": user_id})
    if user and user.get("current_challenge"):
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –≤–∑—è–≤—à–∏—Ö —á–µ–ª–ª–µ–Ω–¥–∂
        await db.challenges.update_one(
            {"_id": user["current_challenge"]},
            {"$pull": {"taken_by": user_id}}
        )
        
        # –û–±–Ω—É–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —á–µ–ª–ª–µ–Ω–¥–∂ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db.users.update_one(
            {"user_id": user_id},
            {"$set": {"current_challenge": None}}
        )
        
        await message.answer("–ß–µ–ª–ª–µ–Ω–¥–∂ –ø—Ä–æ–ø—É—â–µ–Ω. –¢—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –≤ –º–µ–Ω—é —á–µ–ª–ª–µ–Ω–¥–∂–µ–π.", reply_markup=get_main_menu())
    else:
        await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–µ–ª–ª–µ–Ω–¥–∂–∞.", reply_markup=get_main_menu())
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.message(F.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_menu(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞
@dp.message(UserStates.waiting_for_media)
async def handle_media_submission(message: Message, state: FSMContext):
    try:
        user_id = message.from_user.id
        user = await db.users.find_one({"user_id": user_id})
        
        if not user or not user.get("current_challenge"):
            await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–µ–ª–ª–µ–Ω–¥–∂–∞.", reply_markup=get_main_menu())
            await state.clear()
            return
        
        media = None
        media_type = ""
        file_content = None
        
        if message.photo:
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Ñ–æ—Ç–æ (—Å –Ω–∞–∏–ª—É—á—à–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º)
            media = message.photo[-1].file_id
            media_type = "photo"
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ —Å file_id: {media}")
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            try:
                file = await bot.get_file(media)
                file_path = file.file_path
                file_content_bytes = await bot.download_file(file_path)
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –≤ base64 –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ MongoDB
                file_content = base64.b64encode(file_content_bytes.read()).decode('utf-8')
                logger.info(f"–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ –∏ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–æ, —Ä–∞–∑–º–µ—Ä: {len(file_content)}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–æ—Ç–æ: {e}")
        elif message.video:
            media = message.video.file_id
            media_type = "video"
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –≤–∏–¥–µ–æ —Å file_id: {media}")
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            try:
                file = await bot.get_file(media)
                file_path = file.file_path
                file_content_bytes = await bot.download_file(file_path)
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –≤ base64 –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ MongoDB
                file_content = base64.b64encode(file_content_bytes.read()).decode('utf-8')
                logger.info(f"–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ –∏ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–æ, —Ä–∞–∑–º–µ—Ä: {len(file_content)}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ: {e}")
        elif message.document:
            media = message.document.file_id
            media_type = "document"
            logger.info(f"–ü–æ–ª—É—á–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç —Å file_id: {media}")
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            try:
                file = await bot.get_file(media)
                file_path = file.file_path
                file_content_bytes = await bot.download_file(file_path)
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –≤ base64 –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ MongoDB
                file_content = base64.b64encode(file_content_bytes.read()).decode('utf-8')
                logger.info(f"–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω –∏ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω, —Ä–∞–∑–º–µ—Ä: {len(file_content)}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        elif message.text:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ –º–µ–¥–∏–∞
            media_type = "text"
        
        # –ï—Å–ª–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω, –Ω–æ —ç—Ç–æ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
        if not media and not media_type == "text":
            await message.answer(
                "–ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç."
            )
            return
        
        challenge_id = user["current_challenge"]
        
        submission = {
            "user_id": user_id,
            "challenge_id": challenge_id,
            "text": message.caption if message.caption else (message.text if message.text else "–û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞"),
            "media": media,
            "media_type": media_type,
            "submitted_at": datetime.now(UTC),
            "status": "pending",
            "file_content": file_content  # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        }
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"–°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å media_type: {media_type}, media: {media}, —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞: {'—Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ' if file_content else '–Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ'}")
        
        await db.submissions.insert_one(submission)
        
        # –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —á–µ–ª–ª–µ–Ω–¥–∂–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤–∑—è–≤—à–∏—Ö
        await db.users.update_one(
            {"user_id": user_id},
            {"$set": {"current_challenge": None}}
        )
        
        await db.challenges.update_one(
            {"_id": challenge_id},
            {"$pull": {"taken_by": user_id}}
        )
        
        await message.answer(
            "‚úÖ –¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!\n"
            "–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—ã –ø–æ–ª—É—á–∏—à—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.",
            reply_markup=get_main_menu()
        )
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_main_menu())
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–ª–ª–µ–Ω–¥–∂–∞ (—Ç–µ–∫—Å—Ç)
@dp.message(UserStates.waiting_for_challenge_submission)
async def handle_challenge_submission(message: Message, state: FSMContext):
    try:
        user_id = message.from_user.id
        user = await db.users.find_one({"user_id": user_id})
        
        if not user or not user.get("current_challenge"):
            await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–µ–ª–ª–µ–Ω–¥–∂–∞.", reply_markup=get_main_menu())
            await state.clear()
            return
        
        challenge_id = user["current_challenge"]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–¥–∏–∞
        media = None
        media_type = "text"
        file_content = None
        
        if message.photo:
            media = message.photo[-1].file_id
            media_type = "photo"
        elif message.video:
            media = message.video.file_id
            media_type = "video"
        elif message.document:
            media = message.document.file_id
            media_type = "document"
        
        submission = {
            "user_id": user_id,
            "challenge_id": challenge_id,
            "text": message.caption if message.caption else (message.text if message.text else "–û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞"),
            "media": media,
            "media_type": media_type,
            "submitted_at": datetime.now(UTC),
            "status": "pending",
            "file_content": file_content
        }
        
        await db.submissions.insert_one(submission)
        
        # –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —á–µ–ª–ª–µ–Ω–¥–∂–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤–∑—è–≤—à–∏—Ö
        await db.users.update_one(
            {"user_id": user_id},
            {"$set": {"current_challenge": None}}
        )
        
        await db.challenges.update_one(
            {"_id": challenge_id},
            {"$pull": {"taken_by": user_id}}
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º streak –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–π–¥–∂–∏
        await update_streak(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–π–¥–∂ –∑–∞ –ø–µ—Ä–≤—ã–π —á–µ–ª–ª–µ–Ω–¥–∂
        if len(user.get("completed_challenges", [])) == 0:
            await award_badge(user_id, "first_challenge")
        
        await message.answer(
            "‚úÖ –¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!\n"
            "–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—ã –ø–æ–ª—É—á–∏—à—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.",
            reply_markup=get_main_menu()
        )
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–µ–ª–ª–µ–Ω–¥–∂–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_main_menu())
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–π—Ç–∏–Ω–≥–∞
@dp.message(F.text == "üìä –ú–æ–π —Ä–µ–π—Ç–∏–Ω–≥")
async def show_rating(message: Message):
    try:
        user_id = message.from_user.id
        
        user = await db.users.find_one({"user_id": user_id})
        if not user:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —á–µ—Ä–µ–∑ /start")
            return
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Å—Ç–∞ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ
        users_with_higher_points = await db.users.count_documents({
            "points": {"$gt": user.get("points", 0)}
        })
        total_users = await db.users.count_documents({})
        rank = users_with_higher_points + 1
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        top_users = await db.users.find().sort("points", -1).limit(10).to_list(length=None)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞
        text = (
            f"üìä –¢–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥:\n\n"
            f"–û—á–∫–∏: {user.get('points', 0)}\n"
            f"–ú–µ—Å—Ç–æ: {rank} –∏–∑ {total_users}\n\n"
            f"üèÜ –¢–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
        )
        
        for i, top_user in enumerate(top_users, 1):
            username = top_user.get("username", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            if not username:
                username = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {top_user['user_id']}"
            
            text += f"{i}. @{username} - {top_user.get('points', 0)} –æ—á–∫–æ–≤\n"
            
            # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –¥–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É
            if top_user["user_id"] == user_id:
                text = text[:-1] + " (—ç—Ç–æ —Ç—ã) üëë\n"
        
        completed_challenges = len(user.get("completed_challenges", []))
        text += f"\n–í—ã–ø–æ–ª–Ω–µ–Ω–æ —á–µ–ª–ª–µ–Ω–¥–∂–µ–π: {completed_challenges}"
        
        await message.answer(text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ä–µ–π—Ç–∏–Ω–≥–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
@dp.message(F.text == "‚úÖ –ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è")
async def show_achievements(message: Message):
    try:
        user_id = message.from_user.id
        
        user = await db.users.find_one({"user_id": user_id})
        if not user:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —á–µ—Ä–µ–∑ /start")
            return
        
        completed = user.get("completed_challenges", [])
        total_completed = len(completed)
        
        if not completed:
            await message.answer(
                "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —á–µ–ª–ª–µ–Ω–¥–∂–µ–π.\n"
                "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –Ω–∞—á–Ω–∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏—è!"
            )
            return
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —á–µ–ª–ª–µ–Ω–¥–∂–µ–π
        recent_challenges = []
        for challenge_id in completed[-5:]:
            challenge = await db.challenges.find_one({"_id": challenge_id})
            if challenge:
                category = await db.categories.find_one({"_id": challenge.get("category_id")})
                category_name = category.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è") if category else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è"
                recent_challenges.append({
                    "text": challenge["text"],
                    "category": category_name
                })
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        category_stats = {}
        for challenge_id in completed:
            challenge = await db.challenges.find_one({"_id": challenge_id})
            if challenge and challenge.get("category_id"):
                category = await db.categories.find_one({"_id": challenge["category_id"]})
                if category:
                    category_name = category["name"]
                    if category_name in category_stats:
                        category_stats[category_name] += 1
                    else:
                        category_stats[category_name] = 1
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        text = (
            f"‚úÖ –¢–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n\n"
            f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ —á–µ–ª–ª–µ–Ω–¥–∂–µ–π: {total_completed}\n"
            f"–¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: {user.get('streak', 0)} –¥–Ω–µ–π üî•\n\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–µ–π–¥–∂–∏
        badges = user.get("badges", [])
        if badges:
            text += "üèÜ –¢–≤–æ–∏ –±–µ–π–¥–∂–∏:\n"
            for badge_id in badges:
                badge = BADGES[badge_id]
                text += f"‚Ä¢ {badge['name']} - {badge['description']}\n"
            text += "\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        if category_stats:
            text += "–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n"
            for category_name, count in sorted(category_stats.items(), key=lambda x: x[1], reverse=True):
                text += f"‚Ä¢ {category_name}: {count}\n"
            text += "\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏
        if recent_challenges:
            text += "–ù–µ–¥–∞–≤–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ:\n"
            for i, challenge in enumerate(reversed(recent_challenges), 1):
                text += f"{i}. {challenge['text']} ({challenge['category']})\n"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        level = await get_user_level(user["points"])
        
        text += f"\n–¢–≤–æ–π —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {level} ‚≠ê"
        
        await message.answer(text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–≥–∞
@dp.message(F.text == "üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞")
async def invite_friend(message: Message):
    user_id = message.from_user.id
    
    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    invite_link = await generate_referral_link(user_id)
    
    await message.answer(
        "üì± –ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ—á–∫–∏!\n\n"
        f"–¢–≤–æ—è —É–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:\n{invite_link}\n\n"
        "–ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ —Ç—ã –ø–æ–ª—É—á–∏—à—å +20 –æ—á–∫–æ–≤, –∫–æ–≥–¥–∞ –æ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç —Å–≤–æ–π –ø–µ—Ä–≤—ã–π —á–µ–ª–ª–µ–Ω–¥–∂!"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
@dp.message(F.text == "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def contact_support(message: Message):
    await message.answer(
        "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
        "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Å—è –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É: @AserAbiken\n\n"
        "Sparkaph - –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ª–∏—á–Ω–æ—Å—Ç–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ —á–µ–ª–ª–µ–Ω–¥–∂–∏. "
        "–í—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞–Ω–∏—è, –ø–æ–ª—É—á–∞–π –æ—á–∫–∏ –∏ —Å—Ç–∞–Ω–æ–≤–∏—Å—å –ª—É—á—à–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å!"
    )

# –ü—Ä–∏–∑—ã –¥–ª—è –∫–æ–ª–µ—Å–∞ —Ñ–æ—Ä—Ç—É–Ω—ã
FORTUNE_PRIZES = [
    {"type": "points", "value": 10, "text": "10 –æ—á–∫–æ–≤"},
    {"type": "points", "value": 20, "text": "20 –æ—á–∫–æ–≤"},
    {"type": "points", "value": 50, "text": "50 –æ—á–∫–æ–≤"},
    {"type": "bonus", "value": "double_points", "text": "–î–≤–æ–π–Ω—ã–µ –æ—á–∫–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —á–µ–ª–ª–µ–Ω–¥–∂"},
    {"type": "bonus", "value": "skip_review", "text": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–µ–ª–ª–µ–Ω–¥–∂–∞"},
    {"type": "bonus", "value": "extra_challenge", "text": "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —á–µ–ª–ª–µ–Ω–¥–∂"}
]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–µ—Å–∞ —Ñ–æ—Ä—Ç—É–Ω—ã
@dp.message(F.text == "üé° –ö–æ–ª–µ—Å–æ —Ñ–æ—Ä—Ç—É–Ω—ã")
async def fortune_wheel(message: Message):
    try:
        user_id = message.from_user.id
        user = await db.users.find_one({"user_id": user_id})
        
        if not user:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —á–µ—Ä–µ–∑ /start")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –∫—Ä—É—Ç–∏–ª –∫–æ–ª–µ—Å–æ
        last_spin = user.get("last_fortune_spin")
        if last_spin:
            time_since_last_spin = datetime.now(UTC) - last_spin
            if time_since_last_spin.total_seconds() < 24 * 3600:  # 24 —á–∞—Å–∞
                hours_left = int((24 * 3600 - time_since_last_spin.total_seconds()) / 3600)
                await message.answer(
                    f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â–µ {hours_left} —á–∞—Å–æ–≤ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –≤—Ä–∞—â–µ–Ω–∏–µ–º –∫–æ–ª–µ—Å–∞.\n"
                    "–ö–æ–ª–µ—Å–æ —Ñ–æ—Ä—Ç—É–Ω—ã –º–æ–∂–Ω–æ –∫—Ä—É—Ç–∏—Ç—å —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏!"
                )
                return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –≤—Ä–∞—â–µ–Ω–∏—è
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üé° –ö—Ä—É—Ç–∏—Ç—å –∫–æ–ª–µ—Å–æ", callback_data="spin_wheel")]
            ]
        )
        
        await message.answer(
            "üé° –ö–æ–ª–µ—Å–æ —Ñ–æ—Ä—Ç—É–Ω—ã\n\n"
            "–ö—Ä—É—Ç–∏—Ç–µ –∫–æ–ª–µ—Å–æ —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –ø—Ä–∏–∑—ã:\n"
            "‚Ä¢ –û—á–∫–∏ (10, 20, 50)\n"
            "‚Ä¢ –î–≤–æ–π–Ω—ã–µ –æ—á–∫–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —á–µ–ª–ª–µ–Ω–¥–∂\n"
            "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ\n"
            "‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —á–µ–ª–ª–µ–Ω–¥–∂\n\n"
            "–ì–æ—Ç–æ–≤—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —É–¥–∞—á—É?",
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–ª–µ—Å–µ —Ñ–æ—Ä—Ç—É–Ω—ã: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–ª–µ—Å–∞
@dp.callback_query(F.data == "spin_wheel")
async def spin_wheel(callback: CallbackQuery):
    try:
        user_id = callback.from_user.id
        user = await db.users.find_one({"user_id": user_id})
        
        if not user:
            await callback.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —á–µ—Ä–µ–∑ /start")
            return
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–∏–∑
        prize = random.choice(FORTUNE_PRIZES)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ä–∞—â–µ–Ω–∏—è
        await db.users.update_one(
            {"user_id": user_id},
            {"$set": {"last_fortune_spin": datetime.now(UTC)}}
        )
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∏–∑
        if prize["type"] == "points":
            await db.users.update_one(
                {"user_id": user_id},
                {"$inc": {"points": prize["value"]}}
            )
            await callback.message.edit_text(
                f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {prize['text']}!\n\n"
                f"–í–∞—à –±–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω."
            )
        elif prize["type"] == "bonus":
            if prize["value"] == "double_points":
                await db.users.update_one(
                    {"user_id": user_id},
                    {"$set": {"next_challenge_double_points": True}}
                )
                await callback.message.edit_text(
                    f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {prize['text']}!\n\n"
                    "–í–∞—à —Å–ª–µ–¥—É—é—â–∏–π —á–µ–ª–ª–µ–Ω–¥–∂ –±—É–¥–µ—Ç –æ—Ü–µ–Ω–∏–≤–∞—Ç—å—Å—è –≤ –¥–≤–æ–π–Ω–æ–º —Ä–∞–∑–º–µ—Ä–µ."
                )
            elif prize["value"] == "skip_review":
                await db.users.update_one(
                    {"user_id": user_id},
                    {"$set": {"next_challenge_auto_approve": True}}
                )
                await callback.message.edit_text(
                    f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {prize['text']}!\n\n"
                    "–í–∞—à —Å–ª–µ–¥—É—é—â–∏–π —á–µ–ª–ª–µ–Ω–¥–∂ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–¥–æ–±—Ä–µ–Ω."
                )
            elif prize["value"] == "extra_challenge":
                await db.users.update_one(
                    {"user_id": user_id},
                    {"$set": {"extra_challenge_available": True}}
                )
                await callback.message.edit_text(
                    f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {prize['text']}!\n\n"
                    "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —á–µ–ª–ª–µ–Ω–¥–∂ —Å–µ–≥–æ–¥–Ω—è."
                )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ä–∞—â–µ–Ω–∏–∏ –∫–æ–ª–µ—Å–∞: {e}")
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –æ–±–ª–æ–∂–µ–∫
@dp.message(F.text == "üé® –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ–±–ª–æ–∂–µ–∫")
async def cover_generator(message: Message):
    try:
        user_id = message.from_user.id
        user = await db.users.find_one({"user_id": user_id})
        
        if not user:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —á–µ—Ä–µ–∑ /start")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        completed_challenges = user.get("completed_challenges", [])
        if not completed_challenges:
            await message.answer(
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —á–µ–ª–ª–µ–Ω–¥–∂–µ–π.\n"
                "–í—ã–ø–æ–ª–Ω–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —á–µ–ª–ª–µ–Ω–¥–∂, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –æ–±–ª–æ–∂–∫—É!"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —á–µ–ª–ª–µ–Ω–¥–∂–µ–π
        recent_submissions = await db.submissions.find({
            "user_id": user_id,
            "status": "approved",
            "media_type": {"$in": ["photo", "video"]}
        }).sort("submitted_at", -1).limit(5).to_list(length=None)
        
        if not recent_submissions:
            await message.answer(
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –º–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±–ª–æ–∂–∫–∏.\n"
                "–í—ã–ø–æ–ª–Ω–∏—Ç–µ —á–µ–ª–ª–µ–Ω–¥–∂ —Å —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ!"
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –º–µ–¥–∏–∞
        keyboard = InlineKeyboardMarkup(inline_keyboard=[])
        for submission in recent_submissions:
            challenge = await db.challenges.find_one({"_id": submission["challenge_id"]})
            if challenge:
                keyboard.inline_keyboard.append([
                    InlineKeyboardButton(
                        text=f"üì∏ {challenge['text'][:30]}...",
                        callback_data=f"create_cover_{submission['_id']}"
                    )
                ])
        
        await message.answer(
            "üé® –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ–±–ª–æ–∂–µ–∫\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ–¥–∏–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±–ª–æ–∂–∫–∏:\n"
            "‚Ä¢ –î–ª—è TikTok (9:16)\n"
            "‚Ä¢ –î–ª—è Instagram Stories (9:16)\n"
            "‚Ä¢ –î–ª—è Instagram Posts (1:1)\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ–¥–∏–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:",
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–µ –æ–±–ª–æ–∂–µ–∫: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±–ª–æ–∂–∫–∏
@dp.callback_query(F.data.startswith("create_cover_"))
async def create_cover(callback: CallbackQuery):
    try:
        submission_id = callback.data.split("_")[2]
        user_id = callback.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ submission
        submission = await db.submissions.find_one({"_id": ObjectId(submission_id)})
        if not submission:
            await callback.answer("–ú–µ–¥–∏–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —Ñ–æ—Ä–º–∞—Ç–∞
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="TikTok (9:16)", callback_data=f"cover_tiktok_{submission_id}")],
                [InlineKeyboardButton(text="Instagram Stories (9:16)", callback_data=f"cover_insta_story_{submission_id}")],
                [InlineKeyboardButton(text="Instagram Post (1:1)", callback_data=f"cover_insta_post_{submission_id}")]
            ]
        )
        
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –æ–±–ª–æ–∂–∫–∏:",
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±–ª–æ–∂–∫–∏: {e}")
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±–ª–æ–∂–∫–∏
async def generate_cover(submission: Dict, format_type: str) -> Optional[bytes]:
    try:
        if not submission.get("file_content"):
            return None
            
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64 –≤ –±–∞–π—Ç—ã
        image_bytes = base64.b64decode(submission["file_content"])
        image = Image.open(io.BytesIO(image_bytes))
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
        if format_type == "tiktok" or format_type == "insta_story":
            # 9:16 —Ñ–æ—Ä–º–∞—Ç (1080x1920)
            target_width = 1080
            target_height = 1920
        else:  # insta_post
            # 1:1 —Ñ–æ—Ä–º–∞—Ç (1080x1080)
            target_width = 1080
            target_height = 1080
        
        # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏
        image.thumbnail((target_width, target_height), Image.Resampling.LANCZOS)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –Ω—É–∂–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º –∏ –±–µ–ª—ã–º —Ñ–æ–Ω–æ–º
        new_image = Image.new("RGB", (target_width, target_height), "white")
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
        x = (target_width - image.width) // 2
        y = (target_height - image.height) // 2
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        new_image.paste(image, (x, y))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–π—Ç—ã
        output = io.BytesIO()
        new_image.save(output, format="JPEG", quality=95)
        return output.getvalue()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±–ª–æ–∂–∫–∏: {e}")
        return None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –æ–±–ª–æ–∂–∫–∏
@dp.callback_query(F.data.startswith("cover_"))
async def process_cover_format(callback: CallbackQuery):
    try:
        parts = callback.data.split("_")
        format_type = parts[1]
        submission_id = parts[2]
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ submission
        submission = await db.submissions.find_one({"_id": ObjectId(submission_id)})
        if not submission:
            await callback.answer("–ú–µ–¥–∏–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±–ª–æ–∂–∫—É
        cover_bytes = await generate_cover(submission, format_type)
        if not cover_bytes:
            await callback.message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±–ª–æ–∂–∫—É.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."
            )
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–ª–æ–∂–∫—É
        await callback.message.answer_photo(
            photo=cover_bytes,
            caption="üé® –í–∞—à–∞ –æ–±–ª–æ–∂–∫–∞ –≥–æ—Ç–æ–≤–∞!\n\n"
                   "–í—ã –º–æ–∂–µ—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ—ë –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —Å–≤–æ–∏—Ö –ø–æ—Å—Ç–æ–≤."
        )
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Ñ–æ—Ä–º–∞—Ç–∞
        await callback.message.delete()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ä–º–∞—Ç–∞ –æ–±–ª–æ–∂–∫–∏: {e}")
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async def init_db():
    try:
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ users
        await db.users.create_index("user_id", unique=True)
        await db.users.create_index("username")
        await db.users.create_index("points")
        await db.users.create_index("last_activity")
        await db.users.create_index("last_fortune_spin")
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ submissions
        await db.submissions.create_index("user_id")
        await db.submissions.create_index("challenge_id")
        await db.submissions.create_index("status")
        await db.submissions.create_index("submitted_at")
        await db.submissions.create_index("media_type")
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ challenges
        await db.challenges.create_index("category_id")
        await db.challenges.create_index("status")
        await db.challenges.create_index("taken_by")
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ categories
        await db.categories.create_index("name", unique=True)
        
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –±–æ—Ç–∞")
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await init_db()
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        asyncio.create_task(reminder_scheduler())
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ main: {e}")
        raise

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def send_daily_reminder(user_id: int):
    try:
        streak, bonus = await update_streak(user_id)
        if bonus > 0:
            await bot.send_message(
                user_id,
                f"üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å!\n\n"
                f"–¢–≤–æ–π streak: {streak} –¥–Ω–µ–π üî•\n"
                f"–ü–æ–ª—É—á–µ–Ω–æ –æ—á–∫–æ–≤: +{bonus}\n\n"
                f"–ó–∞—Ö–æ–¥–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å, —á—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å streak –∏ –ø–æ–ª—É—á–∞—Ç—å –±–æ–ª—å—à–µ –æ—á–∫–æ–≤!"
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
NOTIFICATION_TYPES = {
    "challenge_reminder": "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —á–µ–ª–ª–µ–Ω–¥–∂–µ",
    "streak_reminder": "üî• –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–π —Å–≤–æ–π streak!",
    "level_up": "üéØ –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å!",
    "achievement": "üèÜ –ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!",
    "referral": "üë• –î—Ä—É–≥ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è!",
    "daily_bonus": "üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
async def send_notification(user_id: int, notification_type: str, message: str):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await db.users.find_one({"user_id": user_id})
        if not user:
            return
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        if user.get("notifications_disabled", False):
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await bot.send_message(
            user_id,
            f"{NOTIFICATION_TYPES.get(notification_type, 'üì¢')} {message}"
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        await db.notifications.insert_one({
            "user_id": user_id,
            "type": notification_type,
            "message": message,
            "sent_at": datetime.now(UTC)
        })
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —á–µ–ª–ª–µ–Ω–¥–∂–µ
async def send_challenge_reminder(user_id: int):
    try:
        user = await db.users.find_one({"user_id": user_id})
        if not user or not user.get("current_challenge"):
            return
        
        challenge = await db.challenges.find_one({"_id": user["current_challenge"]})
        if not challenge:
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–æ–≥–¥–∞ –±—ã–ª –≤–∑—è—Ç —á–µ–ª–ª–µ–Ω–¥–∂
        challenge_started_at = user.get("challenge_started_at")
        if not challenge_started_at:
            return
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º, —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—à–ª–æ
        time_passed = (datetime.now(UTC) - challenge_started_at).total_seconds() / 3600
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏
        if 5.9 <= time_passed <= 6.1 and not user.get("first_reminder_sent"):
            await send_notification(
                user_id,
                "challenge_reminder",
                f"–ù–µ –∑–∞–±—ã–ª –≤—ã–ø–æ–ª–Ω–∏—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂ '{challenge['text']}'? –û—Å—Ç–∞–ª–æ—Å—å 6 —á–∞—Å–æ–≤!"
            )
            await db.users.update_one(
                {"user_id": user_id},
                {"$set": {"first_reminder_sent": True}}
            )
        elif 9.9 <= time_passed <= 10.1 and not user.get("second_reminder_sent"):
            await send_notification(
                user_id,
                "challenge_reminder",
                f"–°—Ä–æ—á–Ω–æ! –û—Å—Ç–∞–ª–æ—Å—å 2 —á–∞—Å–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ–ª–ª–µ–Ω–¥–∂–∞ '{challenge['text']}'!"
            )
            await db.users.update_one(
                {"user_id": user_id},
                {"$set": {"second_reminder_sent": True}}
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —á–µ–ª–ª–µ–Ω–¥–∂–µ: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ streak
async def send_streak_reminder(user_id: int):
    try:
        user = await db.users.find_one({"user_id": user_id})
        if not user:
            return
        
        last_daily = user.get("last_daily")
        if not last_daily:
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ 23 —á–∞—Å–∞ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
        time_diff = datetime.now(UTC) - last_daily
        if 23 <= time_diff.total_seconds() / 3600 <= 24:
            streak = user.get("streak", 0)
            if streak > 0:
                await send_notification(
                    user_id,
                    "streak_reminder",
                    f"–ù–µ –ø—Ä–µ—Ä—ã–≤–∞–π —Å–≤–æ–π streak –≤ {streak} –¥–Ω–µ–π! –ó–∞–π–¥–∏ –≤ –±–æ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞."
                )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ streak: {e}")

# –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
async def reminder_scheduler():
    while True:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users = await db.users.find().to_list(length=None)
            for user in users:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å
                last_daily = user.get("last_daily")
                if last_daily:
                    time_diff = datetime.now(UTC) - last_daily
                    if time_diff.days >= 1:
                        await send_daily_reminder(user["user_id"])
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —á–µ–ª–ª–µ–Ω–¥–∂–∞—Ö
                await send_challenge_reminder(user["user_id"])
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ streak
                await send_streak_reminder(user["user_id"])
            
            # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            await asyncio.sleep(300)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
            await asyncio.sleep(60)

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
@dp.message(F.text == "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
async def manage_notifications(message: Message):
    try:
        user_id = message.from_user.id
        user = await db.users.find_one({"user_id": user_id})
        
        if not user:
            return
        
        notifications_disabled = user.get("notifications_disabled", False)
        
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üîï –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" if not notifications_disabled else "üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                        callback_data="toggle_notifications"
                    )
                ]
            ]
        )
        
        status = "–≤–∫–ª—é—á–µ–Ω—ã" if not notifications_disabled else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
        await message.answer(
            f"üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n\n"
            f"–°–µ–π—á–∞—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status}.\n\n"
            f"–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ:\n"
            f"‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —á–µ–ª–ª–µ–Ω–¥–∂–∞—Ö\n"
            f"‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –±–æ–Ω—É—Å—ã\n"
            f"‚Ä¢ –ù–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n"
            f"‚Ä¢ –£—Ä–æ–≤–Ω–∏ –∏ –æ—á–∫–∏\n"
            f"‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª—ã",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
@dp.callback_query(F.data == "toggle_notifications")
async def toggle_notifications(callback: CallbackQuery):
    try:
        user_id = callback.from_user.id
        user = await db.users.find_one({"user_id": user_id})
        
        if not user:
            return
        
        current_status = user.get("notifications_disabled", False)
        new_status = not current_status
        
        await db.users.update_one(
            {"user_id": user_id},
            {"$set": {"notifications_disabled": new_status}}
        )
        
        status = "–≤–∫–ª—é—á–µ–Ω—ã" if not new_status else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
        await callback.message.edit_text(
            f"üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n\n"
            f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status}.\n\n"
            f"–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ:\n"
            f"‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —á–µ–ª–ª–µ–Ω–¥–∂–∞—Ö\n"
            f"‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –±–æ–Ω—É—Å—ã\n"
            f"‚Ä¢ –ù–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n"
            f"‚Ä¢ –£—Ä–æ–≤–Ω–∏ –∏ –æ—á–∫–∏\n"
            f"‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª—ã"
        )
        
        await callback.answer(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")

if __name__ == "__main__":
    import asyncio
    try:
        asyncio.run(main())
    except Exception as e:
        logger.critical(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞: {e}")
        print(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}") 