from telegram import Bot
from database.operations import Database
from config import USER_BOT_TOKEN

class NotificationManager:
    def __init__(self):
        self.bot = Bot(token=USER_BOT_TOKEN)
        self.db = Database()

    async def send_notification(self, user_id: int, message: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
        try:
            await self.bot.send_message(
                chat_id=user_id,
                text=message
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–∞–∑–µ
            await self.db.create_notification({
                "user_id": user_id,
                "type": "custom",
                "message": message
            })
        except Exception as e:
            print(f"Error sending notification to {user_id}: {e}")

    async def notify_video_approved(self, user_id: int, challenge_title: str):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –æ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –≤–∏–¥–µ–æ."""
        message = f"‚úÖ –í–∞—à–µ –≤–∏–¥–µ–æ –¥–ª—è —á–µ–ª–ª–µ–Ω–¥–∂–∞ '{challenge_title}' –±—ã–ª–æ –æ–¥–æ–±—Ä–µ–Ω–æ!"
        await self.send_notification(user_id, message)

    async def notify_video_rejected(self, user_id: int, challenge_title: str, reason: str):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –≤–∏–¥–µ–æ."""
        message = f"‚ùå –í–∞—à–µ –≤–∏–¥–µ–æ –¥–ª—è —á–µ–ª–ª–µ–Ω–¥–∂–∞ '{challenge_title}' –±—ã–ª–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}"
        await self.send_notification(user_id, message)

    async def notify_new_challenge(self, user_id: int, challenge_title: str):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –æ –Ω–æ–≤–æ–º —á–µ–ª–ª–µ–Ω–¥–∂–µ."""
        message = f"üéØ –ù–æ–≤—ã–π —á–µ–ª–ª–µ–Ω–¥–∂: '{challenge_title}'!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –µ–≥–æ –ø–µ—Ä–≤—ã–º!"
        await self.send_notification(user_id, message)

    async def notify_achievement(self, user_id: int, badge_name: str):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è."""
        message = f"üèÜ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–µ–π–¥–∂: {badge_name}"
        await self.send_notification(user_id, message)

    async def notify_referral(self, user_id: int, referred_user_name: str):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        message = f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {referred_user_name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ø–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!"
        await self.send_notification(user_id, message)

    async def notify_challenge_completed(self, user_id: int, challenge_title: str):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —á–µ–ª–ª–µ–Ω–¥–∂–∞."""
        message = f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —á–µ–ª–ª–µ–Ω–¥–∂ '{challenge_title}'!"
        await self.send_notification(user_id, message) 