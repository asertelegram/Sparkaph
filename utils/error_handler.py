import logging
import traceback
from functools import wraps
from telegram import Update
from telegram.ext import ContextTypes
from database.operations import Database

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    filename='bot.log'
)
logger = logging.getLogger(__name__)

class ErrorHandler:
    def __init__(self):
        self.db = Database()

    async def log_error(self, error: Exception, context: ContextTypes.DEFAULT_TYPE):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –≤ —Ñ–∞–π–ª –∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
        error_message = f"Error: {str(error)}\nTraceback: {traceback.format_exc()}"
        logger.error(error_message)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await self.db.create_error_log({
            "error_type": type(error).__name__,
            "error_message": str(error),
            "traceback": traceback.format_exc(),
            "user_id": context.user_data.get('user_id') if context.user_data else None,
            "chat_id": context.chat_data.get('chat_id') if context.chat_data else None
        })

    async def handle_error(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö."""
        error = context.error
        await self.log_error(error, context)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if update and update.effective_message:
            await update.effective_message.reply_text(
                "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )

def error_handler(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ —Ñ—É–Ω–∫—Ü–∏—è—Ö."""
    @wraps(func)
    async def wrapper(*args, **kwargs):
        try:
            return await func(*args, **kwargs)
        except Exception as e:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
            context = next((arg for arg in args if isinstance(arg, ContextTypes.DEFAULT_TYPE)), None)
            if context:
                handler = ErrorHandler()
                await handler.log_error(e, context)
            
            # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º
            raise
    return wrapper

class ValidationError(Exception):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏."""
    pass

def validate_video_duration(duration: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ."""
    if not isinstance(duration, int):
        raise ValidationError("Duration must be an integer")
    if duration <= 0:
        raise ValidationError("Duration must be positive")
    if duration > 60:
        raise ValidationError("Duration must not exceed 60 seconds")
    return True

def validate_challenge_data(data: dict) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —á–µ–ª–ª–µ–Ω–¥–∂–∞."""
    required_fields = ['title', 'description', 'category', 'difficulty']
    for field in required_fields:
        if field not in data:
            raise ValidationError(f"Missing required field: {field}")
    
    if not isinstance(data['difficulty'], int) or not 1 <= data['difficulty'] <= 5:
        raise ValidationError("Difficulty must be an integer between 1 and 5")
    
    if not data['title'].strip():
        raise ValidationError("Title cannot be empty")
    
    if not data['description'].strip():
        raise ValidationError("Description cannot be empty")
    
    return True

def validate_user_data(data: dict) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    required_fields = ['user_id', 'first_name']
    for field in required_fields:
        if field not in data:
            raise ValidationError(f"Missing required field: {field}")
    
    if not isinstance(data['user_id'], int):
        raise ValidationError("User ID must be an integer")
    
    if not data['first_name'].strip():
        raise ValidationError("First name cannot be empty")
    
    return True 