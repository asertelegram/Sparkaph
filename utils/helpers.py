import random
import string
from datetime import datetime, timedelta
from typing import List, Optional
from config import BADGES

def generate_referral_code(length: int = 8) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥."""
    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=length))

def calculate_streak_days(last_active: datetime) -> int:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."""
    today = datetime.utcnow().date()
    last_active_date = last_active.date()
    
    if today == last_active_date:
        return 1
    elif today - last_active_date == timedelta(days=1):
        return 2
    return 0

def get_streak_badge(streak_days: int) -> Optional[str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–µ–π–¥–∂ –∑–∞ —Å–µ—Ä–∏—é –¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."""
    if streak_days >= 30:
        return "streak_30"
    elif streak_days >= 7:
        return "streak_7"
    elif streak_days >= 3:
        return "streak_3"
    return None

def format_leaderboard_entry(entry: dict, position: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞–ø–∏—Å—å –¥–ª—è –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞."""
    return f"{position}. {entry['username'] or '–ê–Ω–æ–Ω–∏–º'} - {entry['points']} –æ—á–∫–æ–≤"

def format_challenge_info(challenge: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–µ–ª–ª–µ–Ω–¥–∂–µ."""
    return f"""
üéØ {challenge['title']}

üìù {challenge['description']}

üè∑ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {challenge['category']}
‚≠ê –°–ª–æ–∂–Ω–æ—Å—Ç—å: {'‚≠ê' * challenge['difficulty']}
üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {challenge['completions_count']}
üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {challenge['views_count']}
"""

def format_user_stats(stats: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    badges_text = "\n".join([BADGES[badge] for badge in stats['badges']]) if stats['badges'] else "–ù–µ—Ç –±–µ–π–¥–∂–µ–π"
    
    return f"""
üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:

‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ —á–µ–ª–ª–µ–Ω–¥–∂–µ–π: {stats['completed_challenges']}
üì± –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–∏–¥–µ–æ: {stats['total_submissions']}
‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ –≤–∏–¥–µ–æ: {stats['approved_submissions']}
üî• –î–Ω–µ–π –ø–æ–¥—Ä—è–¥: {stats['streak_days']}

üèÜ –í–∞—à–∏ –±–µ–π–¥–∂–∏:
{badges_text}
"""

def format_challenge_stats(stats: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ–ª–ª–µ–Ω–¥–∂–∞."""
    return f"""
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–µ–ª–ª–µ–Ω–¥–∂–∞:

üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {stats['views']}
‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–π: {stats['completions']}
üì± –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–∏–¥–µ–æ: {stats['submissions']}
‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ –≤–∏–¥–µ–æ: {stats['approved_submissions']}
"""

def get_random_challenge(challenges: List[dict]) -> Optional[dict]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —á–µ–ª–ª–µ–Ω–¥–∂ –∏–∑ —Å–ø–∏—Å–∫–∞."""
    if not challenges:
        return None
    return random.choice(challenges)

def format_time_ago(dt: datetime) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç 'X –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–∑–∞–¥'."""
    now = datetime.utcnow()
    diff = now - dt
    
    if diff.days > 365:
        years = diff.days // 365
        return f"{years} {'–≥–æ–¥' if years == 1 else '–≥–æ–¥–∞' if 1 < years < 5 else '–ª–µ—Ç'} –Ω–∞–∑–∞–¥"
    elif diff.days > 30:
        months = diff.days // 30
        return f"{months} {'–º–µ—Å—è—Ü' if months == 1 else '–º–µ—Å—è—Ü–∞' if 1 < months < 5 else '–º–µ—Å—è—Ü–µ–≤'} –Ω–∞–∑–∞–¥"
    elif diff.days > 0:
        return f"{diff.days} {'–¥–µ–Ω—å' if diff.days == 1 else '–¥–Ω—è' if 1 < diff.days < 5 else '–¥–Ω–µ–π'} –Ω–∞–∑–∞–¥"
    elif diff.seconds > 3600:
        hours = diff.seconds // 3600
        return f"{hours} {'—á–∞—Å' if hours == 1 else '—á–∞—Å–∞' if 1 < hours < 5 else '—á–∞—Å–æ–≤'} –Ω–∞–∑–∞–¥"
    elif diff.seconds > 60:
        minutes = diff.seconds // 60
        return f"{minutes} {'–º–∏–Ω—É—Ç—É' if minutes == 1 else '–º–∏–Ω—É—Ç—ã' if 1 < minutes < 5 else '–º–∏–Ω—É—Ç'} –Ω–∞–∑–∞–¥"
    else:
        return "—Ç–æ–ª—å–∫–æ —á—Ç–æ"

def validate_video_duration(duration: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ (–º–∞–∫—Å–∏–º—É–º 60 —Å–µ–∫—É–Ω–¥)."""
    return 0 < duration <= 60

def get_pagination_info(items: List, page: int, per_page: int = 10) -> dict:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏."""
    total_items = len(items)
    total_pages = (total_items + per_page - 1) // per_page
    start_idx = (page - 1) * per_page
    end_idx = min(start_idx + per_page, total_items)
    
    return {
        "items": items[start_idx:end_idx],
        "current_page": page,
        "total_pages": total_pages,
        "total_items": total_items,
        "has_next": page < total_pages,
        "has_prev": page > 1
    } 