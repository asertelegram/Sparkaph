import asyncio
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiohttp import web
from dotenv import load_dotenv
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
USER_BOT_TOKEN = os.getenv("USER_BOT_TOKEN")
ADMIN_BOT_TOKEN = os.getenv("ADMIN_BOT_TOKEN")
INFLUENCER_BOT_TOKEN = os.getenv("INFLUENCER_BOT_TOKEN")

if not all([USER_BOT_TOKEN, ADMIN_BOT_TOKEN, INFLUENCER_BOT_TOKEN]):
    logger.error("Missing bot tokens in environment variables!")
    raise ValueError("Missing bot tokens in environment variables!")

logger.info("Initializing bots...")
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–æ–≤
user_bot = Bot(token=USER_BOT_TOKEN)
admin_bot = Bot(token=ADMIN_BOT_TOKEN)
influencer_bot = Bot(token=INFLUENCER_BOT_TOKEN)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–≤
user_dp = Dispatcher()
admin_dp = Dispatcher()
influencer_dp = Dispatcher()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è user_bot
@user_dp.message(Command("start"))
async def user_start(message: types.Message):
    logger.info(f"User bot received /start command from user {message.from_user.id}")
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Sparkaph.")

@user_dp.message()
async def user_echo(message: types.Message):
    logger.info(f"User bot received message: {message.text} from user {message.from_user.id}")
    await message.answer(f"–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {message.text}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è admin_bot
@admin_dp.message(Command("start"))
async def admin_start(message: types.Message):
    logger.info(f"Admin bot received /start command from user {message.from_user.id}")
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –∞–¥–º–∏–Ω-–±–æ—Ç Sparkaph.")

@admin_dp.message()
async def admin_echo(message: types.Message):
    logger.info(f"Admin bot received message: {message.text} from user {message.from_user.id}")
    await message.answer(f"–ê–¥–º–∏–Ω, –≤—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {message.text}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è influencer_bot
@influencer_dp.message(Command("start"))
async def influencer_start(message: types.Message):
    logger.info(f"Influencer bot received /start command from user {message.from_user.id}")
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–æ–≤ Sparkaph.")

@influencer_dp.message()
async def influencer_echo(message: types.Message):
    logger.info(f"Influencer bot received message: {message.text} from user {message.from_user.id}")
    await message.answer(f"–ò–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä, –≤—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {message.text}")

# Healthcheck endpoint
async def healthcheck(request):
    return web.Response(text="OK")

# –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = web.Application()
app.router.add_get('/health', healthcheck)

async def start_bots():
    try:
        # –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
        port = int(os.getenv('PORT', 8080))
        runner = web.AppRunner(app)
        await runner.setup()
        site = web.TCPSite(runner, '0.0.0.0', port)
        await site.start()
        logger.info(f"Web server started on port {port}")
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–æ–≤
        logger.info("Starting bots...")
        logger.info(f"User bot token: {USER_BOT_TOKEN[:5]}...")
        logger.info(f"Admin bot token: {ADMIN_BOT_TOKEN[:5]}...")
        logger.info(f"Influencer bot token: {INFLUENCER_BOT_TOKEN[:5]}...")
        
        await asyncio.gather(
            user_dp.start_polling(user_bot),
            admin_dp.start_polling(admin_bot),
            influencer_dp.start_polling(influencer_bot)
        )
    except Exception as e:
        logger.error(f"Error starting application: {e}")
        raise

if __name__ == '__main__':
    try:
        asyncio.run(start_bots())
    except KeyboardInterrupt:
        logger.info("Application stopped by user")
    except Exception as e:
        logger.error(f"Application stopped due to error: {e}") 