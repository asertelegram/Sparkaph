import logging
from typing import List, Dict, Any, Optional, Set
from datetime import datetime, UTC, timedelta
from dataclasses import dataclass
from enum import Enum
import asyncio
from motor.motor_asyncio import AsyncIOMotorDatabase

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class AchievementType(Enum):
    CHALLENGE = "challenge"  # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ–ª–ª–µ–Ω–¥–∂–µ–π
    STREAK = "streak"  # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ —Å–µ—Ä–∏–∏
    SOCIAL = "social"  # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    LEVEL = "level"  # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ —É—Ä–æ–≤–Ω–∏
    SPECIAL = "special"  # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    COLLECTION = "collection"  # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    EVENT = "event"  # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ —Å–æ–±—ã—Ç–∏—è

@dataclass
class Achievement:
    id: str
    name: str
    description: str
    type: AchievementType
    points: int
    icon: str
    requirements: Dict[str, Any]
    rewards: Dict[str, Any]
    is_hidden: bool = False
    is_seasonal: bool = False
    season: Optional[str] = None
    expires_at: Optional[datetime] = None

class AchievementSystem:
    def __init__(self, db: AsyncIOMotorDatabase):
        self.db = db
        self.achievements: Dict[str, Achievement] = {}
        self._load_achievements()
    
    def _load_achievements(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
        # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ —á–µ–ª–ª–µ–Ω–¥–∂–∏
        self.achievements.update({
            "first_challenge": Achievement(
                id="first_challenge",
                name="üéØ –ü–µ—Ä–≤—ã–π —à–∞–≥",
                description="–í—ã–ø–æ–ª–Ω–∏–ª —Å–≤–æ–π –ø–µ—Ä–≤—ã–π —á–µ–ª–ª–µ–Ω–¥–∂",
                type=AchievementType.CHALLENGE,
                points=10,
                icon="üéØ",
                requirements={"challenges_completed": 1},
                rewards={"points": 10, "badge": "first_challenge"}
            ),
            "challenge_master": Achievement(
                id="challenge_master",
                name="üèÜ –ú–∞—Å—Ç–µ—Ä —á–µ–ª–ª–µ–Ω–¥–∂–µ–π",
                description="–í—ã–ø–æ–ª–Ω–∏–ª 50 —á–µ–ª–ª–µ–Ω–¥–∂–µ–π",
                type=AchievementType.CHALLENGE,
                points=50,
                icon="üèÜ",
                requirements={"challenges_completed": 50},
                rewards={"points": 50, "badge": "challenge_master", "title": "–ú–∞—Å—Ç–µ—Ä"}
            ),
            "challenge_legend": Achievement(
                id="challenge_legend",
                name="üëë –õ–µ–≥–µ–Ω–¥–∞",
                description="–í—ã–ø–æ–ª–Ω–∏–ª 100 —á–µ–ª–ª–µ–Ω–¥–∂–µ–π",
                type=AchievementType.CHALLENGE,
                points=100,
                icon="üëë",
                requirements={"challenges_completed": 100},
                rewards={"points": 100, "badge": "challenge_legend", "title": "–õ–µ–≥–µ–Ω–¥–∞"}
            )
        })
        
        # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ —Å–µ—Ä–∏–∏
        self.achievements.update({
            "streak_3": Achievement(
                id="streak_3",
                name="üî• –ì–æ—Ä—è—á–∞—è —Å–µ—Ä–∏—è",
                description="3 –¥–Ω—è –ø–æ–¥—Ä—è–¥ –≤—ã–ø–æ–ª–Ω—è–ª —á–µ–ª–ª–µ–Ω–¥–∂–∏",
                type=AchievementType.STREAK,
                points=15,
                icon="üî•",
                requirements={"streak_days": 3},
                rewards={"points": 15, "badge": "streak_3"}
            ),
            "streak_7": Achievement(
                id="streak_7",
                name="‚ö° –ù–µ–¥–µ–ª—è —Å–∏–ª—ã",
                description="7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ –≤—ã–ø–æ–ª–Ω—è–ª —á–µ–ª–ª–µ–Ω–¥–∂–∏",
                type=AchievementType.STREAK,
                points=30,
                icon="‚ö°",
                requirements={"streak_days": 7},
                rewards={"points": 30, "badge": "streak_7", "bonus": "double_points_24h"}
            ),
            "streak_30": Achievement(
                id="streak_30",
                name="üåü –ú–µ—Å—è—Ü —Å–∏–ª—ã",
                description="30 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ –≤—ã–ø–æ–ª–Ω—è–ª —á–µ–ª–ª–µ–Ω–¥–∂–∏",
                type=AchievementType.STREAK,
                points=100,
                icon="üåü",
                requirements={"streak_days": 30},
                rewards={"points": 100, "badge": "streak_30", "title": "–ù–µ—É—Ç–æ–º–∏–º—ã–π", "bonus": "triple_points_24h"}
            )
        })
        
        # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        self.achievements.update({
            "social_butterfly": Achievement(
                id="social_butterfly",
                name="ü¶ã –°–æ—Ü–∏–∞–ª—å–Ω–∞—è –±–∞–±–æ—á–∫–∞",
                description="–ü—Ä–∏–≥–ª–∞—Å–∏–ª 5 –¥—Ä—É–∑–µ–π",
                type=AchievementType.SOCIAL,
                points=25,
                icon="ü¶ã",
                requirements={"referrals": 5},
                rewards={"points": 25, "badge": "social_butterfly"}
            ),
            "social_queen": Achievement(
                id="social_queen",
                name="üëë –ö–æ—Ä–æ–ª–µ–≤–∞ —Å–æ—Ü—Å–µ—Ç–µ–π",
                description="–ü—Ä–∏–≥–ª–∞—Å–∏–ª 20 –¥—Ä—É–∑–µ–π",
                type=AchievementType.SOCIAL,
                points=50,
                icon="üëë",
                requirements={"referrals": 20},
                rewards={"points": 50, "badge": "social_queen", "title": "–°–æ—Ü–∏–∞–ª—å–Ω—ã–π –ª–∏–¥–µ—Ä"}
            ),
            "content_creator": Achievement(
                id="content_creator",
                name="üì± –ö–æ–Ω—Ç–µ–Ω—Ç-–º–µ–π–∫–µ—Ä",
                description="–ü–æ–¥–µ–ª–∏–ª—Å—è 10 —á–µ–ª–ª–µ–Ω–¥–∂–∞–º–∏ –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö",
                type=AchievementType.SOCIAL,
                points=30,
                icon="üì±",
                requirements={"social_shares": 10},
                rewards={"points": 30, "badge": "content_creator"}
            )
        })
        
        # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ —É—Ä–æ–≤–Ω–∏
        self.achievements.update({
            "level_5": Achievement(
                id="level_5",
                name="‚≠êÔ∏è –ü—è—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å",
                description="–î–æ—Å—Ç–∏–≥ 5 —É—Ä–æ–≤–Ω—è",
                type=AchievementType.LEVEL,
                points=20,
                icon="‚≠êÔ∏è",
                requirements={"level": 5},
                rewards={"points": 20, "badge": "level_5"}
            ),
            "level_10": Achievement(
                id="level_10",
                name="üåü –î–µ—Å—è—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å",
                description="–î–æ—Å—Ç–∏–≥ 10 —É—Ä–æ–≤–Ω—è",
                type=AchievementType.LEVEL,
                points=50,
                icon="üåü",
                requirements={"level": 10},
                rewards={"points": 50, "badge": "level_10", "title": "–û–ø—ã—Ç–Ω—ã–π"}
            ),
            "level_20": Achievement(
                id="level_20",
                name="üëë –î–≤–∞–¥—Ü–∞—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å",
                description="–î–æ—Å—Ç–∏–≥ 20 —É—Ä–æ–≤–Ω—è",
                type=AchievementType.LEVEL,
                points=100,
                icon="üëë",
                requirements={"level": 20},
                rewards={"points": 100, "badge": "level_20", "title": "–ú–∞—Å—Ç–µ—Ä"}
            )
        })
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        self.achievements.update({
            "early_bird": Achievement(
                id="early_bird",
                name="üåÖ –†–∞–Ω–Ω—è—è –ø—Ç–∞—à–∫–∞",
                description="–í—ã–ø–æ–ª–Ω–∏–ª —á–µ–ª–ª–µ–Ω–¥–∂ –¥–æ 8 —É—Ç—Ä–∞",
                type=AchievementType.SPECIAL,
                points=15,
                icon="üåÖ",
                requirements={"early_completion": 1},
                rewards={"points": 15, "badge": "early_bird"}
            ),
            "night_owl": Achievement(
                id="night_owl",
                name="ü¶â –ù–æ—á–Ω–∞—è —Å–æ–≤–∞",
                description="–í—ã–ø–æ–ª–Ω–∏–ª —á–µ–ª–ª–µ–Ω–¥–∂ –ø–æ—Å–ª–µ 10 –≤–µ—á–µ—Ä–∞",
                type=AchievementType.SPECIAL,
                points=15,
                icon="ü¶â",
                requirements={"late_completion": 1},
                rewards={"points": 15, "badge": "night_owl"}
            ),
            "perfect_week": Achievement(
                id="perfect_week",
                name="‚ú® –ò–¥–µ–∞–ª—å–Ω–∞—è –Ω–µ–¥–µ–ª—è",
                description="–í—ã–ø–æ–ª–Ω–∏–ª –≤—Å–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏ –∑–∞ –Ω–µ–¥–µ–ª—é",
                type=AchievementType.SPECIAL,
                points=50,
                icon="‚ú®",
                requirements={"weekly_completion": 7},
                rewards={"points": 50, "badge": "perfect_week", "bonus": "double_points_week"}
            )
        })
        
        # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        self.achievements.update({
            "collection_starter": Achievement(
                id="collection_starter",
                name="üìö –ù–∞—á–∏–Ω–∞—é—â–∏–π –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä",
                description="–°–æ–±—Ä–∞–ª 5 –±–µ–π–¥–∂–µ–π",
                type=AchievementType.COLLECTION,
                points=20,
                icon="üìö",
                requirements={"badges_collected": 5},
                rewards={"points": 20, "badge": "collection_starter"}
            ),
            "collection_master": Achievement(
                id="collection_master",
                name="üèÜ –ú–∞—Å—Ç–µ—Ä –∫–æ–ª–ª–µ–∫—Ü–∏–π",
                description="–°–æ–±—Ä–∞–ª 20 –±–µ–π–¥–∂–µ–π",
                type=AchievementType.COLLECTION,
                points=50,
                icon="üèÜ",
                requirements={"badges_collected": 20},
                rewards={"points": 50, "badge": "collection_master", "title": "–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä"}
            )
        })
        
        # –°–µ–∑–æ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        self.achievements.update({
            "summer_champion": Achievement(
                id="summer_champion",
                name="‚òÄÔ∏è –õ–µ—Ç–Ω–∏–π —á–µ–º–ø–∏–æ–Ω",
                description="–í—ã–ø–æ–ª–Ω–∏–ª 30 —á–µ–ª–ª–µ–Ω–¥–∂–µ–π –ª–µ—Ç–æ–º",
                type=AchievementType.EVENT,
                points=100,
                icon="‚òÄÔ∏è",
                requirements={"seasonal_challenges": 30},
                rewards={"points": 100, "badge": "summer_champion", "title": "–õ–µ—Ç–Ω–∏–π —á–µ–º–ø–∏–æ–Ω"},
                is_seasonal=True,
                season="summer",
                expires_at=datetime(2024, 9, 1, tzinfo=UTC)
            ),
            "winter_warrior": Achievement(
                id="winter_warrior",
                name="‚ùÑÔ∏è –ó–∏–º–Ω–∏–π –≤–æ–∏–Ω",
                description="–í—ã–ø–æ–ª–Ω–∏–ª 30 —á–µ–ª–ª–µ–Ω–¥–∂–µ–π –∑–∏–º–æ–π",
                type=AchievementType.EVENT,
                points=100,
                icon="‚ùÑÔ∏è",
                requirements={"seasonal_challenges": 30},
                rewards={"points": 100, "badge": "winter_warrior", "title": "–ó–∏–º–Ω–∏–π –≤–æ–∏–Ω"},
                is_seasonal=True,
                season="winter",
                expires_at=datetime(2024, 3, 1, tzinfo=UTC)
            )
        })
    
    async def check_achievements(self, user: Dict[str, Any]) -> List[Achievement]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        new_achievements = []
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_achievements = set(user.get("achievements", []))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
        for achievement in self.achievements.values():
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            if achievement.id in user_achievements:
                continue
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∫—Ä—ã—Ç—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            if achievement.is_hidden:
                continue
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–µ–∑–æ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω–µ –≤ —Å–µ–∑–æ–Ω
            if achievement.is_seasonal:
                if not self._is_season_active(achievement.season):
                    continue
                if achievement.expires_at and datetime.now(UTC) > achievement.expires_at:
                    continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
            if self._check_requirements(user, achievement.requirements):
                new_achievements.append(achievement)
        
        return new_achievements
    
    def _check_requirements(self, user: Dict[str, Any], requirements: Dict[str, Any]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
        for key, value in requirements.items():
            if key == "challenges_completed":
                if len(user.get("completed_challenges", [])) < value:
                    return False
            elif key == "streak_days":
                if user.get("streak", 0) < value:
                    return False
            elif key == "referrals":
                if len(user.get("referrals", [])) < value:
                    return False
            elif key == "social_shares":
                if len(user.get("social_shares", [])) < value:
                    return False
            elif key == "level":
                if user.get("level", 0) < value:
                    return False
            elif key == "early_completion":
                if not self._has_early_completion(user):
                    return False
            elif key == "late_completion":
                if not self._has_late_completion(user):
                    return False
            elif key == "weekly_completion":
                if not self._has_weekly_completion(user, value):
                    return False
            elif key == "badges_collected":
                if len(user.get("badges", [])) < value:
                    return False
            elif key == "seasonal_challenges":
                if not self._has_seasonal_challenges(user, value):
                    return False
        
        return True
    
    def _is_season_active(self, season: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–µ–∑–æ–Ω–∞"""
        now = datetime.now(UTC)
        month = now.month
        
        if season == "summer":
            return 6 <= month <= 8
        elif season == "winter":
            return 12 <= month <= 2
        elif season == "spring":
            return 3 <= month <= 5
        elif season == "autumn":
            return 9 <= month <= 11
        
        return False
    
    def _has_early_completion(self, user: Dict[str, Any]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–Ω–Ω–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ–ª–ª–µ–Ω–¥–∂–∞"""
        for challenge in user.get("completed_challenges", []):
            completion_time = challenge.get("completed_at")
            if completion_time and completion_time.hour < 8:
                return True
        return False
    
    def _has_late_completion(self, user: Dict[str, Any]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∑–¥–Ω–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ–ª–ª–µ–Ω–¥–∂–∞"""
        for challenge in user.get("completed_challenges", []):
            completion_time = challenge.get("completed_at")
            if completion_time and completion_time.hour >= 22:
                return True
        return False
    
    def _has_weekly_completion(self, user: Dict[str, Any], days: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ–ª–ª–µ–Ω–¥–∂–µ–π –∑–∞ –Ω–µ–¥–µ–ª—é"""
        now = datetime.now(UTC)
        week_start = now - timedelta(days=now.weekday())
        week_end = week_start + timedelta(days=7)
        
        completed_days = set()
        for challenge in user.get("completed_challenges", []):
            completion_time = challenge.get("completed_at")
            if completion_time and week_start <= completion_time < week_end:
                completed_days.add(completion_time.date())
        
        return len(completed_days) >= days
    
    def _has_seasonal_challenges(self, user: Dict[str, Any], count: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–µ–∑–æ–Ω–Ω—ã—Ö —á–µ–ª–ª–µ–Ω–¥–∂–µ–π"""
        now = datetime.now(UTC)
        season_start = self._get_season_start(now)
        season_end = self._get_season_end(now)
        
        completed_count = 0
        for challenge in user.get("completed_challenges", []):
            completion_time = challenge.get("completed_at")
            if completion_time and season_start <= completion_time < season_end:
                completed_count += 1
        
        return completed_count >= count
    
    def _get_season_start(self, date: datetime) -> datetime:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—á–∞–ª–∞ —Å–µ–∑–æ–Ω–∞"""
        month = date.month
        if 3 <= month <= 5:  # –í–µ—Å–Ω–∞
            return datetime(date.year, 3, 1, tzinfo=UTC)
        elif 6 <= month <= 8:  # –õ–µ—Ç–æ
            return datetime(date.year, 6, 1, tzinfo=UTC)
        elif 9 <= month <= 11:  # –û—Å–µ–Ω—å
            return datetime(date.year, 9, 1, tzinfo=UTC)
        else:  # –ó–∏–º–∞
            return datetime(date.year, 12, 1, tzinfo=UTC)
    
    def _get_season_end(self, date: datetime) -> datetime:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ü–∞ —Å–µ–∑–æ–Ω–∞"""
        month = date.month
        if 3 <= month <= 5:  # –í–µ—Å–Ω–∞
            return datetime(date.year, 6, 1, tzinfo=UTC)
        elif 6 <= month <= 8:  # –õ–µ—Ç–æ
            return datetime(date.year, 9, 1, tzinfo=UTC)
        elif 9 <= month <= 11:  # –û—Å–µ–Ω—å
            return datetime(date.year, 12, 1, tzinfo=UTC)
        else:  # –ó–∏–º–∞
            return datetime(date.year + 1, 3, 1, tzinfo=UTC)
    
    async def award_achievement(self, user_id: int, achievement: Achievement) -> bool:
        """–í—ã–¥–∞—á–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await self.db.users.update_one(
                {"user_id": user_id},
                {
                    "$push": {"achievements": achievement.id},
                    "$inc": {"points": achievement.points}
                }
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –±–µ–π–¥–∂, –µ—Å–ª–∏ –µ—Å—Ç—å
            if "badge" in achievement.rewards:
                await self.db.users.update_one(
                    {"user_id": user_id},
                    {"$push": {"badges": achievement.rewards["badge"]}}
                )
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏—Ç—É–ª, –µ—Å–ª–∏ –µ—Å—Ç—å
            if "title" in achievement.rewards:
                await self.db.users.update_one(
                    {"user_id": user_id},
                    {"$set": {"title": achievement.rewards["title"]}}
                )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å, –µ—Å–ª–∏ –µ—Å—Ç—å
            if "bonus" in achievement.rewards:
                await self._apply_bonus(user_id, achievement.rewards["bonus"])
            
            # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–¥–∞—á—É –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            await self.db.achievement_logs.insert_one({
                "user_id": user_id,
                "achievement_id": achievement.id,
                "awarded_at": datetime.now(UTC),
                "points": achievement.points,
                "rewards": achievement.rewards
            })
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è: {e}")
            return False
    
    async def _apply_bonus(self, user_id: int, bonus: str):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞"""
        try:
            if bonus == "double_points_24h":
                await self.db.users.update_one(
                    {"user_id": user_id},
                    {
                        "$set": {
                            "bonus_double_points": True,
                            "bonus_expires_at": datetime.now(UTC) + timedelta(hours=24)
                        }
                    }
                )
            elif bonus == "triple_points_24h":
                await self.db.users.update_one(
                    {"user_id": user_id},
                    {
                        "$set": {
                            "bonus_triple_points": True,
                            "bonus_expires_at": datetime.now(UTC) + timedelta(hours=24)
                        }
                    }
                )
            elif bonus == "double_points_week":
                await self.db.users.update_one(
                    {"user_id": user_id},
                    {
                        "$set": {
                            "bonus_double_points": True,
                            "bonus_expires_at": datetime.now(UTC) + timedelta(days=7)
                        }
                    }
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –±–æ–Ω—É—Å–∞: {e}")
    
    async def get_user_achievements(self, user: Dict[str, Any]) -> List[Achievement]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_achievements = []
        for achievement_id in user.get("achievements", []):
            if achievement_id in self.achievements:
                user_achievements.append(self.achievements[achievement_id])
        return user_achievements
    
    async def get_available_achievements(self, user: Dict[str, Any]) -> List[Achievement]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
        available_achievements = []
        user_achievements = set(user.get("achievements", []))
        
        for achievement in self.achievements.values():
            if achievement.id not in user_achievements and not achievement.is_hidden:
                if not achievement.is_seasonal or self._is_season_active(achievement.season):
                    available_achievements.append(achievement)
        
        return available_achievements
    
    async def get_achievement_progress(self, user: Dict[str, Any], achievement: Achievement) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
        progress = {}
        
        for key, value in achievement.requirements.items():
            if key == "challenges_completed":
                current = len(user.get("completed_challenges", []))
                progress[key] = {
                    "current": current,
                    "required": value,
                    "percentage": min(100, (current / value) * 100)
                }
            elif key == "streak_days":
                current = user.get("streak", 0)
                progress[key] = {
                    "current": current,
                    "required": value,
                    "percentage": min(100, (current / value) * 100)
                }
            elif key == "referrals":
                current = len(user.get("referrals", []))
                progress[key] = {
                    "current": current,
                    "required": value,
                    "percentage": min(100, (current / value) * 100)
                }
            elif key == "social_shares":
                current = len(user.get("social_shares", []))
                progress[key] = {
                    "current": current,
                    "required": value,
                    "percentage": min(100, (current / value) * 100)
                }
            elif key == "level":
                current = user.get("level", 0)
                progress[key] = {
                    "current": current,
                    "required": value,
                    "percentage": min(100, (current / value) * 100)
                }
            elif key == "badges_collected":
                current = len(user.get("badges", []))
                progress[key] = {
                    "current": current,
                    "required": value,
                    "percentage": min(100, (current / value) * 100)
                }
        
        return progress
    
    def format_achievements_list(self, achievements: List[Achievement]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
        if not achievements:
            return "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π."
        
        text = ""
        for achievement in achievements:
            text += f"{achievement.icon} {achievement.name}\n"
            text += f"üìù {achievement.description}\n"
            text += f"‚≠êÔ∏è +{achievement.points} –æ—á–∫–æ–≤\n\n"
        
        return text
    
    async def cleanup_expired_achievements(self):
        """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ–∑–æ–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
        try:
            now = datetime.now(UTC)
            
            # –ù–∞—Ö–æ–¥–∏–º –∏—Å—Ç–µ–∫—à–∏–µ —Å–µ–∑–æ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            expired_achievements = [
                achievement for achievement in self.achievements.values()
                if achievement.is_seasonal and achievement.expires_at and achievement.expires_at < now
            ]
            
            # –£–¥–∞–ª—è–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            for achievement in expired_achievements:
                await self.db.users.update_many(
                    {"achievements": achievement.id},
                    {"$pull": {"achievements": achievement.id}}
                )
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—á–∏—Å—Ç–∫—É
            await self.db.achievement_logs.insert_one({
                "type": "cleanup",
                "timestamp": now,
                "expired_count": len(expired_achievements)
            })
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–µ–∫—à–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {e}")

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
achievement_system = AchievementSystem(None)  # DB –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–∑–∂–µ 