import os
import logging
from datetime import datetime, timedelta, UTC
from typing import Optional, Dict, Any, Union
from bson import ObjectId
import base64
import tempfile

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from dotenv import load_dotenv
from motor.motor_asyncio import AsyncIOMotorClient

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ ADMIN_ID –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤ int
try:
    ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
    logger.info(f"Admin ID —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {ADMIN_ID}")
except (ValueError, TypeError) as e:
    ADMIN_ID = 1521413812  # Fallback –Ω–∞ –≤–∞—à ID
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ ADMIN_ID, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
try:
    bot = Bot(token=os.getenv("ADMIN_BOT_TOKEN"))
    dp = Dispatcher()
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
    raise

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ MongoDB
try:
    mongo_client = AsyncIOMotorClient(os.getenv("MONGODB_URI"))
    db = mongo_client.Sparkaph
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB: {e}")
    raise

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class AdminStates(StatesGroup):
    waiting_for_category_name = State()
    waiting_for_category_description = State()
    waiting_for_challenge_text = State()
    waiting_for_challenge_description = State()
    waiting_for_challenge_category = State()
    waiting_for_challenge_max_users = State()
    waiting_for_reject_reason = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–∞–∑–∞
    waiting_for_user_points = State()

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏ submission_id
async def save_temp_data(state: FSMContext, submission_id: str, message_id: int):
    await state.update_data(submission_id=submission_id, message_id=message_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def cmd_start(message: Message):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º ID
        if message.from_user.id != ADMIN_ID:
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–±–æ—Ç—É: user_id={message.from_user.id}, username={message.from_user.username}")
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
            return
        
        logger.info(f"–ê–¥–º–∏–Ω –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É: {message.from_user.id} ({message.from_user.username})")
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å Sparkaph!\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º.",
            reply_markup=get_admin_menu()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ start: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω-–º–µ–Ω—é
def get_admin_menu():
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="üìù –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è")],
            [types.KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
            [types.KeyboardButton(text="üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏")],
            [types.KeyboardButton(text="üéØ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ–ª–ª–µ–Ω–¥–∂–∞–º–∏")],
            [types.KeyboardButton(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")]
        ],
        resize_keyboard=True
    )
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞–Ω–∏–π
@dp.message(F.text == "üìù –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è")
async def check_submissions(message: Message):
    try:
        if message.from_user.id != ADMIN_ID:
            return
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞–Ω–∏–π
        submissions = await db.submissions.find({
            "status": "pending"
        }).to_list(length=None)
        
        if not submissions:
            await message.answer("–ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –ø—Ä–æ–≤–µ—Ä–∫–∏.")
            return
        
        sent_count = 0
        for submission in submissions:
            user = await db.users.find_one({"user_id": submission["user_id"]})
            challenge = await db.challenges.find_one({"_id": submission["challenge_id"]})
            
            if not user or not challenge:
                continue
            
            text = (
                f"üìù –ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É:\n\n"
                f"–û—Ç: @{user['username']} (ID: {user['user_id']})\n"
                f"–ß–µ–ª–ª–µ–Ω–¥–∂: {challenge['text']}\n"
                f"–û—Ç–≤–µ—Ç: {submission['text']}\n"
                f"–í—Ä–µ–º—è: {submission['submitted_at'].strftime('%Y-%m-%d %H:%M')}"
            )
            
            keyboard = types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        types.InlineKeyboardButton(
                            text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å",
                            callback_data=f"approve_{submission['_id']}"
                        ),
                        types.InlineKeyboardButton(
                            text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                            callback_data=f"reject_{submission['_id']}"
                        )
                    ]
                ]
            )
            
            sent = False
            file_content = submission.get("file_content")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª –∏–ª–∏ —Ç–µ–∫—Å—Ç
            if submission.get("media") and file_content:
                try:
                    media_type = submission.get("media_type", "")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    with tempfile.NamedTemporaryFile(delete=False, suffix=f".{media_type}") as temp_file:
                        temp_file.write(base64.b64decode(file_content))
                        temp_path = temp_file.name
                    
                    logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {temp_path}")
                    
                    try:
                        if "photo" in media_type:
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ñ–æ—Ç–æ
                            with open(temp_path, 'rb') as photo_file:
                                msg = await message.answer_photo(
                                    photo=types.BufferedInputFile(
                                        photo_file.read(),
                                        filename=f"photo.{media_type}"
                                    ),
                                    caption=text,
                                    reply_markup=keyboard
                                )
                            sent = True
                        elif "video" in media_type:
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –≤–∏–¥–µ–æ
                            with open(temp_path, 'rb') as video_file:
                                msg = await message.answer_video(
                                    video=types.BufferedInputFile(
                                        video_file.read(),
                                        filename=f"video.{media_type}"
                                    ),
                                    caption=text,
                                    reply_markup=keyboard
                                )
                            sent = True
                        else:
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
                            with open(temp_path, 'rb') as doc_file:
                                msg = await message.answer_document(
                                    document=types.BufferedInputFile(
                                        doc_file.read(),
                                        filename=f"document.{media_type}"
                                    ),
                                    caption=text,
                                    reply_markup=keyboard
                                )
                            sent = True
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                        msg = await message.answer(
                            text + "\n\n‚ö†Ô∏è [–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–¥–∏–∞ –∏–∑ —Ñ–∞–π–ª–∞]",
                            reply_markup=keyboard
                        )
                        sent = True
                    
                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    try:
                        os.remove(temp_path)
                        logger.info(f"–£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {temp_path}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
                        
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª, –ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å file_id
                    try:
                        media_type = submission.get("media_type", "")
                        media_file_id = submission.get("media")
                        
                        if "photo" in media_type:
                            msg = await message.answer_photo(
                                photo=media_file_id,
                                caption=text,
                                reply_markup=keyboard
                            )
                            sent = True
                        elif "video" in media_type:
                            msg = await message.answer_video(
                                video=media_file_id,
                                caption=text,
                                reply_markup=keyboard
                            )
                            sent = True
                        else:
                            msg = await message.answer_document(
                                document=media_file_id,
                                caption=text,
                                reply_markup=keyboard
                            )
                            sent = True
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞ –ø–æ file_id: {e}")
                        # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                        msg = await message.answer(
                            text + "\n\n‚ö†Ô∏è [–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–¥–∏–∞. ID –º–µ–¥–∏–∞: " + str(submission.get("media")) + "]",
                            reply_markup=keyboard
                        )
                        sent = True
            elif submission.get("media"):
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ file_id –±–µ–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
                try:
                    media_type = submission.get("media_type", "")
                    media_file_id = submission.get("media")
                    
                    if "photo" in media_type:
                        msg = await message.answer_photo(
                            photo=media_file_id,
                            caption=text,
                            reply_markup=keyboard
                        )
                        sent = True
                    elif "video" in media_type:
                        msg = await message.answer_video(
                            video=media_file_id,
                            caption=text,
                            reply_markup=keyboard
                        )
                        sent = True
                    else:
                        msg = await message.answer_document(
                            document=media_file_id,
                            caption=text,
                            reply_markup=keyboard
                        )
                        sent = True
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞: {e}")
                    # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ —Å –º–µ–¥–∏–∞ –Ω–µ —É–¥–∞–ª–∏—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º
                    msg = await message.answer(
                        text + "\n\n‚ö†Ô∏è [–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–¥–∏–∞. ID –º–µ–¥–∏–∞: " + str(media_file_id) + "]",
                        reply_markup=keyboard
                    )
                    sent = True
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –º–µ–¥–∏–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
                msg = await message.answer(text, reply_markup=keyboard)
                sent = True
            
            if sent:
                sent_count += 1
        
        if sent_count == 0:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–¥–∞–Ω–∏–π: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_statistics(message: Message):
    try:
        if message.from_user.id != ADMIN_ID:
            return
        
        # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        now = datetime.now(UTC)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
        stats = {}
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        total_users = await db.users.count_documents({})
        stats["total_users"] = total_users
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (DAU - daily active users)
        active_users_24h = await db.users.count_documents({
            "last_activity": {"$gte": now - timedelta(days=1)}
        })
        stats["active_users_24h"] = active_users_24h
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –Ω–µ–¥–µ–ª—é (WAU - weekly active users)
        active_users_7d = await db.users.count_documents({
            "last_activity": {"$gte": now - timedelta(days=7)}
        })
        stats["active_users_7d"] = active_users_7d
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ 3 –Ω–µ–¥–µ–ª–∏
        active_users_21d = await db.users.count_documents({
            "last_activity": {"$gte": now - timedelta(days=21)}
        })
        stats["active_users_21d"] = active_users_21d
        
        # –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        new_users_24h = await db.users.count_documents({
            "joined_at": {"$gte": now - timedelta(days=1)}
        })
        stats["new_users_24h"] = new_users_24h
        
        # –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
        new_users_7d = await db.users.count_documents({
            "joined_at": {"$gte": now - timedelta(days=7)}
        })
        stats["new_users_7d"] = new_users_7d
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —á–µ–ª–ª–µ–Ω–¥–∂–µ–π –∑–∞ —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
        completed_challenges_total = await db.submissions.count_documents({
            "status": "approved"
        })
        stats["completed_challenges_total"] = completed_challenges_total
        
        completed_challenges_24h = await db.submissions.count_documents({
            "status": "approved",
            "reviewed_at": {"$gte": now - timedelta(days=1)}
        })
        stats["completed_challenges_24h"] = completed_challenges_24h
        
        completed_challenges_7d = await db.submissions.count_documents({
            "status": "approved",
            "reviewed_at": {"$gte": now - timedelta(days=7)}
        })
        stats["completed_challenges_7d"] = completed_challenges_7d
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categories = await db.categories.find().to_list(length=None)
        category_stats = {}
        
        for category in categories:
            category_id = category["_id"]
            category_name = category["name"]
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–ª–µ–Ω–¥–∂–µ–π –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            challenges_count = await db.challenges.count_documents({
                "category_id": category_id
            })
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —á–µ–ª–ª–µ–Ω–¥–∂–µ–π –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            completed_in_category = 0
            challenges = await db.challenges.find({"category_id": category_id}).to_list(length=None)
            
            for challenge in challenges:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
                submissions_count = await db.submissions.count_documents({
                    "challenge_id": challenge["_id"],
                    "status": "approved"
                })
                
                completed_in_category += submissions_count
            
            category_stats[category_name] = {
                "challenges_count": challenges_count,
                "completed_count": completed_in_category
            }
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
        submissions = await db.submissions.find({
            "status": {"$in": ["approved", "rejected"]},
            "submitted_at": {"$gte": now - timedelta(days=7)}
        }).to_list(length=None)
        
        avg_response_time = 0
        if submissions:
            response_times = []
            for submission in submissions:
                if submission.get("reviewed_at"):
                    response_time = submission["reviewed_at"] - submission["submitted_at"]
                    response_times.append(response_time.total_seconds() / 3600)
            
            if response_times:
                avg_response_time = sum(response_times) / len(response_times)
        
        stats["avg_response_time_hours"] = avg_response_time
        
        # –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ —É–¥–µ—Ä–∂–∞–Ω–∏—è
        retention_1d = (active_users_24h / total_users * 100) if total_users > 0 else 0
        retention_7d = (active_users_7d / total_users * 100) if total_users > 0 else 0
        retention_21d = (active_users_21d / total_users * 100) if total_users > 0 else 0
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –ø–æ–¥–ø–∏—Å–∫–æ–π –Ω–∞ –∫–∞–Ω–∞–ª
        subscribed_users = await db.users.count_documents({"subscription": True})
        subscription_rate = (subscribed_users / total_users * 100) if total_users > 0 else 0
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        gender_stats = {
            "male": await db.users.count_documents({"gender": "male"}),
            "female": await db.users.count_documents({"gender": "female"}),
            "unknown": await db.users.count_documents({"gender": None})
        }
        
        age_stats = {
            "under18": await db.users.count_documents({"age": "under18"}),
            "18-24": await db.users.count_documents({"age": "18-24"}),
            "25-34": await db.users.count_documents({"age": "25-34"}),
            "35-44": await db.users.count_documents({"age": "35-44"}),
            "45plus": await db.users.count_documents({"age": "45plus"}),
            "unknown": await db.users.count_documents({"age": None})
        }
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏)
        text = (
            f"üìä –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ Sparkaph:\n\n"
            f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n"
            f"‚Ä¢ –í—Å–µ–≥–æ: {stats['total_users']}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 24—á (DAU): {stats['active_users_24h']}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é (WAU): {stats['active_users_7d']}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 3 –Ω–µ–¥–µ–ª–∏: {stats['active_users_21d']}\n"
            f"‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ 24—á: {stats['new_users_24h']}\n\n"
            
            f"üéØ –ß–µ–ª–ª–µ–Ω–¥–∂–∏:\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {stats['completed_challenges_total']}\n"
            f"‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞ 24—á: {stats['completed_challenges_24h']}\n"
            f"‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞ –Ω–µ–¥–µ–ª—é: {stats['completed_challenges_7d']}\n\n"
            
            f"‚è± –ú–µ—Ç—Ä–∏–∫–∏ –≤—Ä–µ–º–µ–Ω–∏:\n"
            f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {avg_response_time:.1f} —á\n\n"
            
            f"üìà –£–¥–µ—Ä–∂–∞–Ω–∏–µ:\n"
            f"‚Ä¢ 1 –¥–µ–Ω—å: {retention_1d:.1f}%\n"
            f"‚Ä¢ 7 –¥–Ω–µ–π: {retention_7d:.1f}%\n"
            f"‚Ä¢ 21 –¥–µ–Ω—å: {retention_21d:.1f}%\n\n"
            
            f"üì¢ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª: {subscription_rate:.1f}%\n\n"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        await message.answer(text)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        category_text = "üìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n\n"
        for name, data in category_stats.items():
            category_text += f"‚Ä¢ {name}: {data['completed_count']} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∏–∑ {data['challenges_count']} —á–µ–ª–ª–µ–Ω–¥–∂–µ–π\n"
        
        await message.answer(category_text)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        demo_text = (
            f"üë§ –î–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ:\n\n"
            f"–ü–æ–ª:\n"
            f"‚Ä¢ –ú—É–∂—Å–∫–æ–π: {gender_stats['male']} ({gender_stats['male']/total_users*100:.1f}%)\n"
            f"‚Ä¢ –ñ–µ–Ω—Å–∫–∏–π: {gender_stats['female']} ({gender_stats['female']/total_users*100:.1f}%)\n"
            f"‚Ä¢ –ù–µ —É–∫–∞–∑–∞–Ω: {gender_stats['unknown']} ({gender_stats['unknown']/total_users*100:.1f}%)\n\n"
            
            f"–í–æ–∑—Ä–∞—Å—Ç:\n"
            f"‚Ä¢ –¥–æ 18: {age_stats['under18']} ({age_stats['under18']/total_users*100:.1f}%)\n"
            f"‚Ä¢ 18-24: {age_stats['18-24']} ({age_stats['18-24']/total_users*100:.1f}%)\n"
            f"‚Ä¢ 25-34: {age_stats['25-34']} ({age_stats['25-34']/total_users*100:.1f}%)\n"
            f"‚Ä¢ 35-44: {age_stats['35-44']} ({age_stats['35-44']/total_users*100:.1f}%)\n"
            f"‚Ä¢ 45+: {age_stats['45plus']} ({age_stats['45plus']/total_users*100:.1f}%)\n"
            f"‚Ä¢ –ù–µ —É–∫–∞–∑–∞–Ω: {age_stats['unknown']} ({age_stats['unknown']/total_users*100:.1f}%)\n"
        )
        
        await message.answer(demo_text)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
@dp.message(F.text == "üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏")
async def manage_categories(message: Message):
    try:
        if message.from_user.id != ADMIN_ID:
            return
        
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
                        callback_data="add_category"
                    ),
                    types.InlineKeyboardButton(
                        text="üóë –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
                        callback_data="delete_category"
                    )
                ]
            ]
        )
        
        categories = await db.categories.find().to_list(length=None)
        text = "üìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∏:\n\n"
        for category in categories:
            text += f"‚Ä¢ {category['name']}\n"
        
        await message.answer(text, reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–µ–ª–ª–µ–Ω–¥–∂–∞–º–∏
@dp.message(F.text == "üéØ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ–ª–ª–µ–Ω–¥–∂–∞–º–∏")
async def manage_challenges(message: Message):
    try:
        if message.from_user.id != ADMIN_ID:
            return
        
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂",
                        callback_data="add_challenge"
                    ),
                    types.InlineKeyboardButton(
                        text="üóë –£–¥–∞–ª–∏—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂",
                        callback_data="delete_challenge"
                    )
                ]
            ]
        )
        
        challenges = await db.challenges.find().to_list(length=None)
        text = "üéØ –ß–µ–ª–ª–µ–Ω–¥–∂–∏:\n\n"
        for challenge in challenges:
            category = await db.categories.find_one({"_id": challenge["category_id"]})
            if category:
                text += f"‚Ä¢ {challenge['text']} ({category['name']})\n"
        
        await message.answer(text, reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —á–µ–ª–ª–µ–Ω–¥–∂–∞–º–∏: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
@dp.message(F.text == "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
async def manage_users(message: Message):
    try:
        if message.from_user.id != ADMIN_ID:
            return
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = await db.users.find().sort("points", -1).limit(10).to_list(length=None)
        
        text = "üë• –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
        for i, user in enumerate(users, 1):
            text += f"{i}. @{user['username']} - {user['points']} –æ—á–∫–æ–≤\n"
        
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text="‚ûï –í—ã–¥–∞—Ç—å –æ—á–∫–∏",
                        callback_data="add_points"
                    ),
                    types.InlineKeyboardButton(
                        text="‚ûñ –°–Ω—è—Ç—å –æ—á–∫–∏",
                        callback_data="remove_points"
                    )
                ]
            ]
        )
        
        await message.answer(text, reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@dp.callback_query(F.data.startswith("approve_"))
async def approve_submission(callback: CallbackQuery):
    try:
        if callback.from_user.id != ADMIN_ID:
            return
        
        submission_id = callback.data.split("_")[1]
        submission = await db.submissions.find_one({"_id": ObjectId(submission_id)})
        
        if not submission:
            await callback.answer("–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
        await db.submissions.update_one(
            {"_id": ObjectId(submission_id)},
            {
                "$set": {
                    "status": "approved",
                    "reviewed_at": datetime.now(UTC)
                }
            }
        )
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—á–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db.users.update_one(
            {"user_id": submission["user_id"]},
            {
                "$inc": {"points": 20},
                "$push": {"completed_challenges": submission["challenge_id"]}
            }
        )
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await bot.send_message(
            submission["user_id"],
            "‚úÖ –¢–≤–æ–π —á–µ–ª–ª–µ–Ω–¥–∂ –æ–¥–æ–±—Ä–µ–Ω! +20 –æ—á–∫–æ–≤"
        )
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–¥–∞–Ω–∏–µ–º - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
        try:
            if callback.message.photo:
                await callback.message.edit_caption(
                    caption=f"{callback.message.caption}\n\n‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ",
                    reply_markup=None
                )
            elif callback.message.video:
                await callback.message.edit_caption(
                    caption=f"{callback.message.caption}\n\n‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ",
                    reply_markup=None
                )
            elif callback.message.document:
                await callback.message.edit_caption(
                    caption=f"{callback.message.caption}\n\n‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ",
                    reply_markup=None
                )
            else:
                await callback.message.edit_text(
                    f"{callback.message.text}\n\n‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ",
                    reply_markup=None
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.answer("‚úÖ –ó–∞–¥–∞–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–æ!")
        
        await callback.answer("–ó–∞–¥–∞–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–æ!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.callback_query(F.data.startswith("reject_"))
async def reject_submission(callback: CallbackQuery, state: FSMContext):
    try:
        if callback.from_user.id != ADMIN_ID:
            return
        
        submission_id = callback.data.split("_")[1]
        submission = await db.submissions.find_one({"_id": ObjectId(submission_id)})
        
        if not submission:
            await callback.answer("–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º submission_id –∏ message_id –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        await save_temp_data(state, submission_id, callback.message.message_id)
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞
        await callback.message.reply("–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞:")
        await state.set_state(AdminStates.waiting_for_reject_reason)
        
        await callback.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–∞–∑–∞
@dp.message(AdminStates.waiting_for_reject_reason)
async def process_reject_reason(message: Message, state: FSMContext):
    try:
        if message.from_user.id != ADMIN_ID:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        data = await state.get_data()
        submission_id = data.get("submission_id")
        message_id = data.get("message_id")
        
        if not submission_id:
            await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –∑–∞–¥–∞–Ω–∏—è.")
            await state.clear()
            return
        
        submission = await db.submissions.find_one({"_id": ObjectId(submission_id)})
        if not submission:
            await message.answer("–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            await state.clear()
            return
        
        reject_reason = message.text
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
        await db.submissions.update_one(
            {"_id": ObjectId(submission_id)},
            {
                "$set": {
                    "status": "rejected",
                    "reviewed_at": datetime.now(UTC),
                    "reject_reason": reject_reason
                }
            }
        )
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await bot.send_message(
            submission["user_id"],
            f"‚ùå –¢–≤–æ–π —á–µ–ª–ª–µ–Ω–¥–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω.\n–ü—Ä–∏—á–∏–Ω–∞: {reject_reason}\n–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!"
        )
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–¥–∞–Ω–∏–µ–º
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            original_message = await bot.get_message(message.chat.id, message_id)
            
            if original_message.photo:
                await original_message.edit_caption(
                    caption=f"{original_message.caption}\n\n‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ\n–ü—Ä–∏—á–∏–Ω–∞: {reject_reason}",
                    reply_markup=None
                )
            elif original_message.video:
                await original_message.edit_caption(
                    caption=f"{original_message.caption}\n\n‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ\n–ü—Ä–∏—á–∏–Ω–∞: {reject_reason}",
                    reply_markup=None
                )
            elif original_message.document:
                await original_message.edit_caption(
                    caption=f"{original_message.caption}\n\n‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ\n–ü—Ä–∏—á–∏–Ω–∞: {reject_reason}",
                    reply_markup=None
                )
            else:
                await original_message.edit_text(
                    f"{original_message.text}\n\n‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ\n–ü—Ä–∏—á–∏–Ω–∞: {reject_reason}",
                    reply_markup=None
                )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            await message.reply("–ó–∞–¥–∞–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        
        await message.reply("–ó–∞–¥–∞–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω.")
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–∞–∑–∞: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–µ–ª–ª–µ–Ω–¥–∂–∞
@dp.callback_query(F.data == "add_challenge")
async def start_add_challenge(callback: CallbackQuery, state: FSMContext):
    try:
        if callback.from_user.id != ADMIN_ID:
            return
        
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–≥–æ —á–µ–ª–ª–µ–Ω–¥–∂–∞:")
        await state.set_state(AdminStates.waiting_for_challenge_text)
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —á–µ–ª–ª–µ–Ω–¥–∂–∞: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —á–µ–ª–ª–µ–Ω–¥–∂–∞
@dp.message(AdminStates.waiting_for_challenge_text)
async def process_challenge_text(message: Message, state: FSMContext):
    try:
        if message.from_user.id != ADMIN_ID:
            return
        
        challenge_text = message.text
        if not challenge_text:
            await message.answer("–¢–µ–∫—Å—Ç —á–µ–ª–ª–µ–Ω–¥–∂–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç:")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç —á–µ–ª–ª–µ–Ω–¥–∂–∞
        await state.update_data(challenge_text=challenge_text)
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —á–µ–ª–ª–µ–Ω–¥–∂–∞
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —á–µ–ª–ª–µ–Ω–¥–∂–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 'skip' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):")
        await state.set_state(AdminStates.waiting_for_challenge_description)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞ —á–µ–ª–ª–µ–Ω–¥–∂–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è —á–µ–ª–ª–µ–Ω–¥–∂–∞
@dp.message(AdminStates.waiting_for_challenge_description)
async def process_challenge_description(message: Message, state: FSMContext):
    try:
        if message.from_user.id != ADMIN_ID:
            return
        
        challenge_description = message.text
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ
        if challenge_description.lower() == "skip":
            challenge_description = ""
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —á–µ–ª–ª–µ–Ω–¥–∂–∞
        await state.update_data(challenge_description=challenge_description)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞
        categories = await db.categories.find().to_list(length=None)
        
        if not categories:
            await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.")
            await state.clear()
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[])
        
        for category in categories:
            keyboard.inline_keyboard.append([
                types.InlineKeyboardButton(
                    text=category["name"],
                    callback_data=f"select_category_{category['_id']}"
                )
            ])
        
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —á–µ–ª–ª–µ–Ω–¥–∂–∞:", reply_markup=keyboard)
        await state.set_state(AdminStates.waiting_for_challenge_category)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–∏—Å–∞–Ω–∏—è —á–µ–ª–ª–µ–Ω–¥–∂–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —á–µ–ª–ª–µ–Ω–¥–∂–∞
@dp.callback_query(AdminStates.waiting_for_challenge_category, F.data.startswith("select_category_"))
async def process_challenge_category(callback: CallbackQuery, state: FSMContext):
    try:
        if callback.from_user.id != ADMIN_ID:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ callback_data
        category_id = callback.data.split("_")[2]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        await state.update_data(category_id=ObjectId(category_id))
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —á–µ–ª–ª–µ–Ω–¥–∂–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5):")
        await state.set_state(AdminStates.waiting_for_challenge_max_users)
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ–ª–ª–µ–Ω–¥–∂–∞: {e}")
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
@dp.message(AdminStates.waiting_for_challenge_max_users)
async def process_challenge_max_users(message: Message, state: FSMContext):
    try:
        if message.from_user.id != ADMIN_ID:
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
        max_users = 5  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        try:
            if message.text:
                max_users = int(message.text)
                if max_users <= 0:
                    raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 5")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        data = await state.get_data()
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–µ–ª–ª–µ–Ω–¥–∂
        challenge = {
            "category_id": data["category_id"],
            "text": data["challenge_text"],
            "description": data.get("challenge_description", ""),
            "max_users": max_users,
            "taken_by": [],
            "status": "active",
            "created_at": datetime.now(UTC)
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ–ª–ª–µ–Ω–¥–∂ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        result = await db.challenges.insert_one(challenge)
        
        if result.inserted_id:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            category = await db.categories.find_one({"_id": data["category_id"]})
            category_name = category["name"] if category else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è"
            
            await message.answer(
                f"‚úÖ –ß–µ–ª–ª–µ–Ω–¥–∂ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                f"–¢–µ–∫—Å—Ç: {data['challenge_text']}\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n"
                f"–ú–∞–∫—Å. –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {max_users}"
            )
        else:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —á–µ–ª–ª–µ–Ω–¥–∂–∞: {e}")
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.callback_query(F.data == "add_category")
async def start_add_category(callback: CallbackQuery, state: FSMContext):
    try:
        if callback.from_user.id != ADMIN_ID:
            return
        
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
        await state.set_state(AdminStates.waiting_for_category_name)
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.message(AdminStates.waiting_for_category_name)
async def process_category_name(message: Message, state: FSMContext):
    try:
        if message.from_user.id != ADMIN_ID:
            return
        
        category_name = message.text
        if not category_name:
            await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
        existing_category = await db.categories.find_one({"name": category_name})
        if existing_category:
            await message.answer(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{category_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        await state.update_data(category_name=category_name)
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
        await state.set_state(AdminStates.waiting_for_category_description)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.message(AdminStates.waiting_for_category_description)
async def process_category_description(message: Message, state: FSMContext):
    try:
        if message.from_user.id != ADMIN_ID:
            return
        
        category_description = message.text
        if not category_description:
            await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        data = await state.get_data()
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        category = {
            "name": data["category_name"],
            "description": category_description,
            "created_at": datetime.now(UTC)
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        result = await db.categories.insert_one(category)
        
        if result.inserted_id:
            await message.answer(
                f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {data['category_name']}\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {category_description}"
            )
        else:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        await state.clear()

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        raise

if __name__ == "__main__":
    import asyncio
    asyncio.run(main()) 