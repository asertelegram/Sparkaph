import logging
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ConversationHandler,
    filters
)
from config import USER_BOT_TOKEN, WELCOME_MESSAGE
from database.operations import Database
from utils.keyboards import (
    get_main_menu_keyboard,
    get_onboarding_keyboard,
    get_language_keyboard,
    get_categories_keyboard,
    get_challenge_actions_keyboard,
    get_leaderboard_period_keyboard
)
from utils.states import UserStates
from utils.helpers import (
    format_challenge_info,
    format_user_stats,
    format_leaderboard_entry,
    get_random_challenge,
    validate_video_duration
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()

async def start(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user = update.effective_user
    user_data = await db.get_user(user.id)
    
    if not user_data:
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        await update.message.reply_text(
            WELCOME_MESSAGE,
            reply_markup=get_onboarding_keyboard()
        )
        return UserStates.ONBOARDING
    else:
        # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        await update.message.reply_text(
            f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.first_name}!",
            reply_markup=get_main_menu_keyboard()
        )
        return UserStates.MAIN_MENU

async def handle_onboarding(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞."""
    query = update.callback_query
    await query.answer()
    
    if query.data == "what_is_this":
        await query.message.edit_text(
            "Sparkaph - —ç—Ç–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —á–µ–ª–ª–µ–Ω–¥–∂–µ–π, –≥–¥–µ –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            "üéØ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —á–µ–ª–ª–µ–Ω–¥–∂–∞—Ö\n"
            "üì± –°–Ω–∏–º–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∏–¥–µ–æ\n"
            "üèÜ –ü–æ–ª—É—á–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—ã –∏ –±–µ–π–¥–∂–∏\n"
            "üë• –°–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏",
            reply_markup=get_onboarding_keyboard()
        )
    elif query.data == "how_to_participate":
        await query.message.edit_text(
            "–ö–∞–∫ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å:\n\n"
            "1. –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —á–µ–ª–ª–µ–Ω–¥–∂\n"
            "2. –°–Ω–∏–º–∏—Ç–µ –≤–∏–¥–µ–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è\n"
            "3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –≤ –±–æ—Ç–∞\n"
            "4. –ü–æ–ª—É—á–∏—Ç–µ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å\n"
            "5. –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –Ω–∞–≥—Ä–∞–¥—ã!",
            reply_markup=get_onboarding_keyboard()
        )
    elif query.data == "view_examples":
        await query.message.edit_text(
            "–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä—ã –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ: @SparkaphChannel",
            reply_markup=get_language_keyboard()
        )
        return UserStates.LANGUAGE_SELECTION

async def handle_language_selection(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞."""
    query = update.callback_query
    await query.answer()
    
    lang = query.data.split('_')[1]
    user = update.effective_user
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await db.create_user({
        "user_id": user.id,
        "username": user.username,
        "first_name": user.first_name,
        "last_name": user.last_name,
        "language_code": lang,
        "referral_code": generate_referral_code()
    })
    
    await query.message.edit_text(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —á–µ–ª–ª–µ–Ω–¥–∂–∞—Ö.",
        reply_markup=get_main_menu_keyboard()
    )
    return UserStates.MAIN_MENU

async def handle_main_menu(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    text = update.message.text
    
    if text == "üéØ –ß–µ–ª–ª–µ–Ω–¥–∂–∏":
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=get_categories_keyboard()
        )
        return UserStates.VIEWING_CHALLENGES
    
    elif text == "üì± –ú–æ–∏ —á–µ–ª–ª–µ–Ω–¥–∂–∏":
        user = update.effective_user
        stats = await db.get_user_stats(user.id)
        await update.message.reply_text(
            format_user_stats(stats),
            reply_markup=get_main_menu_keyboard()
        )
    
    elif text == "üìä –õ–∏–¥–µ—Ä–±–æ—Ä–¥":
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
            reply_markup=get_leaderboard_period_keyboard()
        )
    
    elif text == "üé≤ –†–∞–Ω–¥–æ–º —á–µ–ª–ª–µ–Ω–¥–∂":
        challenges = await db.get_active_challenges()
        challenge = get_random_challenge(challenges)
        if challenge:
            await update.message.reply_text(
                format_challenge_info(challenge),
                reply_markup=get_challenge_actions_keyboard(challenge['challenge_id'])
            )
        else:
            await update.message.reply_text(
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–µ–ª–ª–µ–Ω–¥–∂–µ–π.",
                reply_markup=get_main_menu_keyboard()
            )
    
    elif text == "üë• –ü–æ–∑–≤–∞—Ç—å –¥—Ä—É–≥–∞":
        user = await db.get_user(update.effective_user.id)
        await update.message.reply_text(
            f"–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–≥–∞ –ø–æ —Å—Å—ã–ª–∫–µ:\n"
            f"https://t.me/SparkaphBot?start={user['referral_code']}",
            reply_markup=get_main_menu_keyboard()
        )
    
    elif text == "üèÜ –ú–æ–∏ –Ω–∞–≥—Ä–∞–¥—ã":
        user = await db.get_user(update.effective_user.id)
        badges_text = "\n".join([BADGES[badge] for badge in user['badges']]) if user['badges'] else "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–≥—Ä–∞–¥"
        await update.message.reply_text(
            f"–í–∞—à–∏ –Ω–∞–≥—Ä–∞–¥—ã:\n\n{badges_text}",
            reply_markup=get_main_menu_keyboard()
        )
    
    elif text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        await update.message.reply_text(
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n"
            "1. –Ø–∑—ã–∫\n"
            "2. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
            "3. –ê–∫–∫–∞—É–Ω—Ç",
            reply_markup=get_main_menu_keyboard()
        )
    
    elif text == "‚ùì –ü–æ–º–æ—â—å":
        await update.message.reply_text(
            "–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n\n"
            "1. –ö–∞–∫ –Ω–∞—á–∞—Ç—å —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å?\n"
            "2. –ö–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∏–¥–µ–æ?\n"
            "3. –ö–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞–≥—Ä–∞–¥—ã?\n"
            "4. –ö–∞–∫ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞?\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π:",
            reply_markup=get_main_menu_keyboard()
        )
    
    return UserStates.MAIN_MENU

async def handle_challenge_selection(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —á–µ–ª–ª–µ–Ω–¥–∂–∞."""
    query = update.callback_query
    await query.answer()
    
    if query.data.startswith("category_"):
        category = query.data.split("_")[1]
        challenges = await db.get_active_challenges(category)
        if challenges:
            challenge = challenges[0]  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —á–µ–ª–ª–µ–Ω–¥–∂
            await query.message.edit_text(
                format_challenge_info(challenge),
                reply_markup=get_challenge_actions_keyboard(challenge['challenge_id'])
            )
        else:
            await query.message.edit_text(
                "–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —á–µ–ª–ª–µ–Ω–¥–∂–µ–π.",
                reply_markup=get_categories_keyboard()
            )
    
    elif query.data.startswith("start_challenge_"):
        challenge_id = int(query.data.split("_")[2])
        await query.message.edit_text(
            "–°–Ω–∏–º–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤–∏–¥–µ–æ (–¥–æ 60 —Å–µ–∫—É–Ω–¥) –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ —Å—é–¥–∞:",
            reply_markup=get_main_menu_keyboard()
        )
        context.user_data['current_challenge'] = challenge_id
        return UserStates.SENDING_VIDEO
    
    elif query.data == "back_to_main":
        await query.message.edit_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=get_main_menu_keyboard()
        )
        return UserStates.MAIN_MENU

async def handle_video_submission(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ."""
    if not update.message.video:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ.",
            reply_markup=get_main_menu_keyboard()
        )
        return UserStates.SENDING_VIDEO
    
    video = update.message.video
    if not validate_video_duration(video.duration):
        await update.message.reply_text(
            "–í–∏–¥–µ–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 60 —Å–µ–∫—É–Ω–¥.",
            reply_markup=get_main_menu_keyboard()
        )
        return UserStates.SENDING_VIDEO
    
    challenge_id = context.user_data.get('current_challenge')
    if not challenge_id:
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —á–µ–ª–ª–µ–Ω–¥–∂ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=get_main_menu_keyboard()
        )
        return UserStates.MAIN_MENU
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –≤–∏–¥–µ–æ
    submission = {
        "user_id": update.effective_user.id,
        "challenge_id": challenge_id,
        "video_file_id": video.file_id,
        "status": "pending"
    }
    await db.create_submission(submission)
    
    await update.message.reply_text(
        "–í–∞—à–µ –≤–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é! –ú—ã —Å–æ–æ–±—â–∏–º –≤–∞–º –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ.",
        reply_markup=get_main_menu_keyboard()
    )
    return UserStates.MAIN_MENU

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    application = Application.builder().token(USER_BOT_TOKEN).build()
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            UserStates.ONBOARDING: [
                CallbackQueryHandler(handle_onboarding)
            ],
            UserStates.LANGUAGE_SELECTION: [
                CallbackQueryHandler(handle_language_selection)
            ],
            UserStates.MAIN_MENU: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_main_menu)
            ],
            UserStates.VIEWING_CHALLENGES: [
                CallbackQueryHandler(handle_challenge_selection)
            ],
            UserStates.SENDING_VIDEO: [
                MessageHandler(filters.VIDEO, handle_video_submission)
            ]
        },
        fallbacks=[CommandHandler('start', start)]
    )
    
    application.add_handler(conv_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main() 