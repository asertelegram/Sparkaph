import logging
from datetime import datetime, UTC
from typing import Dict, Any, Optional, List
from enum import Enum
from dataclasses import dataclass
from motor.motor_asyncio import AsyncIOMotorDatabase
from aiogram import Bot

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class NotificationType(Enum):
    # –°–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    SYSTEM = "system"
    WELCOME = "welcome"
    ERROR = "error"
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —á–µ–ª–ª–µ–Ω–¥–∂–∞—Ö
    CHALLENGE_NEW = "challenge_new"
    CHALLENGE_REMINDER = "challenge_reminder"
    CHALLENGE_COMPLETED = "challenge_completed"
    CHALLENGE_APPROVED = "challenge_approved"
    CHALLENGE_REJECTED = "challenge_rejected"
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö
    ACHIEVEMENT_UNLOCKED = "achievement_unlocked"
    ACHIEVEMENT_PROGRESS = "achievement_progress"
    ACHIEVEMENT_SEASONAL = "achievement_seasonal"
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
    LEVEL_UP = "level_up"
    POINTS_EARNED = "points_earned"
    STREAK_UPDATED = "streak_updated"
    RANK_CHANGED = "rank_changed"
    
    # –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    REFERRAL_JOINED = "referral_joined"
    SOCIAL_SHARE = "social_share"
    SOCIAL_LIKE = "social_like"
    SOCIAL_COMMENT = "social_comment"
    
    # –ë–æ–Ω—É—Å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    DAILY_BONUS = "daily_bonus"
    WEEKLY_BONUS = "weekly_bonus"
    SPECIAL_BONUS = "special_bonus"
    
    # –°–æ–±—ã—Ç–∏—è
    EVENT_STARTED = "event_started"
    EVENT_ENDING = "event_ending"
    EVENT_COMPLETED = "event_completed"
    
    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    REMINDER_DAILY = "reminder_daily"
    REMINDER_WEEKLY = "reminder_weekly"
    REMINDER_MONTHLY = "reminder_monthly"

@dataclass
class NotificationTemplate:
    type: NotificationType
    title: str
    message: str
    icon: str
    priority: int = 0
    requires_action: bool = False
    action_text: Optional[str] = None
    action_data: Optional[str] = None

class NotificationSystem:
    def __init__(self, db: AsyncIOMotorDatabase, bot: Bot):
        self.db = db
        self.bot = bot
        self.templates = self._load_templates()
    
    def _load_templates(self) -> Dict[NotificationType, NotificationTemplate]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        return {
            # –°–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            NotificationType.SYSTEM: NotificationTemplate(
                type=NotificationType.SYSTEM,
                title="–°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ",
                message="{message}",
                icon="üîî",
                priority=0
            ),
            NotificationType.WELCOME: NotificationTemplate(
                type=NotificationType.WELCOME,
                title="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
                message="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Sparkaph! –ù–∞—á–Ω–∏—Ç–µ —Å–≤–æ–π –ø—É—Ç—å –∫ –ª–∏—á–Ω–æ—Å—Ç–Ω–æ–º—É —Ä–æ—Å—Ç—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.",
                icon="üëã",
                priority=1
            ),
            NotificationType.ERROR: NotificationTemplate(
                type=NotificationType.ERROR,
                title="–û—à–∏–±–∫–∞",
                message="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {error}",
                icon="‚ùå",
                priority=2
            ),
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —á–µ–ª–ª–µ–Ω–¥–∂–∞—Ö
            NotificationType.CHALLENGE_NEW: NotificationTemplate(
                type=NotificationType.CHALLENGE_NEW,
                title="–ù–æ–≤—ã–π —á–µ–ª–ª–µ–Ω–¥–∂",
                message="–£ –≤–∞—Å –Ω–æ–≤—ã–π —á–µ–ª–ª–µ–Ω–¥–∂: {challenge_name}\n\n{challenge_description}",
                icon="üéØ",
                priority=1,
                requires_action=True,
                action_text="–ù–∞—á–∞—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂",
                action_data="start_challenge_{challenge_id}"
            ),
            NotificationType.CHALLENGE_REMINDER: NotificationTemplate(
                type=NotificationType.CHALLENGE_REMINDER,
                title="–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —á–µ–ª–ª–µ–Ω–¥–∂–µ",
                message="–ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂: {challenge_name}\n–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: {time_left}",
                icon="‚è∞",
                priority=1,
                requires_action=True,
                action_text="–í—ã–ø–æ–ª–Ω–∏—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂",
                action_data="complete_challenge_{challenge_id}"
            ),
            NotificationType.CHALLENGE_COMPLETED: NotificationTemplate(
                type=NotificationType.CHALLENGE_COMPLETED,
                title="–ß–µ–ª–ª–µ–Ω–¥–∂ –≤—ã–ø–æ–ª–Ω–µ–Ω",
                message="–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —á–µ–ª–ª–µ–Ω–¥–∂: {challenge_name}\n–ü–æ–ª—É—á–µ–Ω–æ –æ—á–∫–æ–≤: {points}",
                icon="‚úÖ",
                priority=1
            ),
            NotificationType.CHALLENGE_APPROVED: NotificationTemplate(
                type=NotificationType.CHALLENGE_APPROVED,
                title="–ß–µ–ª–ª–µ–Ω–¥–∂ –æ–¥–æ–±—Ä–µ–Ω",
                message="–í–∞—à —á–µ–ª–ª–µ–Ω–¥–∂ '{challenge_name}' –±—ã–ª –æ–¥–æ–±—Ä–µ–Ω!\n–ü–æ–ª—É—á–µ–Ω–æ –æ—á–∫–æ–≤: {points}",
                icon="üéâ",
                priority=1
            ),
            NotificationType.CHALLENGE_REJECTED: NotificationTemplate(
                type=NotificationType.CHALLENGE_REJECTED,
                title="–ß–µ–ª–ª–µ–Ω–¥–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω",
                message="–í–∞—à —á–µ–ª–ª–µ–Ω–¥–∂ '{challenge_name}' –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}",
                icon="‚ùå",
                priority=1
            ),
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö
            NotificationType.ACHIEVEMENT_UNLOCKED: NotificationTemplate(
                type=NotificationType.ACHIEVEMENT_UNLOCKED,
                title="–ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!",
                message="–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ:\n{achievement_name}\n{achievement_description}\n–ü–æ–ª—É—á–µ–Ω–æ –æ—á–∫–æ–≤: {points}",
                icon="üèÜ",
                priority=2
            ),
            NotificationType.ACHIEVEMENT_PROGRESS: NotificationTemplate(
                type=NotificationType.ACHIEVEMENT_PROGRESS,
                title="–ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è",
                message="–ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è '{achievement_name}':\n{progress}% ({current}/{required})",
                icon="üìä",
                priority=0
            ),
            NotificationType.ACHIEVEMENT_SEASONAL: NotificationTemplate(
                type=NotificationType.ACHIEVEMENT_SEASONAL,
                title="–°–µ–∑–æ–Ω–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ",
                message="–î–æ—Å—Ç—É–ø–Ω–æ –Ω–æ–≤–æ–µ —Å–µ–∑–æ–Ω–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ:\n{achievement_name}\n{achievement_description}\n–î–æ—Å—Ç—É–ø–Ω–æ –¥–æ: {expires_at}",
                icon="üéÑ",
                priority=1,
                requires_action=True,
                action_text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ",
                action_data="view_seasonal_{achievement_id}"
            ),
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
            NotificationType.LEVEL_UP: NotificationTemplate(
                type=NotificationType.LEVEL_UP,
                title="–ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å!",
                message="–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ {level} —É—Ä–æ–≤–Ω—è!\n–ü–æ–ª—É—á–µ–Ω–æ –±–æ–Ω—É—Å–æ–≤: {bonus}",
                icon="‚≠êÔ∏è",
                priority=2
            ),
            NotificationType.POINTS_EARNED: NotificationTemplate(
                type=NotificationType.POINTS_EARNED,
                title="–ü–æ–ª—É—á–µ–Ω—ã –æ—á–∫–∏",
                message="–í—ã –ø–æ–ª—É—á–∏–ª–∏ {points} –æ—á–∫–æ–≤!\n–ü—Ä–∏—á–∏–Ω–∞: {reason}",
                icon="üíé",
                priority=0
            ),
            NotificationType.STREAK_UPDATED: NotificationTemplate(
                type=NotificationType.STREAK_UPDATED,
                title="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–∏–∏",
                message="–í–∞—à–∞ —Å–µ—Ä–∏—è: {streak} –¥–Ω–µ–π\n–ü–æ–ª—É—á–µ–Ω–æ –±–æ–Ω—É—Å–æ–≤: {bonus}",
                icon="üî•",
                priority=1
            ),
            NotificationType.RANK_CHANGED: NotificationTemplate(
                type=NotificationType.RANK_CHANGED,
                title="–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–Ω–≥–∞",
                message="–í–∞—à –Ω–æ–≤—ã–π —Ä–∞–Ω–≥: {rank}\n–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!",
                icon="üëë",
                priority=1
            ),
            
            # –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            NotificationType.REFERRAL_JOINED: NotificationTemplate(
                type=NotificationType.REFERRAL_JOINED,
                title="–ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª",
                message="–ö –≤–∞–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª: {username}\n–ü–æ–ª—É—á–µ–Ω–æ –±–æ–Ω—É—Å–æ–≤: {bonus}",
                icon="üë•",
                priority=1
            ),
            NotificationType.SOCIAL_SHARE: NotificationTemplate(
                type=NotificationType.SOCIAL_SHARE,
                title="–ü–æ–¥–µ–ª–∏–ª–∏—Å—å –≤–∞—à–∏–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º",
                message="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –ø–æ–¥–µ–ª–∏–ª—Å—è –≤–∞—à–∏–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º!\n–ü–æ–ª—É—á–µ–Ω–æ –æ—á–∫–æ–≤: {points}",
                icon="üì±",
                priority=0
            ),
            NotificationType.SOCIAL_LIKE: NotificationTemplate(
                type=NotificationType.SOCIAL_LIKE,
                title="–ù–æ–≤—ã–π –ª–∞–π–∫",
                message="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –æ—Ü–µ–Ω–∏–ª –≤–∞—à –∫–æ–Ω—Ç–µ–Ω—Ç!",
                icon="‚ù§Ô∏è",
                priority=0
            ),
            NotificationType.SOCIAL_COMMENT: NotificationTemplate(
                type=NotificationType.SOCIAL_COMMENT,
                title="–ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
                message="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–ª –≤–∞—à –∫–æ–Ω—Ç–µ–Ω—Ç:\n{comment}",
                icon="üí¨",
                priority=0
            ),
            
            # –ë–æ–Ω—É—Å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            NotificationType.DAILY_BONUS: NotificationTemplate(
                type=NotificationType.DAILY_BONUS,
                title="–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å",
                message="–í–∞—à –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å: {bonus}\n–ó–∞—Ö–æ–¥–∏—Ç–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å!",
                icon="üéÅ",
                priority=1,
                requires_action=True,
                action_text="–ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å",
                action_data="claim_daily_bonus"
            ),
            NotificationType.WEEKLY_BONUS: NotificationTemplate(
                type=NotificationType.WEEKLY_BONUS,
                title="–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –±–æ–Ω—É—Å",
                message="–í–∞—à –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –±–æ–Ω—É—Å: {bonus}\n–°–ø–∞—Å–∏–±–æ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!",
                icon="üéÅ",
                priority=1,
                requires_action=True,
                action_text="–ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å",
                action_data="claim_weekly_bonus"
            ),
            NotificationType.SPECIAL_BONUS: NotificationTemplate(
                type=NotificationType.SPECIAL_BONUS,
                title="–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å",
                message="–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å: {bonus}\n{description}",
                icon="üéÅ",
                priority=2,
                requires_action=True,
                action_text="–ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å",
                action_data="claim_special_bonus_{bonus_id}"
            ),
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏—è—Ö
            NotificationType.EVENT_STARTED: NotificationTemplate(
                type=NotificationType.EVENT_STARTED,
                title="–ù–∞—á–∞–ª–æ —Å–æ–±—ã—Ç–∏—è",
                message="–ù–∞—á–∞–ª–æ—Å—å –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ: {event_name}\n{event_description}\n–î–æ—Å—Ç—É–ø–Ω–æ –¥–æ: {ends_at}",
                icon="üéâ",
                priority=2,
                requires_action=True,
                action_text="–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å",
                action_data="join_event_{event_id}"
            ),
            NotificationType.EVENT_ENDING: NotificationTemplate(
                type=NotificationType.EVENT_ENDING,
                title="–°–æ–±—ã—Ç–∏–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è",
                message="–°–æ–±—ã—Ç–∏–µ '{event_name}' –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ {time_left}!\n–£—Å–ø–µ–π—Ç–µ –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ!",
                icon="‚è∞",
                priority=1,
                requires_action=True,
                action_text="–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å",
                action_data="join_event_{event_id}"
            ),
            NotificationType.EVENT_COMPLETED: NotificationTemplate(
                type=NotificationType.EVENT_COMPLETED,
                title="–°–æ–±—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ",
                message="–°–æ–±—ã—Ç–∏–µ '{event_name}' –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}\n–ü–æ–ª—É—á–µ–Ω–æ –Ω–∞–≥—Ä–∞–¥: {rewards}",
                icon="üéâ",
                priority=1
            ),
            
            # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            NotificationType.REMINDER_DAILY: NotificationTemplate(
                type=NotificationType.REMINDER_DAILY,
                title="–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ",
                message="–ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è!\n–î–æ—Å—Ç—É–ø–Ω–æ –±–æ–Ω—É—Å–æ–≤: {bonus}",
                icon="üìÖ",
                priority=0,
                requires_action=True,
                action_text="–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è",
                action_data="show_daily_tasks"
            ),
            NotificationType.REMINDER_WEEKLY: NotificationTemplate(
                type=NotificationType.REMINDER_WEEKLY,
                title="–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ",
                message="–ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è!\n–î–æ—Å—Ç—É–ø–Ω–æ –±–æ–Ω—É—Å–æ–≤: {bonus}",
                icon="üìÖ",
                priority=0,
                requires_action=True,
                action_text="–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è",
                action_data="show_weekly_tasks"
            ),
            NotificationType.REMINDER_MONTHLY: NotificationTemplate(
                type=NotificationType.REMINDER_MONTHLY,
                title="–ï–∂–µ–º–µ—Å—è—á–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ",
                message="–ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –µ–∂–µ–º–µ—Å—è—á–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è!\n–î–æ—Å—Ç—É–ø–Ω–æ –±–æ–Ω—É—Å–æ–≤: {bonus}",
                icon="üìÖ",
                priority=0,
                requires_action=True,
                action_text="–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è",
                action_data="show_monthly_tasks"
            )
        }
    
    async def send_notification(
        self,
        user_id: int,
        notification_type: NotificationType,
        data: Dict[str, Any] = None,
        priority: Optional[int] = None
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await self.db.users.find_one({"user_id": user_id})
            if not user:
                return False
            
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
            if user.get("notifications_disabled", False):
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            template = self.templates.get(notification_type)
            if not template:
                logger.error(f"–®–∞–±–ª–æ–Ω —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω: {notification_type}")
                return False
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = template.message.format(**(data or {}))
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–µ–π—Å—Ç–≤–∏–µ
            keyboard = None
            if template.requires_action and template.action_text and template.action_data:
                from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
                action_data = template.action_data.format(**(data or {}))
                keyboard = InlineKeyboardMarkup().add(
                    InlineKeyboardButton(text=template.action_text, callback_data=action_data)
                )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await self.bot.send_message(
                user_id,
                f"{template.icon} {template.title}\n\n{message}",
                reply_markup=keyboard
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–∞–∑—É
            await self.db.notifications.insert_one({
                "user_id": user_id,
                "type": notification_type.value,
                "title": template.title,
                "message": message,
                "data": data,
                "priority": priority or template.priority,
                "sent_at": datetime.now(UTC)
            })
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False
    
    async def send_bulk_notification(
        self,
        user_ids: List[int],
        notification_type: NotificationType,
        data: Dict[str, Any] = None,
        priority: Optional[int] = None
    ) -> Dict[int, bool]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        results = {}
        for user_id in user_ids:
            results[user_id] = await self.send_notification(user_id, notification_type, data, priority)
        return results
    
    async def get_user_notifications(
        self,
        user_id: int,
        limit: int = 10,
        offset: int = 0,
        notification_type: Optional[NotificationType] = None
    ) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        query = {"user_id": user_id}
        if notification_type:
            query["type"] = notification_type.value
        
        return await self.db.notifications.find(query).sort("sent_at", -1).skip(offset).limit(limit).to_list(length=None)
    
    async def mark_notification_as_read(self, notification_id: str) -> bool:
        """–û—Ç–º–µ—Ç–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ"""
        try:
            await self.db.notifications.update_one(
                {"_id": notification_id},
                {"$set": {"read": True, "read_at": datetime.now(UTC)}}
            )
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ: {e}")
            return False
    
    async def delete_notification(self, notification_id: str) -> bool:
        """–£–¥–∞–ª–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        try:
            await self.db.notifications.delete_one({"_id": notification_id})
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False
    
    async def clear_user_notifications(self, user_id: int) -> bool:
        """–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            await self.db.notifications.delete_many({"user_id": user_id})
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return False
    
    async def get_unread_count(self, user_id: int) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        return await self.db.notifications.count_documents({
            "user_id": user_id,
            "read": {"$ne": True}
        })
    
    async def get_notification_stats(self, user_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        total = await self.db.notifications.count_documents({"user_id": user_id})
        unread = await self.db.notifications.count_documents({
            "user_id": user_id,
            "read": {"$ne": True}
        })
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ —Ç–∏–ø–∞–º
        pipeline = [
            {"$match": {"user_id": user_id}},
            {"$group": {"_id": "$type", "count": {"$sum": 1}}}
        ]
        type_stats = await self.db.notifications.aggregate(pipeline).to_list(length=None)
        
        return {
            "total": total,
            "unread": unread,
            "read": total - unread,
            "by_type": {stat["_id"]: stat["count"] for stat in type_stats}
        } 