import pytest
from datetime import datetime, timedelta
from models import User
from achievements import Achievement, AchievementSystem

@pytest.fixture
def achievement_system():
    return AchievementSystem()

@pytest.fixture
def new_user():
    return User(
        user_id=123456789,
        username="test_user",
        points=0,
        level=1,
        completed_challenges=[],
        referrals=[],
        registration_date=datetime.utcnow(),
        achievements=[],
        streak=0
    )

@pytest.fixture
def experienced_user():
    return User(
        user_id=987654321,
        username="experienced_user",
        points=500,
        level=5,
        completed_challenges=["challenge1", "challenge2", "challenge3"],
        referrals=[111111111, 222222222],
        registration_date=datetime.utcnow() - timedelta(days=30),
        achievements=["first_challenge", "streak_3"],
        streak=5
    )

def test_achievement_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
    achievement = Achievement(
        id="test_achievement",
        name="Test Achievement",
        description="Test Description",
        points=10,
        condition=lambda user: True,
        icon="üéØ"
    )
    
    assert achievement.id == "test_achievement"
    assert achievement.name == "Test Achievement"
    assert achievement.description == "Test Description"
    assert achievement.points == 10
    assert achievement.icon == "üéØ"

def test_achievement_system_initialization(achievement_system):
    """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
    assert len(achievement_system.achievements) > 0
    assert "first_challenge" in achievement_system.achievements
    assert "challenge_master" in achievement_system.achievements
    assert "streak_3" in achievement_system.achievements

@pytest.mark.asyncio
async def test_check_achievements_new_user(achievement_system, new_user):
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    new_achievements = await achievement_system.check_achievements(new_user)
    assert len(new_achievements) == 0

@pytest.mark.asyncio
async def test_check_achievements_first_challenge(achievement_system, new_user):
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –ø–µ—Ä–≤—ã–π —á–µ–ª–ª–µ–Ω–¥–∂"""
    new_user.completed_challenges = ["challenge1"]
    new_achievements = await achievement_system.check_achievements(new_user)
    
    assert len(new_achievements) == 1
    assert new_achievements[0].id == "first_challenge"
    assert new_user.points == 5  # –û—á–∫–∏ –∑–∞ –ø–µ—Ä–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ

@pytest.mark.asyncio
async def test_check_achievements_streak(achievement_system, new_user):
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∑–∞ —Å–µ—Ä–∏—é –¥–Ω–µ–π"""
    new_user.streak = 3
    new_achievements = await achievement_system.check_achievements(new_user)
    
    assert len(new_achievements) == 1
    assert new_achievements[0].id == "streak_3"
    assert new_user.points == 10  # –û—á–∫–∏ –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Å–µ—Ä–∏–∏

@pytest.mark.asyncio
async def test_check_achievements_multiple(achievement_system, experienced_user):
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ"""
    experienced_user.points = 1000
    experienced_user.streak = 7
    new_achievements = await achievement_system.check_achievements(experienced_user)
    
    assert len(new_achievements) >= 2
    achievement_ids = [a.id for a in new_achievements]
    assert "points_1000" in achievement_ids
    assert "streak_7" in achievement_ids

def test_get_achievement(achievement_system):
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ ID"""
    achievement = achievement_system.get_achievement("first_challenge")
    assert achievement is not None
    assert achievement.id == "first_challenge"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    achievement = achievement_system.get_achievement("non_existent")
    assert achievement is None

def test_get_all_achievements(achievement_system):
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
    achievements = achievement_system.get_all_achievements()
    assert len(achievements) > 0
    assert all(isinstance(a, Achievement) for a in achievements)

def test_get_user_achievements(achievement_system, experienced_user):
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_achievements = achievement_system.get_user_achievements(experienced_user)
    assert len(user_achievements) == 2
    assert all(a.id in experienced_user.achievements for a in user_achievements)

def test_format_achievement(achievement_system):
    """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
    achievement = achievement_system.get_achievement("first_challenge")
    formatted = achievement_system.format_achievement(achievement)
    
    assert achievement.name in formatted
    assert achievement.description in formatted
    assert str(achievement.points) in formatted
    assert achievement.icon in formatted

def test_format_achievements_list(achievement_system, experienced_user):
    """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
    user_achievements = achievement_system.get_user_achievements(experienced_user)
    formatted = achievement_system.format_achievements_list(user_achievements)
    
    assert len(formatted.split("\n\n")) == len(user_achievements)
    for achievement in user_achievements:
        assert achievement.name in formatted
        assert achievement.description in formatted

def test_empty_achievements_list(achievement_system):
    """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
    formatted = achievement_system.format_achievements_list([])
    assert formatted == "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π" 