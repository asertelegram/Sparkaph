import os
import logging
from datetime import datetime, UTC, timedelta
from typing import Optional, List, Dict
from bson import ObjectId
import json
from pytz import UTC

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from motor.motor_asyncio import AsyncIOMotorClient
from dotenv import load_dotenv
from pymongo import MongoClient

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("INFLUENCER_BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("INFLUENCER_BOT_TOKEN –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ .env —Ñ–∞–π–ª–µ")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
MONGODB_URI = os.getenv("MONGODB_URI", "mongodb://localhost:27017")

# –ö–ª–∞—Å—Å-–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
class MockDatabase:
    def __init__(self):
        self.collections = {}
    
    def __getattr__(self, name):
        if name not in self.collections:
            self.collections[name] = MockCollection()
        return self.collections[name]

class MockCollection:
    async def find_one(self, *args, **kwargs):
        return None
    
    async def find(self, *args, **kwargs):
        return []
    
    async def count_documents(self, *args, **kwargs):
        return 0
    
    async def insert_one(self, *args, **kwargs):
        return None
    
    async def update_one(self, *args, **kwargs):
        return None
    
    async def delete_one(self, *args, **kwargs):
        return None
    
    async def create_index(self, *args, **kwargs):
        return None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MongoDB –∫–ª–∏–µ–Ω—Ç–∞
try:
    client = AsyncIOMotorClient(MONGODB_URI)
    db = client["Sparkaph"]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã
    logger.info("MongoDB –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db = MockDatabase()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class InfluencerStates(StatesGroup):
    waiting_for_challenge_text = State()
    waiting_for_challenge_type = State()
    waiting_for_challenge_description = State()
    waiting_for_edit_text = State()
    waiting_for_edit_description = State()
    waiting_for_challenge_id = State()
    waiting_for_schedule_date = State()
    waiting_for_schedule_time = State()
    waiting_for_archive_reason = State()
    waiting_for_template_name = State()
    waiting_for_template_text = State()
    waiting_for_template_type = State()
    waiting_for_template_description = State()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–æ–º
async def is_influencer(user_id: int) -> bool:
    """Check if user is an influencer"""
    influencer = await db.influencers.find_one({"user_id": user_id})
    return bool(influencer)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: Message):
    try:
        user_id = message.from_user.id
        username = message.from_user.username or "Unknown"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–æ–º
        if not await is_influencer(user_id):
            await message.answer(
                "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.\n"
                "–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–æ–≤."
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–µ
        influencer = await db.influencers.find_one({"user_id": user_id})
        category = await db.categories.find_one({"_id": influencer["category_id"]})
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        challenges_count = await db.challenges.count_documents({"category_id": influencer["category_id"]})
        completed_count = await db.submissions.count_documents({
            "challenge_id": {"$in": [c["_id"] async for c in db.challenges.find({"category_id": influencer["category_id"]})]},
            "status": "approved"
        })
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        week_ago = datetime.now(UTC) - timedelta(days=7)
        weekly_completed = await db.submissions.count_documents({
            "challenge_id": {"$in": [c["_id"] async for c in db.challenges.find({"category_id": influencer["category_id"]})]},
            "status": "approved",
            "submitted_at": {"$gte": week_ago}
        })
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        active_users = await db.users.count_documents({
            "last_activity": {"$gte": week_ago}
        })
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        submissions = await db.submissions.find({
            "challenge_id": {"$in": [c["_id"] async for c in db.challenges.find({"category_id": influencer["category_id"]})]},
            "status": "approved",
            "submitted_at": {"$gte": week_ago}
        }).to_list(length=None)
        
        avg_completion_time = 0
        if submissions:
            completion_times = []
            for submission in submissions:
                if submission.get("submitted_at") and submission.get("challenge_id"):
                    challenge = await db.challenges.find_one({"_id": submission["challenge_id"]})
                    if challenge and challenge.get("created_at"):
                        time_diff = (submission["submitted_at"] - challenge["created_at"]).total_seconds() / 3600
                        completion_times.append(time_diff)
            if completion_times:
                avg_completion_time = sum(completion_times) / len(completion_times)
        
        welcome_text = (
            f"üëã –ü—Ä–∏–≤–µ—Ç, {username}!\n\n"
            f"–í—ã —É–ø—Ä–∞–≤–ª—è–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π: {category['name']}\n\n"
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞—à–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n"
            f"‚Ä¢ –í—Å–µ–≥–æ —á–µ–ª–ª–µ–Ω–¥–∂–µ–π: {challenges_count}\n"
            f"‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed_count}\n"
            f"‚Ä¢ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é: {weekly_completed}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {active_users}\n"
            f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {avg_completion_time:.1f} —á–∞—Å–æ–≤\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:"
        )
        
        keyboard = types.ReplyKeyboardMarkup(
            keyboard=[
                [types.KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂"), types.KeyboardButton(text="üìã –ú–æ–∏ —á–µ–ª–ª–µ–Ω–¥–∂–∏")],
                [types.KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), types.KeyboardButton(text="üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ")],
                [types.KeyboardButton(text="üìù –®–∞–±–ª–æ–Ω—ã"), types.KeyboardButton(text="‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ–ª–ª–µ–Ω–¥–∂–∞–º–∏")],
                [types.KeyboardButton(text="üéØ –ß–µ–ª–ª–µ–Ω–¥–∂ –Ω–µ–¥–µ–ª–∏"), types.KeyboardButton(text="üì± –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")]
            ],
            resize_keyboard=True
        )
        
        await message.answer(welcome_text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ start: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–µ–ª–ª–µ–Ω–¥–∂–∞
@dp.message(lambda m: m.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂")
async def add_challenge(message: Message, state: FSMContext):
    try:
        user_id = message.from_user.id
        
        if not await is_influencer(user_id):
            return
        
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —á–µ–ª–ª–µ–Ω–¥–∂–∞:\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: '–°–¥–µ–ª–∞–π 50 –æ—Ç–∂–∏–º–∞–Ω–∏–π'"
        )
        await state.set_state(InfluencerStates.waiting_for_challenge_text)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —á–µ–ª–ª–µ–Ω–¥–∂–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ —á–µ–ª–ª–µ–Ω–¥–∂–∞
@dp.message(InfluencerStates.waiting_for_challenge_text)
async def process_challenge_text(message: Message, state: FSMContext):
    try:
        await state.update_data(challenge_text=message.text)
        
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="üì∏ –§–æ—Ç–æ", callback_data="type_photo"),
                    InlineKeyboardButton(text="üé• –í–∏–¥–µ–æ", callback_data="type_video")
                ],
                [InlineKeyboardButton(text="üìù –¢–µ–∫—Å—Ç", callback_data="type_text")]
            ]
        )
        
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —á–µ–ª–ª–µ–Ω–¥–∂–∞:",
            reply_markup=keyboard
        )
        await state.set_state(InfluencerStates.waiting_for_challenge_type)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞ —á–µ–ª–ª–µ–Ω–¥–∂–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —á–µ–ª–ª–µ–Ω–¥–∂–∞
@dp.message(InfluencerStates.waiting_for_challenge_type)
async def process_challenge_type(message: Message, state: FSMContext):
    try:
        challenge_type = message.text.split("_")[1]
        await state.update_data(challenge_type=challenge_type)
        
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —á–µ–ª–ª–µ–Ω–¥–∂–∞:\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: '–°–¥–µ–ª–∞–π —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è'"
        )
        await state.set_state(InfluencerStates.waiting_for_challenge_description)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–∏–ø–∞ —á–µ–ª–ª–µ–Ω–¥–∂–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è —á–µ–ª–ª–µ–Ω–¥–∂–∞
@dp.message(InfluencerStates.waiting_for_challenge_description)
async def process_challenge_description(message: Message, state: FSMContext):
    try:
        user_id = message.from_user.id
        data = await state.get_data()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–µ
        influencer = await db.influencers.find_one({"user_id": user_id})
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–µ–ª–ª–µ–Ω–¥–∂
        new_challenge = {
            "text": data["challenge_text"],
            "description": message.text,
            "type": data["challenge_type"],
            "category_id": influencer["category_id"],
            "created_by": user_id,
            "created_at": datetime.now(UTC),
            "is_active": True
        }
        
        result = await db.challenges.insert_one(new_challenge)
        
        await message.answer(
            "‚úÖ –ß–µ–ª–ª–µ–Ω–¥–∂ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
            f"–¢–µ–∫—Å—Ç: {data['challenge_text']}\n"
            f"–¢–∏–ø: {data['challenge_type']}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {message.text}"
        )
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–∏—Å–∞–Ω–∏—è —á–µ–ª–ª–µ–Ω–¥–∂–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–≤–æ–∏—Ö —á–µ–ª–ª–µ–Ω–¥–∂–µ–π
@dp.message(lambda m: m.text == "üìã –ú–æ–∏ —á–µ–ª–ª–µ–Ω–¥–∂–∏")
async def show_my_challenges(message: Message):
    try:
        user_id = message.from_user.id
        
        if not await is_influencer(user_id):
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–µ
        influencer = await db.influencers.find_one({"user_id": user_id})
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏ –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–∞
        challenges = await db.challenges.find(
            {"category_id": influencer["category_id"]}
        ).sort("created_at", -1).to_list(length=None)
        
        if not challenges:
            await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —á–µ–ª–ª–µ–Ω–¥–∂–µ–π.")
            return
        
        text = "üìã –í–∞—à–∏ —á–µ–ª–ª–µ–Ω–¥–∂–∏:\n\n"
        
        for i, challenge in enumerate(challenges, 1):
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            completed_count = await db.submissions.count_documents({
                "challenge_id": challenge["_id"],
                "status": "approved"
            })
            
            text += (
                f"{i}. {challenge['text']}\n"
                f"   –¢–∏–ø: {challenge['type']}\n"
                f"   –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed_count} —Ä–∞–∑\n"
                f"   –î–æ–±–∞–≤–ª–µ–Ω: {challenge['created_at'].strftime('%d.%m.%Y')}\n\n"
            )
        
        await message.answer(text)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —á–µ–ª–ª–µ–Ω–¥–∂–µ–π: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–µ–ª–ª–µ–Ω–¥–∂–∞–º–∏
@dp.message(lambda m: m.text == "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ–ª–ª–µ–Ω–¥–∂–∞–º–∏")
async def manage_challenges(message: Message):
    try:
        user_id = message.from_user.id
        
        if not await is_influencer(user_id):
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–µ
        influencer = await db.influencers.find_one({"user_id": user_id})
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏ –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–∞
        challenges = await db.challenges.find(
            {"category_id": influencer["category_id"]}
        ).sort("created_at", -1).to_list(length=None)
        
        if not challenges:
            await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —á–µ–ª–ª–µ–Ω–¥–∂–µ–π.")
            return
        
        text = "üìã –í—ã–±–µ—Ä–∏—Ç–µ —á–µ–ª–ª–µ–Ω–¥–∂ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:\n\n"
        
        keyboard = []
        for challenge in challenges:
            completed_count = await db.submissions.count_documents({
                "challenge_id": challenge["_id"],
                "status": "approved"
            })
            
            status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if challenge.get("is_active", True) else "üì¶ –í –∞—Ä—Ö–∏–≤–µ"
            if challenge.get("scheduled_for"):
                status = f"üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {challenge['scheduled_for'].strftime('%d.%m.%Y %H:%M')}"
            
            text += (
                f"‚Ä¢ {challenge['text']}\n"
                f"  –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed_count} —Ä–∞–∑\n"
                f"  –°—Ç–∞—Ç—É—Å: {status}\n\n"
            )
            
            keyboard.append([
                InlineKeyboardButton(
                    text=f"‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å '{challenge['text'][:20]}...'",
                    callback_data=f"edit_{challenge['_id']}"
                )
            ])
            keyboard.append([
                InlineKeyboardButton(
                    text=f"‚ùå –£–¥–∞–ª–∏—Ç—å '{challenge['text'][:20]}...'",
                    callback_data=f"delete_{challenge['_id']}"
                )
            ])
            keyboard.append([
                InlineKeyboardButton(
                    text=f"üì¶ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å '{challenge['text'][:20]}...'",
                    callback_data=f"archive_{challenge['_id']}"
                )
            ])
            keyboard.append([
                InlineKeyboardButton(
                    text=f"üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å '{challenge['text'][:20]}...'",
                    callback_data=f"schedule_{challenge['_id']}"
                )
            ])
        
        await message.answer(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —á–µ–ª–ª–µ–Ω–¥–∂–∞–º–∏: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ–ª–ª–µ–Ω–¥–∂–∞
@dp.callback_query(lambda c: c.data.startswith("edit_"))
async def edit_challenge(callback: CallbackQuery, state: FSMContext):
    try:
        challenge_id = callback.data.split("_")[1]
        challenge = await db.challenges.find_one({"_id": ObjectId(challenge_id)})
        
        if not challenge:
            await callback.answer("–ß–µ–ª–ª–µ–Ω–¥–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        await state.update_data(editing_challenge_id=challenge_id)
        
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="edit_text"),
                    InlineKeyboardButton(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit_description")
                ],
                [InlineKeyboardButton(text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Ç–∏–ø", callback_data="edit_type")]
            ]
        )
        
        await callback.message.edit_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤ —á–µ–ª–ª–µ–Ω–¥–∂–µ:\n\n"
            f"–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç: {challenge['text']}\n"
            f"–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {challenge['description']}\n"
            f"–¢–µ–∫—É—â–∏–π —Ç–∏–ø: {challenge['type']}",
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —á–µ–ª–ª–µ–Ω–¥–∂–∞: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —á–µ–ª–ª–µ–Ω–¥–∂–∞
@dp.callback_query(lambda c: c.data == "edit_text")
async def edit_challenge_text(callback: CallbackQuery, state: FSMContext):
    try:
        await state.set_state(InfluencerStates.waiting_for_edit_text)
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —á–µ–ª–ª–µ–Ω–¥–∂–∞:"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ —á–µ–ª–ª–µ–Ω–¥–∂–∞: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —á–µ–ª–ª–µ–Ω–¥–∂–∞
@dp.message(InfluencerStates.waiting_for_edit_text)
async def process_edit_text(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        challenge_id = data.get("editing_challenge_id")
        
        if not challenge_id:
            await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID —á–µ–ª–ª–µ–Ω–¥–∂–∞")
            await state.clear()
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —á–µ–ª–ª–µ–Ω–¥–∂–∞
        await db.challenges.update_one(
            {"_id": ObjectId(challenge_id)},
            {"$set": {"text": message.text}}
        )
        
        await message.answer("‚úÖ –¢–µ–∫—Å—Ç —á–µ–ª–ª–µ–Ω–¥–∂–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —á–µ–ª–ª–µ–Ω–¥–∂–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è —á–µ–ª–ª–µ–Ω–¥–∂–∞
@dp.callback_query(lambda c: c.data == "edit_description")
async def edit_challenge_description(callback: CallbackQuery, state: FSMContext):
    try:
        await state.set_state(InfluencerStates.waiting_for_edit_description)
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —á–µ–ª–ª–µ–Ω–¥–∂–∞:"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è —á–µ–ª–ª–µ–Ω–¥–∂–∞: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —á–µ–ª–ª–µ–Ω–¥–∂–∞
@dp.message(InfluencerStates.waiting_for_edit_description)
async def process_edit_description(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        challenge_id = data.get("editing_challenge_id")
        
        if not challenge_id:
            await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID —á–µ–ª–ª–µ–Ω–¥–∂–∞")
            await state.clear()
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —á–µ–ª–ª–µ–Ω–¥–∂–∞
        await db.challenges.update_one(
            {"_id": ObjectId(challenge_id)},
            {"$set": {"description": message.text}}
        )
        
        await message.answer("‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —á–µ–ª–ª–µ–Ω–¥–∂–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —á–µ–ª–ª–µ–Ω–¥–∂–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∏–ø–∞ —á–µ–ª–ª–µ–Ω–¥–∂–∞
@dp.callback_query(lambda c: c.data == "edit_type")
async def edit_challenge_type(callback: CallbackQuery, state: FSMContext):
    try:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="üì∏ –§–æ—Ç–æ", callback_data="edit_type_photo"),
                    InlineKeyboardButton(text="üé• –í–∏–¥–µ–æ", callback_data="edit_type_video")
                ],
                [InlineKeyboardButton(text="üìù –¢–µ–∫—Å—Ç", callback_data="edit_type_text")]
            ]
        )
        
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —á–µ–ª–ª–µ–Ω–¥–∂–∞:",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–∏–ø–∞ —á–µ–ª–ª–µ–Ω–¥–∂–∞: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–≥–æ —Ç–∏–ø–∞ —á–µ–ª–ª–µ–Ω–¥–∂–∞
@dp.callback_query(lambda c: c.data.startswith("edit_type_"))
async def process_edit_type(callback: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        challenge_id = data.get("editing_challenge_id")
        
        if not challenge_id:
            await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID —á–µ–ª–ª–µ–Ω–¥–∂–∞")
            await state.clear()
            return
        
        new_type = callback.data.split("_")[2]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–ø —á–µ–ª–ª–µ–Ω–¥–∂–∞
        await db.challenges.update_one(
            {"_id": ObjectId(challenge_id)},
            {"$set": {"type": new_type}}
        )
        
        await callback.message.edit_text("‚úÖ –¢–∏–ø —á–µ–ª–ª–µ–Ω–¥–∂–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–≤–æ–≥–æ —Ç–∏–ø–∞ —á–µ–ª–ª–µ–Ω–¥–∂–∞: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —á–µ–ª–ª–µ–Ω–¥–∂–∞
@dp.callback_query(lambda c: c.data.startswith("delete_"))
async def delete_challenge(callback: CallbackQuery):
    try:
        challenge_id = callback.data.split("_")[1]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        active_submissions = await db.submissions.count_documents({
            "challenge_id": ObjectId(challenge_id),
            "status": "pending"
        })
        
        if active_submissions > 0:
            await callback.answer(
                "–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂, –ø–æ–∫–∞ –µ—Å—Ç—å –æ–∂–∏–¥–∞—é—â–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
                show_alert=True
            )
            return
        
        # –£–¥–∞–ª—è–µ–º —á–µ–ª–ª–µ–Ω–¥–∂
        await db.challenges.delete_one({"_id": ObjectId(challenge_id)})
        
        await callback.message.edit_text("‚úÖ –ß–µ–ª–ª–µ–Ω–¥–∂ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —á–µ–ª–ª–µ–Ω–¥–∂–∞: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ–ª–ª–µ–Ω–¥–∂–∞
@dp.callback_query(lambda c: c.data.startswith("archive_"))
async def archive_challenge(callback: CallbackQuery, state: FSMContext):
    try:
        challenge_id = callback.data.split("_")[1]
        challenge = await db.challenges.find_one({"_id": ObjectId(challenge_id)})
        
        if not challenge:
            await callback.answer("–ß–µ–ª–ª–µ–Ω–¥–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        await state.update_data(archiving_challenge_id=challenge_id)
        await state.set_state(InfluencerStates.waiting_for_archive_reason)
        
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ–ª–ª–µ–Ω–¥–∂–∞:"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–∏ —á–µ–ª–ª–µ–Ω–¥–∂–∞: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø—Ä–∏—á–∏–Ω—ã –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.message(InfluencerStates.waiting_for_archive_reason)
async def process_archive_reason(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        challenge_id = data["archiving_challenge_id"]
        
        # –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º —á–µ–ª–ª–µ–Ω–¥–∂
        await db.challenges.update_one(
            {"_id": ObjectId(challenge_id)},
            {
                "$set": {
                    "is_active": False,
                    "archived_at": datetime.now(UTC),
                    "archive_reason": message.text
                }
            }
        )
        
        await message.answer("‚úÖ –ß–µ–ª–ª–µ–Ω–¥–∂ —É—Å–ø–µ—à–Ω–æ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω!")
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–∏—á–∏–Ω—ã –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ–ª–ª–µ–Ω–¥–∂–∞
@dp.callback_query(lambda c: c.data.startswith("schedule_"))
async def schedule_challenge(callback: CallbackQuery, state: FSMContext):
    try:
        challenge_id = callback.data.split("_")[1]
        challenge = await db.challenges.find_one({"_id": ObjectId(challenge_id)})
        
        if not challenge:
            await callback.answer("–ß–µ–ª–ª–µ–Ω–¥–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        await state.update_data(scheduling_challenge_id=challenge_id)
        await state.set_state(InfluencerStates.waiting_for_schedule_date)
        
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —á–µ–ª–ª–µ–Ω–¥–∂–∞: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.message(InfluencerStates.waiting_for_schedule_date)
async def process_schedule_date(message: Message, state: FSMContext):
    try:
        try:
            date = datetime.strptime(message.text, "%d.%m.%Y")
            if date < datetime.now():
                await message.answer("–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return
        except ValueError:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì:")
            return
        
        await state.update_data(schedule_date=date)
        await state.set_state(InfluencerStates.waiting_for_schedule_time)
        
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.message(InfluencerStates.waiting_for_schedule_time)
async def process_schedule_time(message: Message, state: FSMContext):
    try:
        try:
            time = datetime.strptime(message.text, "%H:%M").time()
        except ValueError:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú:")
            return
        
        data = await state.get_data()
        date = data["schedule_date"]
        scheduled_datetime = datetime.combine(date.date(), time)
        
        if scheduled_datetime < datetime.now():
            await message.answer("–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —á–µ–ª–ª–µ–Ω–¥–∂
        await db.challenges.update_one(
            {"_id": ObjectId(data["scheduling_challenge_id"])},
            {
                "$set": {
                    "scheduled_for": scheduled_datetime,
                    "is_active": False
                }
            }
        )
        
        await message.answer(
            f"‚úÖ –ß–µ–ª–ª–µ–Ω–¥–∂ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {scheduled_datetime.strftime('%d.%m.%Y %H:%M')}!"
        )
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–µ–ª–ª–µ–Ω–¥–∂–µ–π
@dp.message(lambda m: m.text == "üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ")
async def show_scheduled_challenges(message: Message):
    try:
        user_id = message.from_user.id
        
        if not await is_influencer(user_id):
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–µ
        influencer = await db.influencers.find_one({"user_id": user_id})
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏
        challenges = await db.challenges.find({
            "category_id": influencer["category_id"],
            "scheduled_for": {"$exists": True, "$ne": None},
            "scheduled_for": {"$gt": datetime.now(UTC)}
        }).sort("scheduled_for", 1).to_list(length=None)
        
        if not challenges:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–µ–ª–ª–µ–Ω–¥–∂–µ–π.")
            return
        
        text = "üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏:\n\n"
        
        for i, challenge in enumerate(challenges, 1):
            text += (
                f"{i}. {challenge['text']}\n"
                f"   –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞: {challenge['scheduled_for'].strftime('%d.%m.%Y %H:%M')}\n\n"
            )
        
        await message.answer(text)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–µ–ª–ª–µ–Ω–¥–∂–µ–π: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@dp.message(lambda m: m.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_statistics(message: Message):
    try:
        user_id = message.from_user.id
        
        if not await is_influencer(user_id):
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–µ
        influencer = await db.influencers.find_one({"user_id": user_id})
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        challenges_count = await db.challenges.count_documents({"category_id": influencer["category_id"]})
        completed_count = await db.submissions.count_documents({
            "challenge_id": {"$in": [c["_id"] async for c in db.challenges.find({"category_id": influencer["category_id"]})]},
            "status": "approved"
        })
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        week_ago = datetime.now(UTC) - timedelta(days=7)
        weekly_completed = await db.submissions.count_documents({
            "challenge_id": {"$in": [c["_id"] async for c in db.challenges.find({"category_id": influencer["category_id"]})]},
            "status": "approved",
            "submitted_at": {"$gte": week_ago}
        })
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –æ—Ç–≤–µ—Ç–æ–≤
        type_stats = {}
        challenges = await db.challenges.find({"category_id": influencer["category_id"]}).to_list(length=None)
        
        for challenge in challenges:
            submissions = await db.submissions.find({
                "challenge_id": challenge["_id"],
                "status": "approved"
            }).to_list(length=None)
            
            for submission in submissions:
                media_type = submission.get("media_type", "text")
                if media_type in type_stats:
                    type_stats[media_type] += 1
                else:
                    type_stats[media_type] = 1
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        time_stats = {
            "morning": 0,  # 6-12
            "day": 0,      # 12-18
            "evening": 0,  # 18-24
            "night": 0     # 0-6
        }
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
        weekday_stats = {
            "monday": 0,
            "tuesday": 0,
            "wednesday": 0,
            "thursday": 0,
            "friday": 0,
            "saturday": 0,
            "sunday": 0
        }
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        for challenge in challenges:
            submissions = await db.submissions.find({
                "challenge_id": challenge["_id"],
                "status": "approved"
            }).to_list(length=None)
            
            for submission in submissions:
                hour = submission["submitted_at"].hour
                weekday = submission["submitted_at"].strftime("%A").lower()
                
                if 6 <= hour < 12:
                    time_stats["morning"] += 1
                elif 12 <= hour < 18:
                    time_stats["day"] += 1
                elif 18 <= hour < 24:
                    time_stats["evening"] += 1
                else:
                    time_stats["night"] += 1
                
                weekday_stats[weekday] += 1
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        top_users = await db.submissions.aggregate([
            {
                "$match": {
                    "challenge_id": {"$in": [c["_id"] async for c in db.challenges.find({"category_id": influencer["category_id"]})]},
                    "status": "approved"
                }
            },
            {
                "$group": {
                    "_id": "$user_id",
                    "count": {"$sum": 1}
                }
            },
            {
                "$sort": {"count": -1}
            },
            {
                "$limit": 5
            }
        ]).to_list(length=None)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
        top_users_info = []
        for user in top_users:
            user_info = await db.users.find_one({"_id": user["_id"]})
            if user_info:
                top_users_info.append({
                    "username": user_info.get("username", "Unknown"),
                    "count": user["count"]
                })
        
        text = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞—à–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n\n"
            f"–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"‚Ä¢ –í—Å–µ–≥–æ —á–µ–ª–ª–µ–Ω–¥–∂–µ–π: {challenges_count}\n"
            f"‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed_count}\n"
            f"‚Ä¢ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é: {weekly_completed}\n\n"
            f"–ü–æ —Ç–∏–ø–∞–º –æ—Ç–≤–µ—Ç–æ–≤:\n"
        )
        
        for media_type, count in type_stats.items():
            text += f"‚Ä¢ {media_type}: {count}\n"
        
        text += "\n–ü–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:\n"
        text += f"‚Ä¢ –£—Ç—Ä–æ (6-12): {time_stats['morning']}\n"
        text += f"‚Ä¢ –î–µ–Ω—å (12-18): {time_stats['day']}\n"
        text += f"‚Ä¢ –í–µ—á–µ—Ä (18-24): {time_stats['evening']}\n"
        text += f"‚Ä¢ –ù–æ—á—å (0-6): {time_stats['night']}\n"
        
        text += "\n–ü–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏:\n"
        weekday_names = {
            "monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
            "tuesday": "–í—Ç–æ—Ä–Ω–∏–∫",
            "wednesday": "–°—Ä–µ–¥–∞",
            "thursday": "–ß–µ—Ç–≤–µ—Ä–≥",
            "friday": "–ü—è—Ç–Ω–∏—Ü–∞",
            "saturday": "–°—É–±–±–æ—Ç–∞",
            "sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
        }
        for weekday, count in weekday_stats.items():
            text += f"‚Ä¢ {weekday_names[weekday]}: {count}\n"
        
        if top_users_info:
            text += "\n–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
            for i, user in enumerate(top_users_info, 1):
                text += f"{i}. @{user['username']}: {user['count']} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ\n"
        
        await message.answer(text)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞–º–∏
@dp.message(lambda m: m.text == "üìù –®–∞–±–ª–æ–Ω—ã")
async def manage_templates(message: Message):
    try:
        user_id = message.from_user.id
        
        if not await is_influencer(user_id):
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–µ
        influencer = await db.influencers.find_one({"user_id": user_id})
        
        # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω—ã –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–∞
        templates = await db.templates.find(
            {"created_by": user_id}
        ).sort("created_at", -1).to_list(length=None)
        
        if not templates:
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω", callback_data="create_template")]
                ]
            )
            await message.answer(
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤.\n"
                "–°–æ–∑–¥–∞–π—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ö–æ–∂–∏—Ö —á–µ–ª–ª–µ–Ω–¥–∂–µ–π.",
                reply_markup=keyboard
            )
            return
        
        text = "üìù –í–∞—à–∏ —à–∞–±–ª–æ–Ω—ã:\n\n"
        
        keyboard = []
        for template in templates:
            text += (
                f"‚Ä¢ {template['name']}\n"
                f"  –¢–∏–ø: {template['type']}\n"
                f"  –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {template.get('usage_count', 0)} —Ä–∞–∑\n\n"
            )
            
            keyboard.append([
                InlineKeyboardButton(
                    text=f"üìã –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å '{template['name']}'",
                    callback_data=f"use_template_{template['_id']}"
                )
            ])
            keyboard.append([
                InlineKeyboardButton(
                    text=f"‚ùå –£–¥–∞–ª–∏—Ç—å '{template['name']}'",
                    callback_data=f"delete_template_{template['_id']}"
                )
            ])
        
        keyboard.append([InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω", callback_data="create_template")])
        
        await message.answer(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞–º–∏: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞
@dp.callback_query(lambda c: c.data == "create_template")
async def create_template(callback: CallbackQuery, state: FSMContext):
    try:
        await state.set_state(InfluencerStates.waiting_for_template_name)
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞:"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞
@dp.message(InfluencerStates.waiting_for_template_name)
async def process_template_name(message: Message, state: FSMContext):
    try:
        await state.update_data(template_name=message.text)
        await state.set_state(InfluencerStates.waiting_for_template_text)
        
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —á–µ–ª–ª–µ–Ω–¥–∂–∞ –¥–ª—è —à–∞–±–ª–æ–Ω–∞:\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: '–°–¥–µ–ª–∞–π {–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ} {—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ}'"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–∑–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ —à–∞–±–ª–æ–Ω–∞
@dp.message(InfluencerStates.waiting_for_template_text)
async def process_template_text(message: Message, state: FSMContext):
    try:
        await state.update_data(template_text=message.text)
        
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="üì∏ –§–æ—Ç–æ", callback_data="template_type_photo"),
                    InlineKeyboardButton(text="üé• –í–∏–¥–µ–æ", callback_data="template_type_video")
                ],
                [InlineKeyboardButton(text="üìù –¢–µ–∫—Å—Ç", callback_data="template_type_text")]
            ]
        )
        
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —à–∞–±–ª–æ–Ω–∞:",
            reply_markup=keyboard
        )
        await state.set_state(InfluencerStates.waiting_for_template_type)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞ —à–∞–±–ª–æ–Ω–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —à–∞–±–ª–æ–Ω–∞
@dp.message(InfluencerStates.waiting_for_template_type)
@dp.callback_query(InfluencerStates.waiting_for_template_type)
async def process_template_type(callback: CallbackQuery, state: FSMContext):
    try:
        template_type = callback.data.split("_")[2]
        await state.update_data(template_type=template_type)
        await state.set_state(InfluencerStates.waiting_for_template_description)
        
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞:\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: '–°–¥–µ–ª–∞–π —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è'"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–∏–ø–∞ —à–∞–±–ª–æ–Ω–∞: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞
@dp.message(InfluencerStates.waiting_for_template_description)
async def process_template_description(message: Message, state: FSMContext):
    try:
        user_id = message.from_user.id
        data = await state.get_data()
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω
        new_template = {
            "name": data["template_name"],
            "text": data["template_text"],
            "description": message.text,
            "type": data["template_type"],
            "created_by": user_id,
            "created_at": datetime.now(UTC),
            "usage_count": 0
        }
        
        result = await db.templates.insert_one(new_template)
        
        await message.answer(
            "‚úÖ –®–∞–±–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {data['template_name']}\n"
            f"–¢–µ–∫—Å—Ç: {data['template_text']}\n"
            f"–¢–∏–ø: {data['template_type']}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {message.text}"
        )
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–∏—Å–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞
@dp.callback_query(lambda c: c.data.startswith("use_template_"))
async def use_template(callback: CallbackQuery, state: FSMContext):
    try:
        template_id = callback.data.split("_")[2]
        template = await db.templates.find_one({"_id": ObjectId(template_id)})
        
        if not template:
            await callback.answer("–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        await db.templates.update_one(
            {"_id": ObjectId(template_id)},
            {"$inc": {"usage_count": 1}}
        )
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–µ–ª–ª–µ–Ω–¥–∂ –∏–∑ —à–∞–±–ª–æ–Ω–∞
        user_id = callback.from_user.id
        influencer = await db.influencers.find_one({"user_id": user_id})
        
        new_challenge = {
            "text": template["text"],
            "description": template["description"],
            "type": template["type"],
            "category_id": influencer["category_id"],
            "created_by": user_id,
            "created_at": datetime.now(UTC),
            "is_active": True,
            "template_id": template["_id"]
        }
        
        result = await db.challenges.insert_one(new_challenge)
        
        await callback.message.edit_text(
            "‚úÖ –ß–µ–ª–ª–µ–Ω–¥–∂ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏–∑ —à–∞–±–ª–æ–Ω–∞!\n\n"
            f"–¢–µ–∫—Å—Ç: {template['text']}\n"
            f"–¢–∏–ø: {template['type']}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {template['description']}"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞
@dp.callback_query(lambda c: c.data.startswith("delete_template_"))
async def delete_template(callback: CallbackQuery):
    try:
        template_id = callback.data.split("_")[2]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ —à–∞–±–ª–æ–Ω
        active_challenges = await db.challenges.count_documents({
            "template_id": ObjectId(template_id),
            "is_active": True
        })
        
        if active_challenges > 0:
            await callback.answer(
                "–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω, –ø–æ–∫–∞ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∏–∑ –Ω–µ–≥–æ",
                show_alert=True
            )
            return
        
        # –£–¥–∞–ª—è–µ–º —à–∞–±–ª–æ–Ω
        await db.templates.delete_one({"_id": ObjectId(template_id)})
        
        await callback.message.edit_text("‚úÖ –®–∞–±–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —á–µ–ª–ª–µ–Ω–¥–∂–∞ –Ω–µ–¥–µ–ª–∏
@dp.message(lambda m: m.text == "üéØ –ß–µ–ª–ª–µ–Ω–¥–∂ –Ω–µ–¥–µ–ª–∏")
async def manage_weekly_challenge(message: Message):
    try:
        user_id = message.from_user.id
        
        if not await is_influencer(user_id):
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–µ
        influencer = await db.influencers.find_one({"user_id": user_id})
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —á–µ–ª–ª–µ–Ω–¥–∂ –Ω–µ–¥–µ–ª–∏
        current_weekly = await get_weekly_challenge(influencer["category_id"])
        
        if current_weekly:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            completed_count = await db.submissions.count_documents({
                "challenge_id": current_weekly["challenge_id"],
                "status": "approved"
            })
            
            text = (
                "üéØ –¢–µ–∫—É—â–∏–π —á–µ–ª–ª–µ–Ω–¥–∂ –Ω–µ–¥–µ–ª–∏:\n\n"
                f"–¢–µ–∫—Å—Ç: {current_weekly['text']}\n"
                f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed_count} —Ä–∞–∑\n"
                f"–î–æ –∫–æ–Ω—Ü–∞: {current_weekly['end_date'].strftime('%d.%m.%Y')}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            )
            
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="weekly_stats")],
                    [InlineKeyboardButton(text="‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ—Å—Ä–æ—á–Ω–æ", callback_data="end_weekly")]
                ]
            )
        else:
            text = (
                "üéØ –ß–µ–ª–ª–µ–Ω–¥–∂ –Ω–µ–¥–µ–ª–∏\n\n"
                "–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–µ–ª–ª–µ–Ω–¥–∂–∞ –Ω–µ–¥–µ–ª–∏.\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —á–µ–ª–ª–µ–Ω–¥–∂ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:"
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏ –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–∞
            challenges = await db.challenges.find({
                "category_id": influencer["category_id"],
                "is_active": True
            }).sort("created_at", -1).to_list(length=None)
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[])
            for challenge in challenges:
                keyboard.inline_keyboard.append([
                    InlineKeyboardButton(
                        text=challenge["text"],
                        callback_data=f"set_weekly_{challenge['_id']}"
                    )
                ])
        
        await message.answer(text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —á–µ–ª–ª–µ–Ω–¥–∂–µ–º –Ω–µ–¥–µ–ª–∏: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
@dp.message(lambda m: m.text == "üì± –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
async def manage_integrations(message: Message):
    try:
        user_id = message.from_user.id
        
        if not await is_influencer(user_id):
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–µ
        influencer = await db.influencers.find_one({"user_id": user_id})
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
        integrations = await db.integrations.find_one({"influencer_id": user_id})
        
        text = "üì± –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å–æ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å–µ—Ç—è–º–∏\n\n"
        
        if integrations:
            text += (
                f"TikTok: {'‚úÖ' if integrations.get('tiktok_enabled') else '‚ùå'}\n"
                f"Instagram: {'‚úÖ' if integrations.get('instagram_enabled') else '‚ùå'}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            )
        else:
            text += "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:"
        
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="TikTok", callback_data="integrate_tiktok"),
                    InlineKeyboardButton(text="Instagram", callback_data="integrate_instagram")
                ],
                [InlineKeyboardButton(text="üé® –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ–±–ª–æ–∂–µ–∫", callback_data="cover_generator")]
            ]
        )
        
        await message.answer(text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è–º–∏: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –æ–±–ª–æ–∂–µ–∫
@dp.callback_query(lambda c: c.data == "cover_generator")
async def cover_generator(callback: CallbackQuery, state: FSMContext):
    try:
        user_id = callback.from_user.id
        
        if not await is_influencer(user_id):
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–µ
        influencer = await db.influencers.find_one({"user_id": user_id})
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏
        submissions = await db.submissions.find({
            "challenge_id": {"$in": [c["_id"] async for c in db.challenges.find({"category_id": influencer["category_id"]})]},
            "status": "approved",
            "media_type": {"$in": ["photo", "video"]}
        }).sort("submitted_at", -1).limit(5).to_list(length=None)
        
        if not submissions:
            await callback.message.edit_text(
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —á–µ–ª–ª–µ–Ω–¥–∂–µ–π —Å –º–µ–¥–∏–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±–ª–æ–∂–∫–∏."
            )
            return
        
        text = "üé® –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ–±–ª–æ–∂–µ–∫\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ–¥–∏–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±–ª–æ–∂–∫–∏:"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[])
        for submission in submissions:
            challenge = await db.challenges.find_one({"_id": submission["challenge_id"]})
            if challenge:
                keyboard.inline_keyboard.append([
                    InlineKeyboardButton(
                        text=f"üì∏ {challenge['text']}",
                        callback_data=f"generate_cover_{submission['_id']}"
                    )
                ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±–ª–æ–∂–∫–∏: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±–ª–æ–∂–∫–∏
@dp.callback_query(lambda c: c.data.startswith("generate_cover_"))
async def create_cover(callback: CallbackQuery):
    try:
        submission_id = callback.data.split("_")[2]
        submission = await db.submissions.find_one({"_id": ObjectId(submission_id)})
        
        if not submission:
            await callback.answer("–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±–ª–æ–∂–∫–∏
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(
            "üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±–ª–æ–∂–∫–∏...\n\n"
            "–§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å "
            "—Å–æ–∑–¥–∞–≤–∞—Ç—å –∫—Ä–∞—Å–∏–≤—ã–µ –æ–±–ª–æ–∂–∫–∏ –¥–ª—è TikTok –∏ Instagram!"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±–ª–æ–∂–∫–∏: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–µ–ª–ª–µ–Ω–¥–∂–∞ –Ω–µ–¥–µ–ª–∏
@dp.callback_query(lambda c: c.data.startswith("set_weekly_"))
async def set_weekly_challenge(callback: CallbackQuery):
    try:
        challenge_id = callback.data.split("_")[2]
        user_id = callback.from_user.id
        
        if not await is_influencer(user_id):
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–µ
        influencer = await db.influencers.find_one({"user_id": user_id})
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–µ–ª–ª–µ–Ω–¥–∂–µ
        challenge = await db.challenges.find_one({"_id": ObjectId(challenge_id)})
        if not challenge:
            await callback.answer("–ß–µ–ª–ª–µ–Ω–¥–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è (7 –¥–Ω–µ–π –æ—Ç —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã)
        end_date = datetime.now(UTC) + timedelta(days=7)
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —á–µ–ª–ª–µ–Ω–¥–∂–µ –Ω–µ–¥–µ–ª–∏
        weekly_challenge = {
            "challenge_id": challenge["_id"],
            "category_id": influencer["category_id"],
            "text": challenge["text"],
            "start_date": datetime.now(UTC),
            "end_date": end_date,
            "created_by": user_id
        }
        
        await db.weekly_challenges.insert_one(weekly_challenge)
        
        await callback.message.edit_text(
            "‚úÖ –ß–µ–ª–ª–µ–Ω–¥–∂ –Ω–µ–¥–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n\n"
            f"–¢–µ–∫—Å—Ç: {challenge['text']}\n"
            f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {end_date.strftime('%d.%m.%Y')}"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —á–µ–ª–ª–µ–Ω–¥–∂–∞ –Ω–µ–¥–µ–ª–∏: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–µ–ª–ª–µ–Ω–¥–∂–∞ –Ω–µ–¥–µ–ª–∏
@dp.callback_query(lambda c: c.data == "weekly_stats")
async def show_weekly_stats(callback: CallbackQuery):
    try:
        user_id = callback.from_user.id
        
        if not await is_influencer(user_id):
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–µ
        influencer = await db.influencers.find_one({"user_id": user_id})
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —á–µ–ª–ª–µ–Ω–¥–∂ –Ω–µ–¥–µ–ª–∏
        current_weekly = await get_weekly_challenge(influencer["category_id"])
        
        if not current_weekly:
            await callback.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–µ–ª–ª–µ–Ω–¥–∂–∞ –Ω–µ–¥–µ–ª–∏")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        submissions = await db.submissions.find({
            "challenge_id": current_weekly["challenge_id"],
            "status": "approved"
        }).sort("submitted_at", -1).to_list(length=None)
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º
        daily_stats = {}
        for submission in submissions:
            day = submission["submitted_at"].strftime("%d.%m.%Y")
            if day in daily_stats:
                daily_stats[day] += 1
            else:
                daily_stats[day] = 1
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–µ–ª–ª–µ–Ω–¥–∂–∞ –Ω–µ–¥–µ–ª–∏:\n\n"
        text += f"–í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {len(submissions)}\n\n"
        
        if daily_stats:
            text += "–ü–æ –¥–Ω—è–º:\n"
            for day, count in sorted(daily_stats.items()):
                text += f"‚Ä¢ {day}: {count}\n"
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        top_users = await db.submissions.aggregate([
            {
                "$match": {
                    "challenge_id": current_weekly["challenge_id"],
                    "status": "approved"
                }
            },
            {
                "$group": {
                    "_id": "$user_id",
                    "count": {"$sum": 1}
                }
            },
            {
                "$sort": {"count": -1}
            },
            {
                "$limit": 5
            }
        ]).to_list(length=None)
        
        if top_users:
            text += "\n–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
            for i, user in enumerate(top_users, 1):
                user_info = await db.users.find_one({"_id": user["_id"]})
                if user_info:
                    text += f"{i}. @{user_info.get('username', 'Unknown')} - {user['count']}\n"
        
        await callback.message.edit_text(text)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–µ–ª–ª–µ–Ω–¥–∂–∞ –Ω–µ–¥–µ–ª–∏: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —á–µ–ª–ª–µ–Ω–¥–∂–∞ –Ω–µ–¥–µ–ª–∏
@dp.callback_query(lambda c: c.data == "end_weekly")
async def end_weekly_challenge(callback: CallbackQuery):
    try:
        user_id = callback.from_user.id
        
        if not await is_influencer(user_id):
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–µ
        influencer = await db.influencers.find_one({"user_id": user_id})
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —á–µ–ª–ª–µ–Ω–¥–∂ –Ω–µ–¥–µ–ª–∏
        current_weekly = await get_weekly_challenge(influencer["category_id"])
        
        if not current_weekly:
            await callback.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–µ–ª–ª–µ–Ω–¥–∂–∞ –Ω–µ–¥–µ–ª–∏")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è
        await db.weekly_challenges.update_one(
            {"_id": current_weekly["_id"]},
            {"$set": {"end_date": datetime.now(UTC)}}
        )
        
        await callback.message.edit_text(
            "‚úÖ –ß–µ–ª–ª–µ–Ω–¥–∂ –Ω–µ–¥–µ–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π —á–µ–ª–ª–µ–Ω–¥–∂ –Ω–µ–¥–µ–ª–∏."
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —á–µ–ª–ª–µ–Ω–¥–∂–∞ –Ω–µ–¥–µ–ª–∏: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å TikTok
@dp.callback_query(lambda c: c.data == "integrate_tiktok")
async def integrate_tiktok(callback: CallbackQuery, state: FSMContext):
    try:
        user_id = callback.from_user.id
        
        if not await is_influencer(user_id):
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        integrations = await db.integrations.find_one({"influencer_id": user_id})
        
        if integrations and integrations.get("tiktok_enabled"):
            # –ï—Å–ª–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —É–∂–µ –≤–∫–ª—é—á–µ–Ω–∞, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ç–∫–ª—é—á–∏—Ç—å
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å TikTok", callback_data="disable_tiktok")],
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_integrations")]
                ]
            )
            
            await callback.message.edit_text(
                "TikTok —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω!\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥.",
                reply_markup=keyboard
            )
        else:
            # –ï—Å–ª–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å TikTok", url="https://tiktok.com/oauth/authorize")],
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_integrations")]
                ]
            )
            
            await callback.message.edit_text(
                "–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è TikTok:\n\n"
                "1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–¥–∫–ª—é—á–∏—Ç—å TikTok'\n"
                "2. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –≤ —Å–≤–æ–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ\n"
                "3. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É\n\n"
                "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –≤ TikTok.",
                reply_markup=keyboard
            )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å TikTok: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Instagram
@dp.callback_query(lambda c: c.data == "integrate_instagram")
async def integrate_instagram(callback: CallbackQuery, state: FSMContext):
    try:
        user_id = callback.from_user.id
        
        if not await is_influencer(user_id):
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        integrations = await db.integrations.find_one({"influencer_id": user_id})
        
        if integrations and integrations.get("instagram_enabled"):
            # –ï—Å–ª–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —É–∂–µ –≤–∫–ª—é—á–µ–Ω–∞, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ç–∫–ª—é—á–∏—Ç—å
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å Instagram", callback_data="disable_instagram")],
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_integrations")]
                ]
            )
            
            await callback.message.edit_text(
                "Instagram —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω!\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥.",
                reply_markup=keyboard
            )
        else:
            # –ï—Å–ª–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å Instagram", url="https://api.instagram.com/oauth/authorize")],
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_integrations")]
                ]
            )
            
            await callback.message.edit_text(
                "–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Instagram:\n\n"
                "1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–¥–∫–ª—é—á–∏—Ç—å Instagram'\n"
                "2. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –≤ —Å–≤–æ–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ\n"
                "3. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É\n\n"
                "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –≤ Instagram.",
                reply_markup=keyboard
            )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Instagram: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è TikTok
@dp.callback_query(lambda c: c.data == "disable_tiktok")
async def disable_tiktok(callback: CallbackQuery):
    try:
        user_id = callback.from_user.id
        
        if not await is_influencer(user_id):
            return
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
        await db.integrations.update_one(
            {"influencer_id": user_id},
            {"$set": {"tiktok_enabled": False, "tiktok_token": None}},
            upsert=True
        )
        
        await callback.message.edit_text(
            "‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å TikTok –æ—Ç–∫–ª—é—á–µ–Ω–∞!\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –µ—ë —Å–Ω–æ–≤–∞ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è."
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ TikTok: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è Instagram
@dp.callback_query(lambda c: c.data == "disable_instagram")
async def disable_instagram(callback: CallbackQuery):
    try:
        user_id = callback.from_user.id
        
        if not await is_influencer(user_id):
            return
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
        await db.integrations.update_one(
            {"influencer_id": user_id},
            {"$set": {"instagram_enabled": False, "instagram_token": None}},
            upsert=True
        )
        
        await callback.message.edit_text(
            "‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Instagram –æ—Ç–∫–ª—é—á–µ–Ω–∞!\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –µ—ë —Å–Ω–æ–≤–∞ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è."
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ Instagram: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è–º
@dp.callback_query(lambda c: c.data == "back_to_integrations")
async def back_to_integrations(callback: CallbackQuery):
    try:
        user_id = callback.from_user.id
        
        if not await is_influencer(user_id):
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–µ
        influencer = await db.influencers.find_one({"user_id": user_id})
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
        integrations = await db.integrations.find_one({"influencer_id": user_id})
        
        text = "üì± –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å–æ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å–µ—Ç—è–º–∏\n\n"
        
        if integrations:
            text += (
                f"TikTok: {'‚úÖ' if integrations.get('tiktok_enabled') else '‚ùå'}\n"
                f"Instagram: {'‚úÖ' if integrations.get('instagram_enabled') else '‚ùå'}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            )
        else:
            text += "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:"
        
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="TikTok", callback_data="integrate_tiktok"),
                    InlineKeyboardButton(text="Instagram", callback_data="integrate_instagram")
                ],
                [InlineKeyboardButton(text="üé® –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ–±–ª–æ–∂–µ–∫", callback_data="cover_generator")]
            ]
        )
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è–º: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —á–µ–ª–ª–µ–Ω–¥–∂–∞ –Ω–µ–¥–µ–ª–∏
async def get_weekly_challenge(category_id: str) -> Optional[Dict]:
    try:
        current_time = datetime.now(UTC)
        weekly_challenge = await db.weekly_challenges.find_one({
            "category_id": category_id,
            "end_date": {"$gt": current_time}
        })
        return weekly_challenge
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–µ–ª–ª–µ–Ω–¥–∂–∞ –Ω–µ–¥–µ–ª–∏: {e}")
        return None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async def init_db():
    try:
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–π
        await db.weekly_challenges.create_index([
            ("category_id", 1),
            ("end_date", 1)
        ])
        
        await db.integrations.create_index([
            ("influencer_id", 1)
        ])
        
        await db.submissions.create_index([
            ("challenge_id", 1),
            ("status", 1),
            ("submitted_at", -1)
        ])
        
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¥–ª—è –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–æ–≤")
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await init_db()
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        raise

def register_handlers(dispatcher):
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    dispatcher.message.register(cmd_start, Command("start"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
    dispatcher.message.register(add_challenge, lambda m: m.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂")
    dispatcher.message.register(show_my_challenges, lambda m: m.text == "üìã –ú–æ–∏ —á–µ–ª–ª–µ–Ω–¥–∂–∏")
    dispatcher.message.register(manage_challenges, lambda m: m.text == "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ–ª–ª–µ–Ω–¥–∂–∞–º–∏")
    dispatcher.message.register(show_scheduled_challenges, lambda m: m.text == "üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ")
    dispatcher.message.register(show_statistics, lambda m: m.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    dispatcher.message.register(manage_templates, lambda m: m.text == "üìù –®–∞–±–ª–æ–Ω—ã")
    dispatcher.message.register(manage_weekly_challenge, lambda m: m.text == "üéØ –ß–µ–ª–ª–µ–Ω–¥–∂ –Ω–µ–¥–µ–ª–∏")
    dispatcher.message.register(manage_integrations, lambda m: m.text == "üì± –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM
    dispatcher.message.register(process_challenge_text, InfluencerStates.waiting_for_challenge_text)
    dispatcher.message.register(process_challenge_type, InfluencerStates.waiting_for_challenge_type)
    dispatcher.message.register(process_challenge_description, InfluencerStates.waiting_for_challenge_description)
    dispatcher.message.register(process_edit_text, InfluencerStates.waiting_for_edit_text)
    dispatcher.message.register(process_edit_description, InfluencerStates.waiting_for_edit_description)
    dispatcher.message.register(process_archive_reason, InfluencerStates.waiting_for_archive_reason)
    dispatcher.message.register(process_schedule_date, InfluencerStates.waiting_for_schedule_date)
    dispatcher.message.register(process_schedule_time, InfluencerStates.waiting_for_schedule_time)
    dispatcher.message.register(process_template_name, InfluencerStates.waiting_for_template_name)
    dispatcher.message.register(process_template_text, InfluencerStates.waiting_for_template_text)
    dispatcher.message.register(process_template_type, InfluencerStates.waiting_for_template_type)
    dispatcher.message.register(process_template_description, InfluencerStates.waiting_for_template_description)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    dispatcher.callback_query.register(edit_challenge, lambda c: c.data.startswith("edit_"))
    dispatcher.callback_query.register(delete_challenge, lambda c: c.data.startswith("delete_"))
    dispatcher.callback_query.register(archive_challenge, lambda c: c.data.startswith("archive_"))
    dispatcher.callback_query.register(schedule_challenge, lambda c: c.data.startswith("schedule_"))
    dispatcher.callback_query.register(edit_challenge_text, lambda c: c.data == "edit_text")
    dispatcher.callback_query.register(edit_challenge_description, lambda c: c.data == "edit_description")
    dispatcher.callback_query.register(edit_challenge_type, lambda c: c.data == "edit_type")
    dispatcher.callback_query.register(process_edit_type, lambda c: c.data.startswith("edit_type_"))
    dispatcher.callback_query.register(create_template, lambda c: c.data == "create_template")
    dispatcher.callback_query.register(use_template, lambda c: c.data.startswith("use_template_"))
    dispatcher.callback_query.register(delete_template, lambda c: c.data.startswith("delete_template_"))
    dispatcher.callback_query.register(set_weekly_challenge, lambda c: c.data.startswith("set_weekly_"))
    dispatcher.callback_query.register(show_weekly_stats, lambda c: c.data == "weekly_stats")
    dispatcher.callback_query.register(end_weekly_challenge, lambda c: c.data == "end_weekly")
    dispatcher.callback_query.register(integrate_tiktok, lambda c: c.data == "integrate_tiktok")
    dispatcher.callback_query.register(integrate_instagram, lambda c: c.data == "integrate_instagram")
    dispatcher.callback_query.register(disable_tiktok, lambda c: c.data == "disable_tiktok")
    dispatcher.callback_query.register(disable_instagram, lambda c: c.data == "disable_instagram")
    dispatcher.callback_query.register(back_to_integrations, lambda c: c.data == "back_to_integrations")
    dispatcher.callback_query.register(cover_generator, lambda c: c.data == "cover_generator")
    dispatcher.callback_query.register(create_cover, lambda c: c.data.startswith("generate_cover_"))

if __name__ == "__main__":
    import asyncio
    asyncio.run(main()) 