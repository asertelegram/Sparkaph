import logging
from datetime import datetime, UTC
from typing import Dict, Any, List, Optional
from enum import Enum
from dataclasses import dataclass
from motor.motor_asyncio import AsyncIOMotorDatabase
from aiogram import Bot

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class ContentType(Enum):
    TEXT = "text"
    PHOTO = "photo"
    VIDEO = "video"
    DOCUMENT = "document"
    STICKER = "sticker"
    ANIMATION = "animation"

class ModerationStatus(Enum):
    PENDING = "pending"
    APPROVED = "approved"
    REJECTED = "rejected"
    FLAGGED = "flagged"

class ModerationAction(Enum):
    APPROVE = "approve"
    REJECT = "reject"
    FLAG = "flag"
    DELETE = "delete"
    BAN = "ban"
    WARN = "warn"

@dataclass
class ModerationRule:
    content_type: ContentType
    pattern: str
    action: ModerationAction
    priority: int = 0
    description: str = ""

class ModerationSystem:
    def __init__(self, db: AsyncIOMotorDatabase, bot: Bot):
        self.db = db
        self.bot = bot
        self.rules = self._load_rules()
    
    def _load_rules(self) -> List[ModerationRule]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∞–≤–∏–ª –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        return [
            # –ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–∞
            ModerationRule(
                content_type=ContentType.TEXT,
                pattern=r"(?i)(—Å–ø–∞–º|—Ä–µ–∫–ª–∞–º–∞|–∫—É–ø–∏—Ç—å|–ø—Ä–æ–¥–∞—Ç—å|–∑–∞–∫–∞–∑–∞—Ç—å)",
                action=ModerationAction.REJECT,
                priority=1,
                description="–°–ø–∞–º –∏ —Ä–µ–∫–ª–∞–º–∞"
            ),
            ModerationRule(
                content_type=ContentType.TEXT,
                pattern=r"(?i)(–æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ|—Ä—É–≥–∞—Ç–µ–ª—å—Å—Ç–≤–æ|–º–∞—Ç)",
                action=ModerationAction.REJECT,
                priority=2,
                description="–û—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è"
            ),
            
            # –ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è —Ñ–æ—Ç–æ
            ModerationRule(
                content_type=ContentType.PHOTO,
                pattern=r"nsfw|nude|porn",
                action=ModerationAction.REJECT,
                priority=3,
                description="NSFW –∫–æ–Ω—Ç–µ–Ω—Ç"
            ),
            
            # –ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è –≤–∏–¥–µ–æ
            ModerationRule(
                content_type=ContentType.VIDEO,
                pattern=r"nsfw|nude|porn",
                action=ModerationAction.REJECT,
                priority=3,
                description="NSFW –∫–æ–Ω—Ç–µ–Ω—Ç"
            ),
            
            # –û–±—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞
            ModerationRule(
                content_type=ContentType.TEXT,
                pattern=r"(?i)(–≤–∑–ª–æ–º|—Ö–∞–∫|–≤–∑–ª–æ–º–∞—Ç—å|—Ö–∞–∫–∞—Ç—å)",
                action=ModerationAction.FLAG,
                priority=2,
                description="–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"
            )
        ]
    
    async def moderate_content(
        self,
        content_type: ContentType,
        content: str,
        user_id: int,
        message_id: int,
        chat_id: int
    ) -> Dict[str, Any]:
        """–ú–æ–¥–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª–∞
            for rule in self.rules:
                if rule.content_type == content_type:
                    if rule.pattern in content.lower():
                        # –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
                        if rule.action == ModerationAction.REJECT:
                            await self._reject_content(message_id, chat_id, rule.description)
                        elif rule.action == ModerationAction.FLAG:
                            await self._flag_content(message_id, chat_id, rule.description)
                        elif rule.action == ModerationAction.DELETE:
                            await self._delete_content(message_id, chat_id)
                        elif rule.action == ModerationAction.BAN:
                            await self._ban_user(user_id, chat_id, rule.description)
                        elif rule.action == ModerationAction.WARN:
                            await self._warn_user(user_id, chat_id, rule.description)
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏
                        await self._save_moderation_result(
                            user_id=user_id,
                            content_type=content_type,
                            content=content,
                            action=rule.action,
                            reason=rule.description
                        )
                        
                        return {
                            "status": "moderated",
                            "action": rule.action.value,
                            "reason": rule.description
                        }
            
            # –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É
            await self._save_moderation_result(
                user_id=user_id,
                content_type=content_type,
                content=content,
                action=ModerationAction.APPROVE,
                reason="Content passed moderation"
            )
            
            return {
                "status": "approved",
                "action": "approve",
                "reason": "Content passed moderation"
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}")
            return {
                "status": "error",
                "error": str(e)
            }
    
    async def _reject_content(self, message_id: int, chat_id: int, reason: str):
        """–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        try:
            await self.bot.delete_message(chat_id, message_id)
            await self.bot.send_message(
                chat_id,
                f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ\n–ü—Ä–∏—á–∏–Ω–∞: {reason}"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}")
    
    async def _flag_content(self, message_id: int, chat_id: int, reason: str):
        """–ü–æ–º–µ—Ç–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∫–∞–∫ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ"""
        try:
            await self.bot.send_message(
                chat_id,
                f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç\n–ü—Ä–∏—á–∏–Ω–∞: {reason}"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–º–µ—Ç–∫–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}")
    
    async def _delete_content(self, message_id: int, chat_id: int):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        try:
            await self.bot.delete_message(chat_id, message_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}")
    
    async def _ban_user(self, user_id: int, chat_id: int, reason: str):
        """–ë–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            await self.bot.ban_chat_member(chat_id, user_id)
            await self.bot.send_message(
                chat_id,
                f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω\n–ü—Ä–∏—á–∏–Ω–∞: {reason}"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    
    async def _warn_user(self, user_id: int, chat_id: int, reason: str):
        """–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            await self.bot.send_message(
                chat_id,
                f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n–ü—Ä–∏—á–∏–Ω–∞: {reason}"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    
    async def _save_moderation_result(
        self,
        user_id: int,
        content_type: ContentType,
        content: str,
        action: ModerationAction,
        reason: str
    ):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        try:
            await self.db.moderation_logs.insert_one({
                "user_id": user_id,
                "content_type": content_type.value,
                "content": content,
                "action": action.value,
                "reason": reason,
                "timestamp": datetime.now(UTC)
            })
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {e}")
    
    async def get_moderation_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        try:
            total = await self.db.moderation_logs.count_documents({})
            approved = await self.db.moderation_logs.count_documents({"action": "approve"})
            rejected = await self.db.moderation_logs.count_documents({"action": "reject"})
            flagged = await self.db.moderation_logs.count_documents({"action": "flag"})
            deleted = await self.db.moderation_logs.count_documents({"action": "delete"})
            banned = await self.db.moderation_logs.count_documents({"action": "ban"})
            warned = await self.db.moderation_logs.count_documents({"action": "warn"})
            
            return {
                "total": total,
                "approved": approved,
                "rejected": rejected,
                "flagged": flagged,
                "deleted": deleted,
                "banned": banned,
                "warned": warned
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {e}")
            return {
                "error": str(e)
            }
    
    async def add_moderation_rule(self, rule: ModerationRule) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        try:
            self.rules.append(rule)
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–∞–≤–∏–ª–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {e}")
            return False
    
    async def remove_moderation_rule(self, rule_index: int) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        try:
            if 0 <= rule_index < len(self.rules):
                self.rules.pop(rule_index)
                return True
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–∞–≤–∏–ª–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {e}")
            return False
    
    async def get_moderation_rules(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–∞–≤–∏–ª –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        try:
            return [
                {
                    "content_type": rule.content_type.value,
                    "pattern": rule.pattern,
                    "action": rule.action.value,
                    "priority": rule.priority,
                    "description": rule.description
                }
                for rule in self.rules
            ]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∞–≤–∏–ª –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {e}")
            return []

    async def auto_moderate_user(self, user_id: int, complaints_limit: int = 3, warnings_limit: int = 2, ban_system=None, complaint_system=None, admin_id: int = 0):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∂–∞–ª–æ–± –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∞–ª–æ–±
            complaints_count = 0
            if complaint_system:
                complaints = await complaint_system.get_user_complaints(user_id, limit=100)
                complaints_count = len([c for c in complaints if c.get('status') == 'pending'])
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
            warnings_count = 0
            if ban_system:
                warnings = await ban_system.get_user_warnings(user_id)
                warnings_count = len(warnings)
            # –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∂–∞–ª–æ–± ‚Äî –±–∞–Ω
            if complaints_count >= complaints_limit and ban_system:
                await ban_system.ban_user(user_id, admin_id, reason=f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±–∞–Ω: {complaints_count} –∂–∞–ª–æ–±", duration_hours=24)
                return {"action": "ban", "reason": f"{complaints_count} –∂–∞–ª–æ–±"}
            # –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π ‚Äî –±–∞–Ω
            if warnings_count >= warnings_limit and ban_system:
                await ban_system.ban_user(user_id, admin_id, reason=f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±–∞–Ω: {warnings_count} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π", duration_hours=24)
                return {"action": "ban", "reason": f"{warnings_count} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π"}
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∂–∞–ª–æ–±—ã ‚Äî –≤–∞—Ä–Ω
            if complaints_count > 0 and ban_system:
                await ban_system.warn_user(user_id, admin_id, reason=f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: {complaints_count} –∂–∞–ª–æ–±")
                return {"action": "warn", "reason": f"{complaints_count} –∂–∞–ª–æ–±"}
            return {"action": "none"}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ-–º–æ–¥–µ—Ä–∞—Ü–∏–∏: {e}")
            return {"action": "error", "error": str(e)} 